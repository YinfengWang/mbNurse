<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Database</name>
    </assembly>
    <members>
        <member name="T:System.Database.OrderBy">
            <summary>
            ORM结构化查询语句OrderBy排序条件类
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_SelectColumns">
            <summary>
            选择字段名变量
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_Tables">
            <summary>
            选择查询的表
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_ldTables">
            <summary>
            选择查询的表名和对应的别名
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_WhereConditions">
            <summary>
            选择条件组合
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_ArrayListParameters">
            <summary>
            Where选择条件组合参数列表
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_ArrayListParameterTypeFullNames">
            <summary>
            Where选择条件组合参数类型名称的全称
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_ArrayListParameterValues">
            <summary>
            Where选择条件组合参数对应值列表
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_GroupBy">
            <summary>
            分组列字段列表
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_HavingCondition">
            <summary>
            GroupBy的Having条件列表
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_ArrayListHavingParameters">
            <summary>
            Having条件组合参数列表
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_ArrayListHavingParameterTypeFullNames">
            <summary>
            Having条件组合参数类型名称的全称
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_ArrayListHavingParameterValues">
            <summary>
            Having条件组合参数对应值列表
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_sbOrderBy">
            <summary>
            排序字段列表
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.m_ParmToken">
            <summary>
            参数前导符
            </summary>
        </member>
        <member name="F:System.Database.OrderBy.chrEntityColumnSplit">
            <summary>
            表实体原描述信息(EntityColumn)属性意义的分隔符
            </summary>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary)">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String)">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strColumn">默认排序方向的排序字段</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Database.Extend.OrderDirection)">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strColumn">排序字段</param>
            <param name="orderDirection">排序方向</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String[])">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strArraryColumns">默认升序的排序字段数组</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String[],System.Database.Extend.OrderDirection)">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strArraryColumns">排序字段数组</param>
            <param name="orderDirection">排序方向</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="lstParameters">选择条件组合参数列表</param>
            <param name="lstParameterTypeFullNames">选择条件组合参数类型名称的全称</param>
            <param name="lstParameterValues">选择条件组合参数对应值列表</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String,System.Int32)">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="lstParameters">选择条件组合参数列表</param>
            <param name="lstParameterTypeFullNames">选择条件组合参数类型名称的全称</param>
            <param name="lstParameterValues">选择条件组合参数对应值列表</param>
            <param name="strColumn">默认升序的排序字段</param>
            <param name="i">默认升序的排序字段辅助参数变量，以区别GroupBy分组构造函数</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String[])">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="lstParameters">选择条件组合参数列表</param>
            <param name="lstParameterTypeFullNames">选择条件组合参数类型名称的全称</param>
            <param name="lstParameterValues">选择条件组合参数对应值列表</param>
            <param name="strArraryColumns">默认升序的排序字段数组</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="lstParameters">选择条件组合参数列表</param>
            <param name="lstParameterTypeFullNames">选择条件组合参数类型名称的全称</param>
            <param name="lstParameterValues">选择条件组合参数对应值列表</param>
            <param name="strGroupBy">分组条件字段</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String,System.String)">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="lstParameters">选择条件组合参数列表</param>
            <param name="lstParameterTypeFullNames">选择条件组合参数类型名称的全称</param>
            <param name="lstParameterValues">选择条件组合参数对应值列表</param>
            <param name="strGroupBy">分组条件字段</param>
            <param name="strColumn">默认升序的排序字段</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String,System.String[])">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="lstParameters">选择条件组合参数列表</param>
            <param name="lstParameterTypeFullNames">选择条件组合参数类型名称的全称</param>
            <param name="lstParameterValues">选择条件组合参数对应值列表</param>
            <param name="strGroupBy">分组条件字段</param>
            <param name="strArraryColumns">默认升序的排序字段数组</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="lstParameters">选择条件组合参数列表</param>
            <param name="lstParameterTypeFullNames">选择条件组合参数类型名称的全称</param>
            <param name="lstParameterValues">选择条件组合参数对应值列表</param>
            <param name="strGroupBy">分组条件字段</param>
            <param name="strHavingCondition">GroupBy的Having条件列表</param>
            <param name="lstHavingParameters">Having条件组合参数列表</param>
            <param name="lstHavingParameterTypeFullNames">Having条件组合参数类型名称的全称</param>
            <param name="lstHavingParameterValues">Having条件组合参数对应值列表</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="lstParameters">选择条件组合参数列表</param>
            <param name="lstParameterTypeFullNames">选择条件组合参数类型名称的全称</param>
            <param name="lstParameterValues">选择条件组合参数对应值列表</param>
            <param name="strGroupBy">分组条件字段</param>
            <param name="strHavingCondition">GroupBy的Having条件列表</param>
            <param name="lstHavingParameters">Having条件组合参数列表</param>
            <param name="lstHavingParameterTypeFullNames">Having条件组合参数类型名称的全称</param>
            <param name="lstHavingParameterValues">Having条件组合参数对应值列表</param>
            <param name="strColumn">默认升序的排序字段</param>
        </member>
        <member name="M:System.Database.OrderBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String[])">
            <summary>
            查询语句OrderBy排序条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="lstParameters">选择条件组合参数列表</param>
            <param name="lstParameterTypeFullNames">选择条件组合参数类型名称的全称</param>
            <param name="lstParameterValues">选择条件组合参数对应值列表</param>
            <param name="strGroupBy">分组条件字段</param>
            <param name="strHavingCondition">GroupBy的Having条件列表</param>
            <param name="lstHavingParameters">Having条件组合参数列表</param>
            <param name="lstHavingParameterTypeFullNames">Having条件组合参数类型名称的全称</param>
            <param name="lstHavingParameterValues">Having条件组合参数对应值列表</param>
            <param name="strArraryColumns">默认升序的排序字段数组</param>
        </member>
        <member name="M:System.Database.OrderBy.Asc(System.String)">
            <summary>
            升序排序
            </summary>
            <param name="strColumn">排序升序字段</param>
            <returns>返回当前排序OrderBy实例,用于多个字段的排序</returns>
        </member>
        <member name="M:System.Database.OrderBy.Asc(System.String[])">
            <summary>
            升序排序
            </summary>
            <param name="strArraryColumns">排序升序字段组</param>
            <returns>返回当前排序OrderBy实例,用于多个字段的排序</returns>
        </member>
        <member name="M:System.Database.OrderBy.AscFromEntityColumn(System.String)">
            <summary>
            从表实体字段列信息描述类EntityColumn添加升序排序字段
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前排序OrderBy实例,用于多个字段的排序</returns>
        </member>
        <member name="M:System.Database.OrderBy.Desc(System.String)">
            <summary>
            降序排序
            </summary>
            <param name="strColumn">排序降序字段</param>
            <returns>返回当前排序OrderBy实例,用于多个字段的排序</returns>
        </member>
        <member name="M:System.Database.OrderBy.Desc(System.String[])">
            <summary>
            降序排序
            </summary>
            <param name="strArraryColumns">排序降序字段组</param>
            <returns>返回当前排序OrderBy实例,用于多个字段的排序</returns>
        </member>
        <member name="M:System.Database.OrderBy.DescFromEntityColumn(System.String)">
            <summary>
            从表实体字段列信息描述类EntityColumn添加降序排序字段
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前排序OrderBy实例,用于多个字段的排序</returns>
        </member>
        <member name="M:System.Database.OrderBy.Sort(System.String)">
            <summary>
            自定义排序条件,用于自定义条件的排序
            </summary>
            <param name="strCustomSort">自定义的排序条件</param>
            <returns>返回当前排序OrderBy实例</returns>
        </member>
        <member name="M:System.Database.OrderBy.Skip(System.Int32)">
            <summary>
            跳过序列中指定数量的元素，然后返回剩余的元素
            </summary>
            <param name="count">要跳过的元素数量</param>
            <returns>Skip</returns>
        </member>
        <member name="M:System.Database.OrderBy.ExecuteDataSet">
            <summary>
            执行一个Sql查询语句，并返回一个结果集。
            </summary>
            <returns>返回一个结果记录集</returns>
        </member>
        <member name="M:System.Database.OrderBy.ExecuteReader">
            <summary>
            执行查询返回只读向前的数据结果集流，性能比较快
            </summary>
            <returns>返回只读向前的数据流</returns>
        </member>
        <member name="M:System.Database.OrderBy.ExecuteScalar">
            <summary>
            执行一个查询并返回第一行第一列的值，性能比较快
            </summary>
            <returns>返回第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.OrderBy.ToSQL">
            <summary>
            获取待执行的SQL，以供调试分析用
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Database.OrderBy.GetExecuteSQL">
            <summary>
            获取待执行的SQL语句，供ExecuteDataSet/ExecuteReader/ExecuteScalar使用
            </summary>
            <returns>待执行的SQL语句</returns>
        </member>
        <member name="M:System.Logger.Asynchronous.LogWriteThreadByFile.WriteLogContents">
            <summary>
            对同一个日志文件循环追加日志内容，当日志队列为空时线程Sleep一段时间
            </summary>
        </member>
        <member name="P:System.Logger.Asynchronous.LogWriteThreadByFile.FILENAME_FULL">
            <summary>
            日志文件全名 路径+文件名+文件扩展名
            </summary>
        </member>
        <member name="P:System.Logger.Asynchronous.LogWriteThreadByFile.QUEUE_CONTENTS">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="T:System.Database.DmDb.DmCommandWrapper">
            <summary>
            连接DM(达梦)数据库的命令封装。
            </summary>   
        </member>
        <member name="T:System.Database.DBCommandWrapper">
            <summary>
            对 <see cref="T:System.Data.IDbCommand"/> 类型的封装。此类是一个基类，不可直接(new)实例化。
            <seealso cref="T:System.Data.IDbCommand"/>
            </summary>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            <param>在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。</param>
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            <param>在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。</param>
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddOutParameter(System.String)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="objValue"></param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            在继承类中实现时，为命令增加一个输出的游标类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.DBCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.DBCommandWrapper.GetParameterValue(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.DBCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            在继承类中实现时，设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="name">参数名称。</param>
            <param name="value">参数的新值。</param>
        </member>
        <member name="M:System.Database.DBCommandWrapper.Dispose">
            <summary>
            在继承类中实现时，清除所占用的资源。
            </summary>
        </member>
        <member name="P:System.Database.DBCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.#ctor(Dm.DmConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.DmDb.DmCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">DM数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.#ctor(Dm.DmConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.DmDb.DmCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">DM数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数。(DM没有游标类型，Do Nothing !)
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddInParameter(System.String,Dm.DmDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDMType">参数DmDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddInParameter(System.String,Dm.DmDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDMType">参数DmDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddInParameter(System.String,System.Data.DbType,Dm.DmDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objDMType">参数DmDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddInParameter(System.String,System.Data.DbType,Dm.DmDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objDMType">参数DmDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddOutParameter(System.String,Dm.DmDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDMType">参数DmDbType类型</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddOutParameter(System.String,Dm.DmDbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDMType">参数DmDbType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddOutParameter(System.String,System.Data.DbType,Dm.DmDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objDMType">参数DmDbType类型</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddOutParameter(System.String,System.Data.DbType,Dm.DmDbType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objDMType">参数DmDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddOutParameter(System.String,System.Data.DbType,Dm.DmDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objDMType">参数DmDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(System.String,Dm.DmDbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="DmDbType">参数类型 <see cref="T:Dm.DmDbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(System.String,Dm.DmDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="DmDbType">参数类型(DmDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(System.String,System.Data.DbType,Dm.DmDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="DmDbType">参数类型(DmDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(Dm.DmParameter)">
            <summary>
            为命令增加一个DmParameter参数，扩展方法
            </summary>
            <param name="DmParameter">表示 System.Data.DMClient.DmCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddParameter(Dm.DmParameter[])">
            <summary>
            为命令增加一组DmParameter参数，扩展方法
            </summary>
            <param name="DMParameters">表示 System.Data.DMClient.DmCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.GetDMParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.GetDMParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddCommandParameters(Dm.DmCommand,Dm.DmParameter[])">
            <summary>
            循环添加DmCommand中命令文本参数
            </summary>
            <param name="cmd">DmCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.AddCommandParameters(Dm.DmCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加DmCommand中命令文本参数
            </summary>
            <param name="cmd">DmCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.DmDb.DmCommandWrapper.CreateCommand(Dm.DmConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个DmCommand命令
            </summary>
            <param name="connection">一个数据库连接DmConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个DmCommand命令</returns>
        </member>
        <member name="P:System.Database.DmDb.DmCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Database.Access.AccessDatabase">
            <summary>
            AccessDatabase 类
            </summary>
        </member>
        <member name="T:System.Database.Database">
            <summary>
            作为各种类型的数据库对象的基类
            </summary>
        </member>
        <member name="M:System.Database.Database.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:System.Database.Database.#ctor(System.String)">
            <summary>
            带参数的构造函数
            </summary>
            <param name="strConnectString">对应数据库类型的连接字符串</param>
        </member>
        <member name="M:System.Database.Database.GetConnection">
            <summary>
            在继承类中实现时，获得一个数据库连接。
            <seealso cref="T:System.Data.IDbConnection"/>        
            </summary>
            <returns>
            用于此数据库对象的 <see cref="T:System.Data.IDbConnection"/> 。
            </returns>
        </member>
        <member name="M:System.Database.Database.GetNewParapeter">
            <summary>
            在继承类中实现时，获得一个数据库参数
            </summary>
            <returns>对应数据库命令参数</returns>
        </member>
        <member name="M:System.Database.Database.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Database.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Database.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.Database.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.Database.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Database.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Database.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.Database.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.Database.ExecuteXmlReader(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其XmlReader对象
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行的XmlReader对象，一个 <see cref="T:System.Xml.XmlReader"/>。</returns>
        </member>
        <member name="M:System.Database.Database.ExecuteList(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回List结果集。
            </summary>
            <param name="command">待执行的命令</param>
            <returns>命令的执行List结果集</returns>
        </member>
        <member name="P:System.Database.Database.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="M:System.Database.Access.AccessDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">OleDb数据库连接字符串</param>
        </member>
        <member name="M:System.Database.Access.AccessDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:System.Data.OleDb.OleDbConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.OleDbClient.OleDbConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.Access.AccessDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.Access.AccessDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Access.AccessDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Access.AccessDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.Access.AccessDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.Access.AccessDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Access.AccessDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Access.AccessDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.Access.AccessDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:System.Database.Access.AccessDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.Sybase.SybaseDatabase">
            <summary>
            SybaseDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">Sybase数据库连接字符串</param>
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:Sybase.Data.AseClient.AseConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.SybaseClient.AseConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.Sybase.SybaseDatabase.ExecuteXmlReader(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其XmlReader对象
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行的XmlReader对象，一个 <see cref="T:System.Xml.XmlReader"/>。</returns>
        </member>
        <member name="P:System.Database.Sybase.SybaseDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.Skip">
            <summary>
            跳过序列中指定数量的元素，然后返回剩余的元素
            </summary>
        </member>
        <member name="F:System.Database.Skip.p_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.Skip.p_SelectColumns">
            <summary>
            选择字段名变量
            </summary>
        </member>
        <member name="F:System.Database.Skip.p_Tables">
            <summary>
            选择查询的表
            </summary>
        </member>
        <member name="F:System.Database.Skip.p_ldTables">
            <summary>
            选择查询的表名和对应的别名
            </summary>
        </member>
        <member name="F:System.Database.Skip.p_WhereConditions">
            <summary>
            选择条件组合
            </summary>
        </member>
        <member name="F:System.Database.Skip.p_GroupBy">
            <summary>
            分组列字段列表
            </summary>
        </member>
        <member name="F:System.Database.Skip.p_HavingCondition">
            <summary>
            GroupBy的Having条件列表
            </summary>
        </member>
        <member name="F:System.Database.Skip.p_OrderBy">
            <summary>
            OrderBy 排序字段
            </summary>
        </member>
        <member name="F:System.Database.Skip.p_listPara">
            <summary>
            待执行的SQL命令的参数集合
            </summary>
        </member>
        <member name="F:System.Database.Skip.p_CountSkip">
            <summary>
            跳过序列中元素的数量
            </summary>
        </member>
        <member name="F:System.Database.Skip.p_ParmToken">
            <summary>
            参数前导符
            </summary>
        </member>
        <member name="M:System.Database.Skip.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Data.IDataParameter},System.Int32)">
            <summary>
            从序列的开头跳过指定元素数量
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="strGroupBy">分组条件字段</param>
            <param name="strHavingCondition">GroupBy的Having条件列表</param>
            <param name="strOrderBy">OrderBy 排序字段</param>
            <param name="listPara">待执行的SQL命令的参数集合</param>
            <param name="count">要跳过的元素数量</param>
        </member>
        <member name="M:System.Database.Skip.Take(System.Int32)">
            <summary>
            从序列的开头返回指定数量的连续元素
            分页取记录,支持的DB:Oracle/SqlServer/MySql/Sqlite/PostgreSQL/DM/DB2/Informix/Firebird/Sybase
            其中：SqlServer必须要有排序字段
            </summary>
            <param name="count">指定连续元素的数量</param>
            <returns>Take</returns>
        </member>
        <member name="T:System.Database.Oracle.OracleDatabase">
            <summary>
            OracleDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.Oracle.OracleDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">Oracle数据库连接字符串</param>
        </member>
        <member name="M:System.Database.Oracle.OracleDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:System.Data.OracleClient.OracleConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.OracleClient.OracleConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.Oracle.OracleDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.Oracle.OracleDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:System.Database.Oracle.OracleDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.Odbc.OdbcDatabase">
            <summary>
            OdbcDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.Odbc.OdbcDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">Odbc数据库连接字符串</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:System.Data.Odbc.OdbcConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.OdbcClient.OdbcConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.Odbc.OdbcDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:System.Database.Odbc.OdbcDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.MaxDB.MaxDBCommandWrapper">
            <summary>
            连接MaxDB数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.#ctor(MaxDB.Data.MaxDBConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.MaxDB.MaxDBCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">MaxDB数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.#ctor(MaxDB.Data.MaxDBConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.MaxDB.MaxDBCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">MaxDB数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数 (Do Nothing ! MaxDB没有游标类型)
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="strName"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddInParameter(System.String,MaxDB.Data.MaxDBType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objMaxDBDbType">参数MaxDBType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddInParameter(System.String,MaxDB.Data.MaxDBType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objMaxDBDbType">参数MaxDBType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddInParameter(System.String,System.Data.DbType,MaxDB.Data.MaxDBType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objMaxDBDbType">参数MaxDBType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddInParameter(System.String,System.Data.DbType,MaxDB.Data.MaxDBType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objMaxDBDbType">参数MaxDBType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddOutParameter(System.String,MaxDB.Data.MaxDBType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objMaxDBDbType">参数MaxDBType类型</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddOutParameter(System.String,MaxDB.Data.MaxDBType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objMaxDBDbType">参数MaxDBType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddOutParameter(System.String,System.Data.DbType,MaxDB.Data.MaxDBType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objMaxDBDbType">参数MaxDBType类型</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddOutParameter(System.String,System.Data.DbType,MaxDB.Data.MaxDBType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objMaxDBDbType">参数MaxDBType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddOutParameter(System.String,System.Data.DbType,MaxDB.Data.MaxDBType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objMaxDBDbType">参数MaxDBType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(System.String,MaxDB.Data.MaxDBType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objMaxDBType">参数类型 <see cref="T:MaxDB.Data.MaxDBType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(System.String,MaxDB.Data.MaxDBType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objMaxDBType">参数类型(MaxDBType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(System.String,System.Data.DbType,MaxDB.Data.MaxDBType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="objMaxDBType">参数类型(MaxDBType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(MaxDB.Data.MaxDBParameter)">
            <summary>
            为命令增加一个MaxDBParameter参数，扩展方法
            </summary>
            <param name="MaxDBParameter">表示 System.Data.FirebirdClient.MaxDBCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddParameter(MaxDB.Data.MaxDBParameter[])">
            <summary>
            为命令增加一组MaxDBParameter参数，扩展方法
            </summary>
            <param name="MaxDBParameters">表示 System.Data.FirebirdClient.MaxDBCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.GetMaxDBParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.GetMaxDBParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddCommandParameters(MaxDB.Data.MaxDBCommand,MaxDB.Data.MaxDBParameter[])">
            <summary>
            循环添加MaxDBCommand中命令文本参数
            </summary>
            <param name="cmd">MaxDBCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.AddCommandParameters(MaxDB.Data.MaxDBCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加MaxDBCommand中命令文本参数
            </summary>
            <param name="cmd">MaxDBCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBCommandWrapper.CreateCommand(MaxDB.Data.MaxDBConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个MaxDBCommand命令
            </summary>
            <param name="connection">一个数据库连接MaxDBConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个MaxDBCommand命令</returns>
        </member>
        <member name="P:System.Database.MaxDB.MaxDBCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="F:System.Logger.Asynchronous.LogQueue.LOG_QUEUE">
            <summary>
            日志 队列
            </summary>
        </member>
        <member name="T:System.Database.Npgsql.NpgsqlCommandWrapper">
            <summary>
            连接PostgreSQL(Npgsql)数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.#ctor(Npgsql.NpgsqlConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Npgsql.NpgsqlCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Npgsql数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.#ctor(Npgsql.NpgsqlConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Npgsql.NpgsqlCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Npgsql数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="strName"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddInParameter(System.String,NpgsqlTypes.NpgsqlDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objNpgsqlType">参数NpgsqlDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddInParameter(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objNpgsqlType">参数NpgsqlDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,NpgsqlTypes.NpgsqlDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objNpgsqlType">参数NpgsqlDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,NpgsqlTypes.NpgsqlDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objNpgsqlType">参数NpgsqlDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddOutParameter(System.String,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objNpgsqlType">参数NpgsqlDbType类型</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddOutParameter(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objNpgsqlType">参数NpgsqlDbType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objNpgsqlType">参数NpgsqlDbType类型</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,NpgsqlTypes.NpgsqlDbType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objNpgsqlType">参数NpgsqlDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,NpgsqlTypes.NpgsqlDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objNpgsqlType">参数NpgsqlDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(System.String,NpgsqlTypes.NpgsqlDbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="oracleType">参数类型 <see cref="T:NpgsqlTypes.NpgsqlDbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(System.String,NpgsqlTypes.NpgsqlDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="oracleType">参数类型(NpgsqlDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(System.String,System.Data.DbType,NpgsqlTypes.NpgsqlDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="oracleType">参数类型(NpgsqlDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(Npgsql.NpgsqlParameter)">
            <summary>
            为命令增加一个NpgsqlParameter参数，扩展方法
            </summary>
            <param name="npgsqlParameter">表示 NpgsqlParameter 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddParameter(Npgsql.NpgsqlParameter[])">
            <summary>
            为命令增加一组NpgsqlParameter参数，扩展方法
            </summary>
            <param name="npgsqlParameters">表示 NpgsqlParameter 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.GetNpgsqlParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.GetNpgsqlParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddCommandParameters(Npgsql.NpgsqlCommand,Npgsql.NpgsqlParameter[])">
            <summary>
            循环添加NpgsqlCommand中命令文本参数
            </summary>
            <param name="cmd">NpgsqlCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.AddCommandParameters(Npgsql.NpgsqlCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加NpgsqlCommand中命令文本参数
            </summary>
            <param name="cmd">NpgsqlCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlCommandWrapper.CreateCommand(Npgsql.NpgsqlConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个NpgsqlCommand命令
            </summary>
            <param name="connection">一个数据库连接NpgsqlConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个NpgsqlCommand命令</returns>
        </member>
        <member name="P:System.Database.Npgsql.NpgsqlCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Database.Update">
            <summary>
            ORM结构化查询更新类
            </summary>
        </member>
        <member name="F:System.Database.Update.m_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.Update.m_Tables">
            <summary>
            选择要更新的表
            </summary>
        </member>
        <member name="F:System.Database.Update.m_sbUpdateSetColumns">
            <summary>
            更新指定列组合
            </summary>
        </member>
        <member name="F:System.Database.Update.m_ArrayListUpdateParameters">
            <summary>
            更新列值组合参数列表
            </summary>
        </member>
        <member name="F:System.Database.Update.m_ArrayListUpdateParameterTypeFullNames">
            <summary>
            更新列值组合参数类型名称的全称
            </summary>
        </member>
        <member name="F:System.Database.Update.m_ArrayListUpdateParameterValues">
            <summary>
            更新列值组合参数对应值列表
            </summary>
        </member>
        <member name="F:System.Database.Update.m_ParmToken">
            <summary>
            参数前导符
            </summary>
        </member>
        <member name="F:System.Database.Update.chrEntityColumnSplit">
            <summary>
            表实体原描述信息(EntityColumn)属性意义的分隔符
            </summary>
        </member>
        <member name="M:System.Database.Update.#ctor(System.Database.DbCore,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strTable">Update目标表</param>
        </member>
        <member name="M:System.Database.Update.Set(System.String,System.Object)">
            <summary>
            添加设置更新字段名和更新字段值
            </summary>
            <param name="EntityColumn">更新字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">更新字段值</param>
            <returns>返回当前Update更新类实例</returns>
        </member>
        <member name="M:System.Database.Update.ExecuteNonQuery">
            <summary>
            执行一个Sql命令Update语句，并返回受影响的行数值
            </summary>
            <returns>返回Update执行受影响的行数</returns>
        </member>
        <member name="M:System.Database.Update.Where">
            <summary>
            构建Where类实例的方法
            </summary>
            <returns>返回Where类实例</returns>
        </member>
        <member name="M:System.Database.Update.UpdateConditionAddParameter(System.String)">
            <summary>
            Update条件的添加参数,当参数列表包含有原列时,按顺序1,2...顺序添加,初始为0不添加任何后缀
            </summary>
            <param name="strColumn">要添加的参数原名称</param>
        </member>
        <member name="T:System.Database.OleDb.OleDbCommandWrapper">
            <summary>
            连接OleDb类型数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.#ctor(System.Data.OleDb.OleDbConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.OleDb.OleDbCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">OleDb数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.#ctor(System.Data.OleDb.OleDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.OleDb.OleDbCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">OleDb数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数。(OleDb没有游标类型，Do Nothing !)
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddInParameter(System.String,System.Data.OleDb.OleDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddInParameter(System.String,System.Data.OleDb.OleDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddOutParameter(System.String,System.Data.OleDb.OleDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOleDbType">参数OleDbType类型</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddOutParameter(System.String,System.Data.OleDb.OleDbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOleDbType">参数OleDbType类型</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.String,System.Data.OleDb.OleDbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="oledbType">参数类型 <see cref="T:System.Data.OleDb.OleDbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.String,System.Data.OleDb.OleDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="oledbType">参数类型(OleDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="oledbType">参数类型(OleDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.Data.OleDb.OleDbParameter)">
            <summary>
            为命令增加一个OleDbParameter参数，扩展方法
            </summary>
            <param name="oledbParameter">表示 System.Data.OleDbClient.OleDbCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddParameter(System.Data.OleDb.OleDbParameter[])">
            <summary>
            为命令增加一组OleDbParameter参数，扩展方法
            </summary>
            <param name="oledbParameters">表示 System.Data.OleDbClient.OleDbCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.GetOleDbParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.GetOleDbParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddCommandParameters(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbParameter[])">
            <summary>
            循环添加OleDbCommand中命令文本参数
            </summary>
            <param name="cmd">OleDbCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.AddCommandParameters(System.Data.OleDb.OleDbCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加OleDbCommand中命令文本参数
            </summary>
            <param name="cmd">OleDbCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbCommandWrapper.CreateCommand(System.Data.OleDb.OleDbConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个OleDbCommand命令
            </summary>
            <param name="connection">一个数据库连接OleDbConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个OleDbCommand命令</returns>
        </member>
        <member name="P:System.Database.OleDb.OleDbCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Database.Informix.IfxCommandWrapper">
            <summary>
            连接Informix数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.#ctor(IBM.Data.Informix.IfxConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Informix.IfxCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Informix数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.#ctor(IBM.Data.Informix.IfxConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Informix.IfxCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Informix数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="strName"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddInParameter(System.String,IBM.Data.Informix.IfxType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objIfxType">参数IfxType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddInParameter(System.String,IBM.Data.Informix.IfxType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objIfxType">参数IfxType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddInParameter(System.String,System.Data.DbType,IBM.Data.Informix.IfxType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objIfxType">参数IfxType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddInParameter(System.String,System.Data.DbType,IBM.Data.Informix.IfxType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objIfxType">参数IfxType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddOutParameter(System.String,IBM.Data.Informix.IfxType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objIfxType">参数IfxType类型</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddOutParameter(System.String,IBM.Data.Informix.IfxType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objIfxType">参数IfxType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddOutParameter(System.String,System.Data.DbType,IBM.Data.Informix.IfxType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objIfxType">参数IfxType类型</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddOutParameter(System.String,System.Data.DbType,IBM.Data.Informix.IfxType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objIfxType">参数IfxType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddOutParameter(System.String,System.Data.DbType,IBM.Data.Informix.IfxType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objIfxType">参数IfxType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(System.String,IBM.Data.Informix.IfxType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="ifxType">参数类型 <see cref="T:IBM.Data.Informix.IfxType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(System.String,IBM.Data.Informix.IfxType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="ifxType">参数类型(IfxType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(System.String,System.Data.DbType,IBM.Data.Informix.IfxType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="ifxType">参数类型(IfxType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(IBM.Data.Informix.IfxParameter)">
            <summary>
            为命令增加一个IfxParameter参数，扩展方法
            </summary>
            <param name="ifxParameter">表示 IBM.Data.Informix.IfxCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddParameter(IBM.Data.Informix.IfxParameter[])">
            <summary>
            为命令增加一组IfxParameter参数，扩展方法
            </summary>
            <param name="ifxParameters">表示 IBM.Data.Informix.IfxCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.GetifxParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.GetifxParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddCommandParameters(IBM.Data.Informix.IfxCommand,IBM.Data.Informix.IfxParameter[])">
            <summary>
            循环添加IfxCommand中命令文本参数
            </summary>
            <param name="cmd">IfxCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.AddCommandParameters(IBM.Data.Informix.IfxCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加IfxCommand中命令文本参数
            </summary>
            <param name="cmd">IfxCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.Informix.IfxCommandWrapper.CreateCommand(IBM.Data.Informix.IfxConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个IfxCommand命令
            </summary>
            <param name="connection">一个数据库连接IfxConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个IfxCommand命令</returns>
        </member>
        <member name="P:System.Database.Informix.IfxCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Database.DmDb.DmDatabase">
            <summary>
            DmDatabase 类(达梦)
            </summary>
        </member>
        <member name="M:System.Database.DmDb.DmDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">DM数据库连接字符串
            ex:"Server=localhost; User Id=SYSDBA; PWD=SYSDBA"
            "server=localhost;User ID=SYSDBA;PWD=SYSDBA;Database=SYSTEM;port=12345"
            </param>
        </member>
        <member name="M:System.Database.DmDb.DmDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:Dm.DmConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.DMClient.DmConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.DmDb.DmDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.DmDb.DmDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.DmDb.DmDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.DmDb.DmDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.DmDb.DmDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.DmDb.DmDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.DmDb.DmDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.DmDb.DmDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.DmDb.DmDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:System.Database.DmDb.DmDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.DB2.DB2CommandWrapper">
            <summary>
            连接DB2数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.#ctor(IBM.Data.DB2.DB2Connection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.DB2.DB2CommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">DB2数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.#ctor(IBM.Data.DB2.DB2Connection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.DB2.DB2CommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">DB2数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数。(IBM DB2有游标类型)
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="strName"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddInParameter(System.String,IBM.Data.DB2.DB2Type,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDB2Type">参数DB2Type类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddInParameter(System.String,IBM.Data.DB2.DB2Type,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDB2Type">参数DB2Type类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddInParameter(System.String,System.Data.DbType,IBM.Data.DB2.DB2Type,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objDB2Type">参数DB2Type类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddInParameter(System.String,System.Data.DbType,IBM.Data.DB2.DB2Type,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objDB2Type">参数DB2Type类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddOutParameter(System.String,IBM.Data.DB2.DB2Type)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDB2Type">参数DB2Type类型</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddOutParameter(System.String,IBM.Data.DB2.DB2Type,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDB2Type">参数DB2Type类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddOutParameter(System.String,System.Data.DbType,IBM.Data.DB2.DB2Type)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objDB2Type">参数DB2Type类型</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddOutParameter(System.String,System.Data.DbType,IBM.Data.DB2.DB2Type,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objDB2Type">参数DB2Type类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddOutParameter(System.String,System.Data.DbType,IBM.Data.DB2.DB2Type,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objDB2Type">参数DB2Type类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(System.String,IBM.Data.DB2.DB2Type,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="DB2Type">参数类型 <see cref="T:IBM.Data.DB2.DB2Type"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(System.String,IBM.Data.DB2.DB2Type,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="DB2Type">参数类型(DB2Type)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(System.String,System.Data.DbType,IBM.Data.DB2.DB2Type,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="DB2Type">参数类型(DB2Type)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(IBM.Data.DB2.DB2Parameter)">
            <summary>
            为命令增加一个DB2Parameter参数，扩展方法
            </summary>
            <param name="DB2Parameter">表示 System.Data.DB2Client.DB2Command 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddParameter(IBM.Data.DB2.DB2Parameter[])">
            <summary>
            为命令增加一组DB2Parameter参数，扩展方法
            </summary>
            <param name="DB2Parameters">表示 System.Data.DB2Client.DB2Command 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.GetDB2Parameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.GetDB2Parameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddCommandParameters(IBM.Data.DB2.DB2Command,IBM.Data.DB2.DB2Parameter[])">
            <summary>
            循环添加DB2Command中命令文本参数
            </summary>
            <param name="cmd">DB2Command执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.AddCommandParameters(IBM.Data.DB2.DB2Command,System.Data.IDataParameter[])">
            <summary>
            循环添加DB2Command中命令文本参数
            </summary>
            <param name="cmd">DB2Command执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.DB2.DB2CommandWrapper.CreateCommand(IBM.Data.DB2.DB2Connection,System.String,System.Data.CommandType)">
            <summary>
            创建一个DB2Command命令
            </summary>
            <param name="connection">一个数据库连接DB2Connection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个DB2Command命令</returns>
        </member>
        <member name="P:System.Database.DB2.DB2CommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Database.Having">
            <summary>
            ORM结构化查询语句GroupBy分组Having条件类
            </summary>
        </member>
        <member name="F:System.Database.Having.m_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.Having.m_SelectColumns">
            <summary>
            选择字段名变量
            </summary>
        </member>
        <member name="F:System.Database.Having.m_Tables">
            <summary>
            选择查询的表
            </summary>
        </member>
        <member name="F:System.Database.Having.m_ldTables">
            <summary>
            选择查询的表名和对应的别名
            </summary>
        </member>
        <member name="F:System.Database.Having.m_WhereConditions">
            <summary>
            选择条件组合
            </summary>
        </member>
        <member name="F:System.Database.Having.m_ArrayListParameters">
            <summary>
            Where条件组合参数列表
            </summary>
        </member>
        <member name="F:System.Database.Having.m_ArrayListParameterTypeFullNames">
            <summary>
            Where条件组合参数类型名称的全称
            </summary>
        </member>
        <member name="F:System.Database.Having.m_ArrayListParameterValues">
            <summary>
            Where条件组合参数对应值列表
            </summary>
        </member>
        <member name="F:System.Database.Having.m_GroupBy">
            <summary>
            分组列字段列表
            </summary>
        </member>
        <member name="F:System.Database.Having.m_sbHavingCondition">
            <summary>
            GroupBy的Having条件列表
            </summary>
        </member>
        <member name="F:System.Database.Having.m_ArrayListHavingParameters">
            <summary>
            Having条件组合参数列表
            </summary>
        </member>
        <member name="F:System.Database.Having.m_ArrayListHavingParameterTypeFullNames">
            <summary>
            Having条件组合参数类型名称的全称
            </summary>
        </member>
        <member name="F:System.Database.Having.m_ArrayListHavingParameterValues">
            <summary>
            Having条件组合参数对应值列表
            </summary>
        </member>
        <member name="F:System.Database.Having.m_ParmToken">
            <summary>
            参数前导符
            </summary>
        </member>
        <member name="F:System.Database.Having.chrEntityColumnSplit">
            <summary>
            表实体原描述信息(EntityColumn)属性意义的分隔符
            </summary>
        </member>
        <member name="M:System.Database.Having.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            Having条件类构造函数
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="lstParameters">选择条件组合参数列表</param>
            <param name="lstParameterTypeFullNames">选择条件组合参数类型名称的全称</param>
            <param name="lstParameterValues">选择条件组合参数对应值列表</param>
            <param name="strGroupBy">分组字段列表</param>
        </member>
        <member name="M:System.Database.Having.ConditionCustom(System.String)">
            <summary>
            添加自定义不带参数的Having条件
            </summary>
            <param name="strSqlHavingCondition">自定义不带参数的Having条件</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustom(System.String)">
            <summary>
            添加And关系的自定义不带参数的Having条件
            </summary>
            <param name="strSqlAndCondition">自定义不带参数的Having关系And条件</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustom(System.String)">
            <summary>
            添加Or关系的自定义不带参数的Having条件
            </summary>
            <param name="strSqlOrCondition">自定义不带参数的Having关系Or条件</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.BracketAndStart">
            <summary>
            添加关系AND括弧标记开始(左括弧)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Database.Having.BracketOrStart">
            <summary>
            添加关系OR括弧标记开始(左括弧)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Database.Having.BracketEnd">
            <summary>
            添加括弧标记结束(右括弧)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的相等连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的相等连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndEqual(System.String,System.String)">
            <summary>
            添加表字段的关系And的相等连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndNotEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的不等连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndNotEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的不等连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndNotEqual(System.String,System.String)">
            <summary>
            添加表字段的关系And的不等连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndGreat(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的大于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndGreat(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的大于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndGreat(System.String,System.String)">
            <summary>
            添加表字段的关系And的大于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndLess(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的小于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndLess(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的小于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndLess(System.String,System.String)">
            <summary>
            添加表字段的关系And的小于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndGreatEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的大于等于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndGreatEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的大于等于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndGreatEqual(System.String,System.String)">
            <summary>
            添加表字段的关系And的大于等于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndLessEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndLessEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnAndLessEqual(System.String,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系Or的相等连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系Or的相等连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrEqual(System.String,System.String)">
            <summary>
            添加表字段的关系Or的相等连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrNotEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系Or的不等连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrNotEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系Or的不等连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrNotEqual(System.String,System.String)">
            <summary>
            添加表字段的关系Or的不等连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrGreat(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系Or的大于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrGreat(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的大于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrGreat(System.String,System.String)">
            <summary>
            添加表字段的关系Or的大于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrLess(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系Or的小于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrLess(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的小于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrLess(System.String,System.String)">
            <summary>
            添加表字段的关系Or的小于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrGreatEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系Or的大于等于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrGreatEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的大于等于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrGreatEqual(System.String,System.String)">
            <summary>
            添加表字段的关系Or的大于等于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrLessEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrLessEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionColumnOrLessEqual(System.String,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustom(System.String,System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Having运算操作符条件
            </summary>
            <param name="strParameter">自定义带参数的Having关系And条件</param>
            <param name="strOperate">运算操作符</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Having相等条件
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomNotEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Having不相等条件
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomGreat(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Having大于条件
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomLess(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Having小于条件
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomGreatEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Having大于等于条件
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomLessEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Having小于等于条件
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomBetweenAnd(System.String,System.Object,System.Object)">
            <summary>
            添加And关系的自定义带参数的Between objValue1 And objValue2条件
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomLike(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomNotLike(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomIsNull(System.String)">
            <summary>
            添加And关系的自定义带参数的 IS NULL 匹配条件
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomIsNotNull(System.String)">
            <summary>
            添加And关系的自定义带参数的 IS NOT NULL 匹配条件
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomIn(System.String,System.Object[])">
            <summary>
            添加And关系的自定义带参数的 IN 匹配条件
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndCustomNotIn(System.String,System.Object[])">
            <summary>
            添加And关系的自定义带参数的 NOT IN 匹配条件
            </summary>
            <param name="strParameter">自定义的Having关系And条件参数</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustom(System.String,System.String,System.Object)">
            <summary>
            添加 OR 关系的自定义带参数的Having运算操作符条件
            </summary>
            <param name="strParameter">自定义带参数的Having关系And条件</param>
            <param name="strOperate">运算操作符</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomEqual(System.String,System.Object)">
            <summary>
            添加Or关系的自定义不带参数的Having相等条件
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomNotEqual(System.String,System.Object)">
            <summary>
            添加Or关系的自定义带参数的Having不相等条件
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomGreat(System.String,System.Object)">
            <summary>
            添加Or关系的自定义带参数的Having大于条件
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomLess(System.String,System.Object)">
            <summary>
            添加Or关系的自定义带参数的Having小于条件
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomGreatEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Having大于等于条件
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomLessEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Having小于等于条件
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomBetweenAnd(System.String,System.Object,System.Object)">
            <summary>
            添加Or关系的自定义带参数的Between objValue1 And objValue2条件
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomLike(System.String,System.Object)">
            <summary>
            添加Or关系的自定义带参数的like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomNotLike(System.String,System.Object)">
            <summary>
            添加Or关系的自定义带参数的like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomIsNull(System.String)">
            <summary>
            添加Or关系的自定义带参数的 IS NULL 匹配条件
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomIsNotNull(System.String)">
            <summary>
            添加Or关系的自定义带参数的 IS NOT NULL 匹配条件
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomIn(System.String,System.Object[])">
            <summary>
            添加Or关系的自定义带参数的 IN 匹配条件
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrCustomNotIn(System.String,System.Object[])">
            <summary>
            添加Or关系的自定义带参数的 NOT IN 匹配条件
            </summary>
            <param name="strParameter">自定义的Having关系Or条件参数</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndEqual(System.String,System.String,System.Object)">
            <summary>
            添加And关系相等条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndEqual(System.Object,System.String,System.Object)">
            <summary>
            添加And关系相等条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndEqual(System.String,System.Object)">
            <summary>
            添加And关系相等条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotEqual(System.String,System.String,System.Object)">
            <summary>
            添加And关系不相等条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotEqual(System.Object,System.String,System.Object)">
            <summary>
            添加And关系不相等条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotEqual(System.String,System.Object)">
            <summary>
            添加And关系不相等条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndGreat(System.String,System.String,System.Object)">
            <summary>
            添加And关系大于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndGreat(System.Object,System.String,System.Object)">
            <summary>
            添加And关系大于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndGreat(System.String,System.Object)">
            <summary>
            添加And关系大于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndLess(System.String,System.String,System.Object)">
            <summary>
            添加And关系小于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndLess(System.Object,System.String,System.Object)">
            <summary>
            添加And关系小于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndLess(System.String,System.Object)">
            <summary>
            添加And关系小于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndGreatEqual(System.String,System.String,System.Object)">
            <summary>
            添加And大于等于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndGreatEqual(System.Object,System.String,System.Object)">
            <summary>
            添加And大于等于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndGreatEqual(System.String,System.Object)">
            <summary>
            添加And大于等于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndLessEqual(System.String,System.String,System.Object)">
            <summary>
            添加And关系小于等于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndLessEqual(System.Object,System.String,System.Object)">
            <summary>
            添加And关系小于等于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndLessEqual(System.String,System.Object)">
            <summary>
            添加And关系小于等于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndBetweenAnd(System.String,System.String,System.Object,System.Object)">
            <summary>
            添加And关系Between objValue1 And objValue2条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndBetweenAnd(System.Object,System.String,System.Object,System.Object)">
            <summary>
            添加And关系Between objValue1 And objValue2条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndBetweenAnd(System.String,System.Object,System.Object)">
            <summary>
            添加And关系Between objValue1 And objValue2条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndLike(System.String,System.String,System.Object)">
            <summary>
            添加And关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndLike(System.Object,System.String,System.Object)">
            <summary>
            添加And关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndLike(System.String,System.Object)">
            <summary>
            添加And关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotLike(System.String,System.String,System.Object)">
            <summary>
            添加And关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotLike(System.Object,System.String,System.Object)">
            <summary>
            添加And关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotLike(System.String,System.Object)">
            <summary>
            添加And关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIsNull(System.String,System.String)">
            <summary>
            添加And关系 IS NULL 匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIsNull(System.Object,System.String)">
            <summary>
            添加And关系 IS NULL 匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIsNull(System.String)">
            <summary>
            添加And关系 IS NULL 匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIsNotNull(System.String,System.String)">
            <summary>
            添加And关系 IS NOT NULL 匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIsNotNull(System.Object,System.String)">
            <summary>
            添加And关系 IS NOT NULL 匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIsNotNull(System.String)">
            <summary>
            添加And关系 IS NOT NULL 匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIn(System.String,System.String,System.Object[])">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIn(System.String,System.String,System.String)">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIn(System.Object,System.String,System.Object[])">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIn(System.Object,System.String,System.String)">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIn(System.String,System.Object[])">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndIn(System.String,System.String)">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotIn(System.String,System.String,System.Object[])">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotIn(System.String,System.String,System.String)">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotIn(System.Object,System.String,System.Object[])">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotIn(System.Object,System.String,System.String)">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotIn(System.String,System.Object[])">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionAndNotIn(System.String,System.String)">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrEqual(System.String,System.String,System.Object)">
            <summary>
            添加OR关系相等条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrEqual(System.Object,System.String,System.Object)">
            <summary>
            添加OR关系相等条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrEqual(System.String,System.Object)">
            <summary>
            添加OR关系相等条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotEqual(System.String,System.String,System.Object)">
            <summary>
            添加OR关系不相等条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotEqual(System.Object,System.String,System.Object)">
            <summary>
            添加OR关系不相等条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotEqual(System.String,System.Object)">
            <summary>
            添加OR关系不相等条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrGreat(System.String,System.String,System.Object)">
            <summary>
            添加OR关系大于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrGreat(System.Object,System.String,System.Object)">
            <summary>
            添加OR关系大于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrGreat(System.String,System.Object)">
            <summary>
            添加OR关系大于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrLess(System.String,System.String,System.Object)">
            <summary>
            添加OR关系小于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrLess(System.Object,System.String,System.Object)">
            <summary>
            添加OR关系小于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrLess(System.String,System.Object)">
            <summary>
            添加OR关系小于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrGreatEqual(System.String,System.String,System.Object)">
            <summary>
            添加OR大于等于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrGreatEqual(System.Object,System.String,System.Object)">
            <summary>
            添加OR大于等于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrGreatEqual(System.String,System.Object)">
            <summary>
            添加OR大于等于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrLessEqual(System.String,System.String,System.Object)">
            <summary>
            添加OR关系小于等于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrLessEqual(System.Object,System.String,System.Object)">
            <summary>
            添加OR关系小于等于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrLessEqual(System.String,System.Object)">
            <summary>
            添加OR关系小于等于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrBetweenAnd(System.String,System.String,System.Object,System.Object)">
            <summary>
            添加Or关系Between objValue1 And objValue2条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrBetweenAnd(System.Object,System.String,System.Object,System.Object)">
            <summary>
            添加Or关系Between objValue1 And objValue2条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrBetweenAnd(System.String,System.Object,System.Object)">
            <summary>
            添加Or关系Between objValue1 And objValue2条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrLike(System.String,System.String,System.Object)">
            <summary>
            添加Or关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrLike(System.Object,System.String,System.Object)">
            <summary>
            添加Or关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrLike(System.String,System.Object)">
            <summary>
            添加Or关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotLike(System.String,System.String,System.Object)">
            <summary>
            添加Or关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotLike(System.Object,System.String,System.Object)">
            <summary>
            添加Or关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotLike(System.String,System.Object)">
            <summary>
            添加Or关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIsNull(System.String,System.String)">
            <summary>
            添加Or关系 IS NULL 匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIsNull(System.Object,System.String)">
            <summary>
            添加Or关系 IS NULL 匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIsNull(System.String)">
            <summary>
            添加Or关系 IS NULL 匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIsNotNull(System.String,System.String)">
            <summary>
            添加Or关系 IS NOT NULL 匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIsNotNull(System.Object,System.String)">
            <summary>
            添加Or关系 IS NOT NULL 匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIsNotNull(System.String)">
            <summary>
            添加Or关系 IS NOT NULL 匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIn(System.String,System.String,System.Object[])">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIn(System.String,System.String,System.String)">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIn(System.Object,System.String,System.Object[])">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIn(System.Object,System.String,System.String)">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIn(System.String,System.Object[])">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrIn(System.String,System.String)">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotIn(System.String,System.String,System.Object[])">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotIn(System.String,System.String,System.String)">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotIn(System.Object,System.String,System.Object[])">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotIn(System.Object,System.String,System.String)">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotIn(System.String,System.Object[])">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ConditionOrNotIn(System.String,System.String)">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Having类的实例</returns>
        </member>
        <member name="M:System.Database.Having.ExecuteDataSet">
            <summary>
            执行一个Sql查询语句，并返回一个结果集。
            </summary>
            <returns>返回一个结果记录集</returns>
        </member>
        <member name="M:System.Database.Having.ExecuteReader">
            <summary>
            执行查询返回只读向前的数据结果集流，性能比较快
            </summary>
            <returns>返回只读向前的数据结果集流</returns>
        </member>
        <member name="M:System.Database.Having.ExecuteScalar">
            <summary>
            执行查询并返回第一行第一列的值，性能比较快
            </summary>
            <returns>返回第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.Having.ToSQL">
            <summary>
            获取待执行的SQL，以供调试分析用
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Database.Having.OrderBy">
            <summary>
            构建OrderBy排序类实例的方法
            </summary>
            <returns>返回OrderBy排序类实例</returns>
        </member>
        <member name="M:System.Database.Having.OrderBy(System.String)">
            <summary>
            构建OrderBy排序类实例的方法
            </summary>
            <param name="strColumn">默认排序方向的排序字段</param>
            <returns>返回OrderBy排序类实例</returns>
        </member>
        <member name="M:System.Database.Having.OrderBy(System.String[])">
            <summary>
            构建OrderBy排序类实例的方法
            </summary>
            <param name="strArraryColumns">默认升序的排序字段数组</param>
            <returns>返回OrderBy排序类实例</returns>
        </member>
        <member name="M:System.Database.Having.GetTableNameByEntity(System.Object)">
            <summary>
            获取实体映射的表的名称，映射为表名
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <returns>泛型实体的名称，映射为表名</returns>
        </member>
        <member name="M:System.Database.Having.GetColumnTypeFullName(System.Object,System.String)">
            <summary>
            根据关系表所映射实体及实体所含实体字段获取实体字段类型的完全限定名
            </summary>
            <param name="objTableEntity">关系表所映射实体</param>
            <param name="strColumn">实体所含实体字段名</param>
            <returns>返回指定实体字段类型的完全限定名</returns>
        </member>
        <member name="M:System.Database.Having.HavingConditionAddParameter(System.String)">
            <summary>
            Having条件的添加参数,当参数列表包含有原列时,按顺序1,2...顺序添加,初始为0不添加任何后缀
            </summary>
            <param name="strColumn">要添加的参数原名称</param>
        </member>
        <member name="M:System.Database.Having.GetCountFromWhereConditionByColumn(System.String)">
            <summary>
            获取Where条件中指定参数列的已有个数
            </summary>
            <param name="strColumn">指定参数原名称</param>
            <returns>返回Where条件中指定参数列的已有个数</returns>
        </member>
        <member name="M:System.Database.Having.GetExecuteSQL">
            <summary>
            获取待执行的SQL语句，供ExecuteDataSet/ExecuteReader/ExecuteScalar使用
            </summary>
            <returns>待执行的SQL语句</returns>
        </member>
        <member name="F:System.Database.Having.conststr">
            <summary>
            DbCore使用的字符串
            </summary>
        </member>
        <member name="T:System.Database.Extend.TableHelp">
            <summary>
            DataTable辅助扩展类
            </summary>
        </member>
        <member name="M:System.Database.Extend.TableHelp.MergeTable(System.Data.DataTable,System.Data.DataTable,System.String)">
            <summary>
            合并数据表:把dtblAppend按strColumn列名将dtblAppend存在的列数据与dtblMain合并，返回合并后的数据信息表
            </summary>
            <param name="dtblMain">主数据表</param>
            <param name="dtblAppend">需要合并的表</param>
            <param name="strColumn">按某列合并的列名,该列必须在dtblMain，dtblAppend两表中存在，字符型</param>
            <returns>返回合并后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.MergeTable(System.Data.DataTable,System.Data.DataTable,System.String,System.String)">
            <summary>
            合并数据表:把dtblAppend按strColumn列名将dtblAppend存在的列数据与dtblMain合并，返回合并后的数据信息表
            </summary>
            <param name="dtblMain">主数据表</param>
            <param name="dtblAppend">需要合并的表</param>
            <param name="strColumn1">按列1合并的列名,该列必须在dtblMain，dtblAppend两表中存在，字符型</param>
            <param name="strColumn2">按列2合并的列名,该列必须在dtblMain，dtblAppend两表中存在，字符型</param>
            <returns>返回合并后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.MergeTable(System.Data.DataTable,System.Data.DataTable,System.String,System.String[])">
            <summary>
            合并数据表:把dtblAppend按strColumn列名将dtblAppend存在的列arrDataColumnNames数据与dtblMain合并，返回合并后的数据信息表
            </summary>
            <param name="dtblMain">主数据表</param>
            <param name="dtblAppend">需要合并的表</param>
            <param name="strColumn">按某列合并的列名,该列必须在dtblMain，dtblAppend两表中存在，字符型</param>
            <param name="arrDataColumnNames">需要合并的列名，必须是在dtblAppend存在的列</param>
            <returns>返回合并后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.MergeTable(System.Data.DataTable,System.Data.DataTable,System.String,System.String,System.String[])">
            <summary>
            合并数据表:把dtblAppend按strColumn列名将dtblAppend存在的列arrDataColumnNames数据与dtblMain合并，返回合并后的数据信息表
            </summary>
            <param name="dtblMain">主数据表</param>
            <param name="dtblAppend">需要合并的表</param>
            <param name="strColumn1">按列1合并的列名,该列必须在dtblMain，dtblAppend两表中存在，字符型</param>
            <param name="strColumn2">按列2合并的列名,该列必须在dtblMain，dtblAppend两表中存在，字符型</param>
            <param name="arrDataColumnNames">需要合并的列名，必须是在dtblAppend存在的列</param>
            <returns>返回合并后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.MergeTable(System.Data.DataTable,System.Data.DataTable,System.Data.DataColumn)">
            <summary>
            合并数据表:把dtblAppend按dataColumn列将dtblAppend存在的列arrDataColumnNames数据与dtblMain合并，返回合并后的数据信息表
            </summary>
            <param name="dtblMain">主数据表</param>
            <param name="dtblAppend">需要合并的表</param>
            <param name="dataColumn">按某列合并的列,该列必须在dtblMain，dtblAppend两表中存在</param>
            <returns>返回合并后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.MergeTable(System.Data.DataTable,System.Data.DataTable,System.Data.DataColumn,System.Data.DataColumn)">
            <summary>
            合并数据表:把dtblAppend按dataColumn列将dtblAppend存在的列arrDataColumnNames数据与dtblMain合并，返回合并后的数据信息表
            </summary>
            <param name="dtblMain">主数据表</param>
            <param name="dtblAppend">需要合并的表</param>
            <param name="dataColumn1">按列1合并的列,该列必须在dtblMain，dtblAppend两表中存在</param>
            <param name="dataColumn2">按列2合并的列,该列必须在dtblMain，dtblAppend两表中存在</param>
            <returns>返回合并后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.MergeTable(System.Data.DataTable,System.Data.DataTable,System.Data.DataColumn,System.String[])">
            <summary>
            合并数据表:把dtblAppend按dataColumn列将dtblAppend存在的列arrDataColumnNames数据与dtblMain合并，返回合并后的数据信息表
            </summary>
            <param name="dtblMain">主数据表</param>
            <param name="dtblAppend">需要合并的表</param>
            <param name="dataColumn">按某列合并的列,该列必须在dtblMain，dtblAppend两表中存在</param>
            <param name="arrDataColumnNames">需要合并的列名，必须是在dtblAppend存在的列</param>
            <returns>返回合并后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.MergeTable(System.Data.DataTable,System.Data.DataTable,System.Data.DataColumn,System.Data.DataColumn,System.String[])">
            <summary>
            合并数据表:把dtblAppend按dataColumn列将dtblAppend存在的列arrDataColumnNames数据与dtblMain合并，返回合并后的数据信息表
            </summary>
            <param name="dtblMain">主数据表</param>
            <param name="dtblAppend">需要合并的表</param>
            <param name="dataColumn1">按列1合并的列,该列必须在dtblMain，dtblAppend两表中存在</param>
            <param name="dataColumn2">按列2合并的列,该列必须在dtblMain，dtblAppend两表中存在</param>
            <param name="arrDataColumnNames">需要合并的列名，必须是在dtblAppend存在的列</param>
            <returns>返回合并后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.GetTableTopRows(System.Data.DataTable,System.Int32)">
            <summary>
            获取DataTable数据对象前intTop行的数据信息
            </summary>
            <param name="dtblSource">DataTable数据源对象</param>
            <param name="intTop">要取到的数据行,首行标识为1</param>
            <returns>DataTable对象前intTop行的数据信息</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.GetTableBottomRows(System.Data.DataTable,System.Int32)">
            <summary>
            获取DataTable数据对象后intBottom行的数据信息
            </summary>
            <param name="dtblSource">DataTable数据源对象</param>
            <param name="intBottom">要取得的数据行,首行标识为1</param>
            <returns>DataTable对象后intBottom行的数据信息</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.GetTableSubRows(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            获取DataTable数据对象指定数据行(from...to...)的数据信息
            </summary>
            <param name="dtblSource">DataTable数据源对象</param>
            <param name="intFrom">数据对象行的起始行(包括),首行标识为0</param>
            <param name="intTo">数据对象行的结束行(不包括),首行标识为0</param>
            <returns>DataTable数据对象指定数据行(from...to...)的数据信息</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.AddTableRowNumCol(System.Data.DataTable)">
            <summary>
            为DataTable添加行号列(ROW_NUM)
            </summary>
            <param name="dtblSource">要添加行号列的数据表</param>
            <returns>返回添加行号(ROW_NUM)后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.AddTableRowNumCol(System.Data.DataTable,System.String)">
            <summary>
            为DataTable添加行号列 行号列名默认：ROW_NUM
            </summary>
            <param name="dtblSource">要添加行号列的数据表</param>
            <param name="strRowNum">要添加行号列的名称，默认为"ROW_NUM"</param>
            <returns>返回添加行号后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.JoinInner(System.Data.DataTable,System.Data.DataTable,System.String)">
            把dtblLeftTable按strColumn列名与dtblRightTable存在的列数据连接,返回连接后的数据信息表
             <summary>
             连接数据表:把dtblLeftTable按strColumn列名与dtblRightTable存在的列数据内连接，返回内连接后的数据信息表
             </summary>
             <param name="dtblLeftTable">左边的数据表</param>
             <param name="dtblRightTable">右边需要连接的表</param>
             <param name="strColumn">按某列连接的列名,该列必须在dtblLeftTable，dtblRightTable两表中存在，字符型</param>
             <returns>返回连接后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.JoinLeft(System.Data.DataTable,System.Data.DataTable,System.String)">
            <summary>
            连接数据表:把dtblLeftTable按strColumn列名与dtblRightTable存在的列数据左连接，返回左连接后的数据信息表
            </summary>
            <param name="dtblLeftTable">左边的数据表</param>
            <param name="dtblRightTable">右边需要连接的表</param>
            <param name="strColumn">按某列连接的列名,该列必须在dtblLeftTable，dtblRightTable两表中存在，字符型</param>
            <returns>返回连接后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.JoinRight(System.Data.DataTable,System.Data.DataTable,System.String)">
            <summary>
            连接数据表:把dtblLeftTable按strColumn列名与dtblRightTable存在的列数据右连接，返回右连接后的数据信息表
            </summary>
            <param name="dtblLeftTable">左边的数据表</param>
            <param name="dtblRightTable">右边需要连接的表</param>
            <param name="strColumn">按某列连接的列名,该列必须在dtblLeftTable，dtblRightTable两表中存在，字符型</param>
            <returns>返回连接后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.JoinFull(System.Data.DataTable,System.Data.DataTable,System.String)">
            <summary>
            连接数据表:把dtblLeftTable按strColumn列名与dtblRightTable存在的列数据完全连接，返回完全连接后的数据信息表
            </summary>
            <param name="dtblLeftTable">左边的数据表</param>
            <param name="dtblRightTable">右边需要连接的表</param>
            <param name="strColumn">按某列连接的列名,该列必须在dtblLeftTable，dtblRightTable两表中存在，字符型</param>
            <returns>返回连接后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTable(System.Data.DataTable,System.String,System.Database.Extend.SortDirection)">
            <summary>
            对内存中的数据表dtblSource按列名strColumn进行排序,默认升序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="direction">排序的方向：升序Asc 降序Desc</param>
            <param name="strColumn">要排序的列名</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTable(System.Data.DataTable,System.String)">
            <summary>
            对内存中的数据表dtblSource按列名strColumn进行升序排序,默认升序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="strColumn">要排序的列名</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTable(System.Data.DataTable,System.Data.DataColumn)">
            <summary>
            对内存中的数据表dtblSource按列dataColumn进行升序排序,默认升序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="dataColumn">要排序的列</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTableAsc(System.Data.DataTable,System.String)">
            <summary>
            对内存中的数据表dtblSource按列名strColumn进行升序排序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="strColumn">要排序的列名</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTableAsc(System.Data.DataTable,System.Data.DataColumn)">
            <summary>
            对内存中的数据表dtblSource按列dataColumn进行升序排序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="dataColumn">要排序的列</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTableDesc(System.Data.DataTable,System.String)">
            <summary>
            对内存中的数据表dtblSource按列名strColumn进行降序排序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="strColumn">要排序的列名</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTableDesc(System.Data.DataTable,System.Data.DataColumn)">
            <summary>
            对内存中的数据表dtblSource按列dataColumn进行降序排序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="dataColumn">要排序的列</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTable(System.Data.DataTable,System.String,System.Database.Extend.SortDirection,System.String,System.Database.Extend.SortDirection)">
            <summary>
            对内存中的数据表dtblSource按列名strColumn1,strColumn2进行排序,默认升序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="strColumn1">要排序的列名1</param>
            <param name="direction1">列名1排序的方向1：升序Asc 降序Desc</param>
            <param name="strColumn2">要排序的列名2</param>
            <param name="direction2">列名2排序的方向2：升序Asc 降序Desc</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTable(System.Data.DataTable,System.String,System.String)">
            <summary>
            对内存中的数据表dtblSource按列名strColumn1,strColumn2进行升序排序,默认升序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="strColumn1">要排序的列名1</param>
            <param name="strColumn2">要排序的列名2</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTable(System.Data.DataTable,System.Data.DataColumn,System.Data.DataColumn)">
            <summary>
            对内存中的数据表dtblSource按列dataColumn1,dataColumn2进行升序排序,默认升序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="dataColumn1">要排序的列1</param>
            <param name="dataColumn2">要排序的列2</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTableAsc(System.Data.DataTable,System.String,System.String)">
            <summary>
            对内存中的数据表dtblSource按列名strColumn1,strColumn2进行升序排序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="strColumn1">要排序的列名1</param>
            <param name="strColumn2">要排序的列名2</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTableAsc(System.Data.DataTable,System.Data.DataColumn,System.Data.DataColumn)">
            <summary>
            对内存中的数据表dtblSource按列dataColumn1,dataColumn2进行升序排序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="dataColumn1">要排序的列1</param>
            <param name="dataColumn2">要排序的列2</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTableDesc(System.Data.DataTable,System.String,System.String)">
            <summary>
            对内存中的数据表dtblSource按列名strColumn1,strColumn2进行降序排序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="strColumn1">要排序的列名1</param>
            <param name="strColumn2">要排序的列名2</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.SortTableDesc(System.Data.DataTable,System.Data.DataColumn,System.Data.DataColumn)">
            <summary>
            对内存中的数据表dtblSource按列dataColumn1,dataColumn2进行降序排序
            </summary>
            <param name="dtblSource">要排序的DataTable</param>
            <param name="dataColumn1">要排序的列1</param>
            <param name="dataColumn2">要排序的列2</param>
            <returns>返回排序后的DataTable</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.GetTableSelect(System.Data.DataTable,System.String,System.String)">
            <summary>
            选择符合条件的数据表记录信息
            </summary>
            <param name="dtblSource">源数据表</param>
            <param name="strSelect">选择条件如:dtblSource包含列名deptname，可写作" deptname='部门1' "</param>
            <param name="strSort">一个字符串，它包含列名，后跟“ASC”（升序）或“DESC”（降序）。在默认情况下列按升序排序。多个列可用逗号隔开。</param>
            <returns>返回选择后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.GetTableSelect(System.Data.DataTable,System.String)">
            <summary>
            选择符合条件的数据表记录信息
            </summary>
            <param name="dtblSource">源数据表</param>
            <param name="strSelect">选择条件如:dtblSource包含列名deptname，可写作" deptname='部门1' "</param>
            <returns>返回选择后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.ReplacleTableColValue(System.Data.DataTable,System.String,System.Object[0:,0:])">
            <summary>
            替换数据表指定列的数据
            </summary>
            <param name="dtblSource">数据表</param>
            <param name="strColumnName">数据表中指定的列名</param>
            <param name="objValues">指定列所要替换的原始数据和要替换数据对数组</param>
            <returns>返回替换数据表指定列数据后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.ReplacleTableColValue(System.Data.DataTable,System.Data.DataColumn,System.Object[0:,0:])">
            <summary>
            替换数据表指定列的数据
            </summary>
            <param name="dtblSource">数据表</param>
            <param name="dataColumn">数据表中指定的列</param>
            <param name="objValues">指定列所要替换的原始数据和要替换数据对数组</param>
            <returns>返回替换数据表指定列数据后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.ReplacleTableColValue(System.Data.DataTable,System.String,System.Collections.Specialized.ListDictionary)">
            <summary>
            替换数据表指定列的数据
            </summary>
            <param name="dtblSource">数据表</param>
            <param name="strColumnName">数据表中指定的列名</param>
            <param name="listValues">指定列所要替换的原始数据和要替换数据对</param>
            <returns>返回替换数据表指定列数据后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.ReplacleTableColValue(System.Data.DataTable,System.String,System.Collections.Hashtable)">
            <summary>
            替换数据表指定列的数据
            </summary>
            <param name="dtblSource">数据表</param>
            <param name="strColumnName">数据表中指定的列名</param>
            <param name="hashValues">指定列所要替换的原始数据和要替换数据对</param>
            <returns>返回替换数据表指定列数据后的数据表</returns>
        </member>
        <member name="M:System.Database.Extend.TableHelp.TableAppend(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            将一数据表(dtblAppend)中的所有数据追加到另一数据表(dtblMain)中
            </summary>
            <param name="dtblMain">主数据表</param>
            <param name="dtblAppend">要追加的数据表</param>
            <returns>返回追加合并后的所有数据表</returns>
        </member>
        <member name="T:System.Database.Insert">
            <summary>
            ORM结构化查询插入类
            </summary>
        </member>
        <member name="F:System.Database.Insert.m_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.Insert.m_Tables">
            <summary>
            选择要插入的表
            </summary>
        </member>
        <member name="F:System.Database.Insert.m_sbInsertColumns">
            <summary>
            插入指定列组合
            </summary>
        </member>
        <member name="F:System.Database.Insert.m_sbInsertColValues">
            <summary>
            插入指定列组合 插入带占位符的参数列
            </summary>
        </member>
        <member name="F:System.Database.Insert.m_listInsertParameters">
            <summary>
            插入列值组合参数列表
            </summary>
        </member>
        <member name="F:System.Database.Insert.m_listInsertParameterTypeFullNames">
            <summary>
            插入列值组合参数类型名称的全称
            </summary>
        </member>
        <member name="F:System.Database.Insert.m_listInsertParameterValues">
            <summary>
            插入列值组合参数对应值列表
            </summary>
        </member>
        <member name="F:System.Database.Insert.m_ParmToken">
            <summary>
            参数前导符
            </summary>
        </member>
        <member name="F:System.Database.Insert.chrEntityColumnSplit">
            <summary>
            表实体原描述信息(EntityColumn)属性意义的分隔符
            </summary>
        </member>
        <member name="M:System.Database.Insert.#ctor(System.Database.DbCore,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strTable">Insert目标表</param>
        </member>
        <member name="M:System.Database.Insert.Values(System.String,System.Object)">
            <summary>
            添加设置更新字段名和更新字段值
            </summary>
            <param name="EntityColumn">更新字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">更新字段值</param>
            <returns>返回当前Insert更新类实例</returns>
        </member>
        <member name="M:System.Database.Insert.ExecuteNonQuery">
            <summary>
            执行一个Sql命令Insert语句，并返回受影响的行数值
            </summary>
            <returns>返回Insert执行受影响的行数</returns>
        </member>
        <member name="M:System.Database.Insert.AddInsertParameter(System.String)">
            <summary>
            Insert条件的添加参数,当参数列表包含有原列时,按顺序1,2...顺序添加,初始为0不添加任何后缀
            </summary>
            <param name="strColumn">要添加的参数原名称</param>
        </member>
        <member name="T:System.Logger.LogLevel">
            <summary>
            日志级别  从低到高依次顺序：DEBUG|INFO|WARN|ERROR|FATAL
            </summary>
        </member>
        <member name="F:System.Logger.LogLevel.DEBUG">
            <summary>
            DEBUG
            </summary>
        </member>
        <member name="F:System.Logger.LogLevel.INFO">
            <summary>
            INFO
            </summary>
        </member>
        <member name="F:System.Logger.LogLevel.WARN">
            <summary>
            WARN
            </summary>
        </member>
        <member name="F:System.Logger.LogLevel.ERROR">
            <summary>
            ERROR
            </summary>
        </member>
        <member name="F:System.Logger.LogLevel.FATAL">
            <summary>
            FATAL
            </summary>
        </member>
        <member name="T:System.Logger.LogLevelHelper">
            <summary>
            日志级别与字符串的相互转换
            </summary>
        </member>
        <member name="M:System.Logger.LogLevelHelper.StrToLogLevel(System.String)">
            <summary>
            日志级别字符串转换为日志级别
            </summary>
            <param name="strLogLevel">日志级别字符串</param>
            <returns>日志级别，默认为DEBUG</returns>
        </member>
        <member name="T:System.Database.Extend.CommonInternal">
            <summary>
            公共内部类常用方法
            </summary>
        </member>
        <member name="M:System.Database.Extend.CommonInternal.GetColFromEntityColumn(System.String)">
            <summary>
            获取源字段列名(全字段列名或EntityColumn或Entity.s_Column)
            </summary>
            <param name="strColumn">字段列名(可以是EntityColumn或Entity.s_Column)</param>
            <returns>源字段列名</returns>
        </member>
        <member name="T:System.Database.Sybase.AseCommandWrapper">
            <summary>
            连接Sybase数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.#ctor(Sybase.Data.AseClient.AseConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Sybase.AseCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Sybase数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.#ctor(Sybase.Data.AseClient.AseConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Sybase.AseCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Sybase数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数。(Do Nothing ! Sybase没有游标类型)
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="strName"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddInParameter(System.String,Sybase.Data.AseClient.AseDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objAseDbType">参数AseDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddInParameter(System.String,Sybase.Data.AseClient.AseDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objAseDbType">参数AseDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddInParameter(System.String,System.Data.DbType,Sybase.Data.AseClient.AseDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objAseDbType">参数AseDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddInParameter(System.String,System.Data.DbType,Sybase.Data.AseClient.AseDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objAseDbType">参数AseDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddOutParameter(System.String,Sybase.Data.AseClient.AseDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objAseDbType">参数AseDbType类型</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddOutParameter(System.String,Sybase.Data.AseClient.AseDbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objAseDbType">参数AseDbType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddOutParameter(System.String,System.Data.DbType,Sybase.Data.AseClient.AseDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objAseDbType">参数AseDbType类型</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddOutParameter(System.String,System.Data.DbType,Sybase.Data.AseClient.AseDbType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objAseDbType">参数AseDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddOutParameter(System.String,System.Data.DbType,Sybase.Data.AseClient.AseDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objAseDbType">参数AseDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(System.String,Sybase.Data.AseClient.AseDbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="AseDbType">参数类型 <see cref="T:Sybase.Data.AseClient.AseDbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(System.String,Sybase.Data.AseClient.AseDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="AseDbType">参数类型(AseDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(System.String,System.Data.DbType,Sybase.Data.AseClient.AseDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="AseDbType">参数类型(AseDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(Sybase.Data.AseClient.AseParameter)">
            <summary>
            为命令增加一个AseParameter参数，扩展方法
            </summary>
            <param name="AseParameter">表示 System.Data.SybaseClient.AseCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddParameter(Sybase.Data.AseClient.AseParameter[])">
            <summary>
            为命令增加一组AseParameter参数，扩展方法
            </summary>
            <param name="AseParameters">表示 System.Data.SybaseClient.AseCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.GetAseParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.GetAseParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddCommandParameters(Sybase.Data.AseClient.AseCommand,Sybase.Data.AseClient.AseParameter[])">
            <summary>
            循环添加AseCommand中命令文本参数
            </summary>
            <param name="cmd">AseCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.AddCommandParameters(Sybase.Data.AseClient.AseCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加AseCommand中命令文本参数
            </summary>
            <param name="cmd">AseCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.Sybase.AseCommandWrapper.CreateCommand(Sybase.Data.AseClient.AseConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个AseCommand命令
            </summary>
            <param name="connection">一个数据库连接AseConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个AseCommand命令</returns>
        </member>
        <member name="P:System.Database.Sybase.AseCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Database.ODPNet.ODPNetCommandWrapper">
            <summary>
            ODP.Net方式连接Oracle数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.#ctor(Oracle.DataAccess.Client.OracleConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.ODPNet.ODPNetCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Oracle数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.#ctor(Oracle.DataAccess.Client.OracleConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.ODPNet.ODPNetCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Oracle数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="strName"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddInParameter(System.String,Oracle.DataAccess.Client.OracleDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOracleDbType">参数OracleDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddInParameter(System.String,Oracle.DataAccess.Client.OracleDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOracleDbType">参数OracleDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddInParameter(System.String,System.Data.DbType,Oracle.DataAccess.Client.OracleDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOracleDbType">参数OracleDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddInParameter(System.String,System.Data.DbType,Oracle.DataAccess.Client.OracleDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOracleDbType">参数OracleDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddOutParameter(System.String,Oracle.DataAccess.Client.OracleDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOracleDbType">参数OracleDbType类型</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddOutParameter(System.String,Oracle.DataAccess.Client.OracleDbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOracleDbType">参数OracleDbType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddOutParameter(System.String,System.Data.DbType,Oracle.DataAccess.Client.OracleDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOracleDbType">参数OracleDbType类型</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddOutParameter(System.String,System.Data.DbType,Oracle.DataAccess.Client.OracleDbType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOracleDbType">参数OracleDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddOutParameter(System.String,System.Data.DbType,Oracle.DataAccess.Client.OracleDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOracleDbType">参数OracleDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(System.String,Oracle.DataAccess.Client.OracleDbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="OracleDbType">参数类型 <see cref="T:Oracle.DataAccess.Client.OracleDbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(System.String,Oracle.DataAccess.Client.OracleDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="OracleDbType">参数类型(OracleDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(System.String,System.Data.DbType,Oracle.DataAccess.Client.OracleDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="OracleDbType">参数类型(OracleDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(Oracle.DataAccess.Client.OracleParameter)">
            <summary>
            为命令增加一个OracleParameter参数，扩展方法
            </summary>
            <param name="oracleParameter">表示 System.Data.OracleClient.OracleCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddParameter(Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            为命令增加一组OracleParameter参数，扩展方法
            </summary>
            <param name="oracleParameters">表示 System.Data.OracleClient.OracleCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.GetOracleParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.GetOracleParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddCommandParameters(Oracle.DataAccess.Client.OracleCommand,Oracle.DataAccess.Client.OracleParameter[])">
            <summary>
            循环添加OracleCommand中命令文本参数
            </summary>
            <param name="cmd">OracleCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.AddCommandParameters(Oracle.DataAccess.Client.OracleCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加OracleCommand中命令文本参数
            </summary>
            <param name="cmd">OracleCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetCommandWrapper.CreateCommand(Oracle.DataAccess.Client.OracleConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个OracleCommand命令
            </summary>
            <param name="connection">一个数据库连接OracleConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个OracleCommand命令</returns>
        </member>
        <member name="P:System.Database.ODPNet.ODPNetCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Logger.FileOperate">
            <summary>
            日志文件操作类
            </summary>
        </member>
        <member name="F:System.Logger.FileOperate.log_extension">
            <summary>
            日志文件扩展名
            </summary>
        </member>
        <member name="F:System.Logger.FileOperate.file_dir_name">
            <summary>
            日志文件路径+文件名（不含文件扩展名）
            </summary>
        </member>
        <member name="M:System.Logger.FileOperate.#ctor(System.String)">
            <summary>
            构造函数 FileOperate
            </summary>
            <param name="strDirAndName">日志文件路径+文件名（不含文件扩展名）</param>
        </member>
        <member name="M:System.Logger.FileOperate.AppendFile(System.String,System.String,System.Boolean)">
            <summary>
            打开一个文件，向其中追加指定的字符串，然后关闭该文件。
            如果文件不存在，此方法创建一个文件，将指定的字符串写入文件，然后关闭该文件。
            如果文件大小超过一兆(可配置)，则转储备份并新建一同名文件，再追加，然后关闭该文件。
            </summary>
            <param name="logFileSuffix">日志文件后缀（用以分开记录日志之用，若不分开记录日志可为空）</param>
            <param name="contents">要追加到文件中的字符串</param>
            <param name="isAsyn">isAsyn TRUE异步记入日志，FALSE</param>
        </member>
        <member name="T:System.Database.GroupBy">
            <summary>
            ORM结构化查询语句GroupBy分组类
            </summary>
        </member>
        <member name="F:System.Database.GroupBy.m_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.GroupBy.m_SelectColumns">
            <summary>
            选择字段名变量
            </summary>
        </member>
        <member name="F:System.Database.GroupBy.m_Tables">
            <summary>
            选择查询的表
            </summary>
        </member>
        <member name="F:System.Database.GroupBy.m_ldTables">
            <summary>
            选择查询的表名和对应的别名
            </summary>
        </member>
        <member name="F:System.Database.GroupBy.m_WhereConditions">
            <summary>
            选择条件组合
            </summary>
        </member>
        <member name="F:System.Database.GroupBy.m_ArrayListParameters">
            <summary>
            选择条件组合参数列表
            </summary>
        </member>
        <member name="F:System.Database.GroupBy.m_ArrayListParameterTypeFullNames">
            <summary>
            选择条件组合参数类型名称的全称
            </summary>
        </member>
        <member name="F:System.Database.GroupBy.m_ArrayListParameterValues">
            <summary>
            选择条件组合参数对应值列表
            </summary>
        </member>
        <member name="F:System.Database.GroupBy.m_sbGroupBy">
            <summary>
            分组字段列表
            </summary>
        </member>
        <member name="F:System.Database.GroupBy.m_ParmToken">
            <summary>
            参数前导符
            </summary>
        </member>
        <member name="F:System.Database.GroupBy.chrEntityColumnSplit">
            <summary>
            表实体原描述信息(EntityColumn)属性意义的分隔符
            </summary>
        </member>
        <member name="M:System.Database.GroupBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String)">
            <summary>
            查询语句GroupBy分组条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strColumn">分组列字段</param>
        </member>
        <member name="M:System.Database.GroupBy.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            查询语句GroupBy分组条件类
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="lstParameters">选择条件组合参数列表</param>
            <param name="lstParameterTypeFullNames">选择条件组合参数类型名称的全称</param>
            <param name="lstParameterValues">选择条件组合参数对应值列表</param>
            <param name="strColumn">分组列字段</param>
        </member>
        <member name="M:System.Database.GroupBy.Column(System.String)">
            <summary>
            添加分组列
            </summary>
            <param name="strColumn">分组列字段</param>
            <returns>返回当前分组Groupby实例,可用于多个字段的分组</returns>
        </member>
        <member name="M:System.Database.GroupBy.Column(System.String[])">
            <summary>
            添加分组列
            </summary>
            <param name="strArraryColumns">分组列字段组</param>
            <returns>返回当前分组Groupby实例,可用于多个字段的分组</returns>
        </member>
        <member name="M:System.Database.GroupBy.ColumnFromEntityColumn(System.String)">
            <summary>
            从表实体字段列信息描述类EntityColumn添加分组列
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前分组Groupby实例,可用于多个字段的分组</returns>
        </member>
        <member name="M:System.Database.GroupBy.ExecuteDataSet">
            <summary>
            执行一个Sql查询语句，并返回一个结果集。
            </summary>
            <returns>返回一个结果记录集</returns>
        </member>
        <member name="M:System.Database.GroupBy.ExecuteReader">
            <summary>
            执行一个查询返回只读向前的数据结果集流，性能比较快
            </summary>
            <returns>返回只读向前的数据结果集流</returns>
        </member>
        <member name="M:System.Database.GroupBy.ExecuteScalar">
            <summary>
            执行查询并返回第一行第一列的值，性能比较快
            </summary>
            <returns>返回第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.GroupBy.ToSQL">
            <summary>
            获取待执行的SQL，以供调试分析用
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Database.GroupBy.Having">
            <summary>
            构建Having类的方法
            </summary>
            <returns>返回Having类实例</returns>
        </member>
        <member name="M:System.Database.GroupBy.OrderBy">
            <summary>
            构建带Where条件的OrderBy排序类实例的方法
            </summary>
            <returns>返回OrderBy排序类实例</returns>
        </member>
        <member name="M:System.Database.GroupBy.OrderBy(System.String)">
            <summary>
            构建带Where条件的OrderBy排序类实例的方法
            </summary>
            <param name="strColumn">默认排序方向的排序字段</param>
            <returns>返回OrderBy排序类实例</returns>
        </member>
        <member name="M:System.Database.GroupBy.OrderBy(System.String[])">
            <summary>
            构建带Where条件的OrderBy排序类实例的方法
            </summary>
            <param name="strArraryColumns">默认升序的排序字段数组</param>
            <returns>返回OrderBy排序类实例</returns>
        </member>
        <member name="M:System.Database.GroupBy.GetExecuteSQL">
            <summary>
            获取待执行的SQL语句，供ExecuteDataSet/ExecuteReader/ExecuteScalar使用
            </summary>
            <returns>待执行的SQL语句</returns>
        </member>
        <member name="T:System.Logger.SimpleLogger">
            <summary>
            日志类
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._LOG_LEVEL_">
            <summary>
            Config日志级别配置节关键字 配置内容：DEBUG|INFO|WARN|ERROR|FATAL （默认DEBUG）
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._LOG_FILE_">
            <summary>
            Config日志文件配置节关键字 配置内容：日志文件路径+文件名（不含文件扩展名）（默认SimpleLogger）
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._LOG_FILE_MAX_SIZE_">
            <summary>
            Config日志文件配置节关键字，日志文件的最大长度（单位：字节）（不得小于1024字节，即1K）
            （默认1M = 1*1024*1024=1048576）
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._LOG_SPLIT_">
            <summary>
            Config日志文件是否按命名空间分开存储标示的配置节关键字 : TRUE|FALSE （默认FALSE）
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._LOG_NS_MAXLENGTH_">
            <summary>
            当日志文件按命名空间分开存储时（即_LOG_SPLIT_=TRUE），命名空间截取的最大长度(该值必须大于0，方有效)，默认命名空间全称
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._LOG_NS_DIV_COUNT_">
            <summary>
            当日志文件按命名空间分开存储时（即_LOG_SPLIT_=TRUE），命名空间长度最大截取到第几分段（以“.”分割）(该值必须大于0，方有效)，默认命名空间全称
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._LOG_ASYN_">
            <summary>
            日志 异步写入标示 TRUE：新启线程异步写入，FALSE：直接写入日志文件 （默认FALSE）
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._LOG_ASYN_WAIT_">
            <summary>
            日志 异步写入时，当日志队列为空的等待毫秒数（必须大于等于0，为0则没有等待时间(较耗资源)；可不配置，默认100毫秒）
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._LOG_ASYN_THREAD_BACKGROUND_">
            <summary>
            日志 异步写入线程是前台线程还是后台线程 TRUE后台线程，FALSE前台线程（默认FALSE）
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._cur_log_level">
            <summary>
            当前日志级别设置
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._cur_log_file_">
            <summary>
            日志文件路径+文件名（不含文件扩展名）
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._cur_log_split_">
            <summary>
            日志文件是否按命名空间分开标示，默认false。
            false:不分开，全部记录到一个文件；true:分开，按命名空间分开记录到各个文件。
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._log_ns_maxlength_">
            <summary>
            当日志文件按命名空间分开存储时，命名空间截取的最大长度(该值必须大于0，方有效)
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._log_ns_div_count_">
            <summary>
            当日志文件按命名空间分开存储时，命名空间长度最大截取到第几分段（以“.”分割）(值必须大于0，方有效)
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._log_asyn_">
            <summary>
            日志 异步写入标示（默认false） true使用异步方法写日志；false不使用异步方法写日志
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._log_thread_wait_">
            <summary>
            异步写入时，当日志队列为空的等待毫秒数
            （必须大于等于0，为0则没有等待时间(较耗资源)；可不配置，默认100毫秒）（_LOG_ASYN_必须配置TRUE，该项才起作用）
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._thread_is_backgroud_">
            <summary>
            异步写入线程是前台线程还是后台线程（对应Thread.IsBackground属性）
            TRUE后台线程，FALSE前台线程（默认FALSE）（_LOG_ASYN_必须配置TRUE，该项才起作用）
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger.filOperate">
            <summary>
            日志文件操作对象
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._logger">
            <summary>
            私有日志对象，首次构造时初始化
            </summary>
        </member>
        <member name="F:System.Logger.SimpleLogger._log_file_maxsize">
            <summary>
            日志文件的最大长度（单位：字节） 默认1M（不得小于1024字节，即1K）
            </summary>
        </member>
        <member name="M:System.Logger.SimpleLogger.#ctor">
            <summary>
            Logger私有构造函数，避免多实例
            </summary>
        </member>
        <member name="M:System.Logger.SimpleLogger.GetInstance">
            <summary>
            获取当前日志实例对象(单实例)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Logger.SimpleLogger.SetLogLevel(System.Logger.LogLevel)">
            <summary>
            改变当前日志级别（用于运行过程中改变，不推荐使用，仅供特殊时刻采用，该值会改变配置节的默认行为）
            </summary>
            <param name="value">日志级别（DEBUG|INFO|WARN|ERROR|FATAL）</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.GetLogLevel">
            <summary>
            获取当前日志级别
            </summary>
        </member>
        <member name="M:System.Logger.SimpleLogger.Debug(System.String)">
            <summary>
            记录Debug级别日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Debug(System.Object)">
            <summary>
            记录Debug级别日志
            </summary>
            <param name="obj">日志对象</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Debug(System.String,System.Object)">
            <summary>
            记录Debug级别日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="obj">日志对象</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Info(System.String)">
            <summary>
            记录Info级别日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Info(System.Object)">
            <summary>
            记录Info级别日志
            </summary>
            <param name="obj">日志对象</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Info(System.String,System.Object)">
            <summary>
            记录Info级别日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="obj">日志对象</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Warn(System.String)">
            <summary>
            记录Warn级别日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Warn(System.Object)">
            <summary>
            记录Warn级别日志
            </summary>
            <param name="obj">日志对象</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Warn(System.String,System.Object)">
            <summary>
            记录Warn级别日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="obj">日志对象</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Error(System.String)">
            <summary>
            记录Error级别日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Error(System.Object)">
            <summary>
            记录Error级别日志
            </summary>
            <param name="obj">日志对象</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Error(System.String,System.Object)">
            <summary>
            记录Error级别日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="obj">日志对象</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Fatal(System.String)">
            <summary>
            记录Fatal级别日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Fatal(System.Object)">
            <summary>
            记录Fatal级别日志
            </summary>
            <param name="obj">日志对象</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.Fatal(System.String,System.Object)">
            <summary>
            记录Fatal级别日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="obj">日志对象</param>
        </member>
        <member name="M:System.Logger.SimpleLogger.LogInfoPrefix(System.Logger.LogLevel)">
            <summary>
            日志前缀
            </summary>
            <param name="level">日志级别</param>
            <returns>日志前缀</returns>
        </member>
        <member name="M:System.Logger.SimpleLogger.LogFileSuffix">
            <summary>
            日志文件分开记录时的文件名后缀（非日志文件扩展名）
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Logger.SimpleLogger.Log(System.Logger.LogLevel,System.String)">
            <summary>
            记录内容到日志文件
            </summary>
            <param name="level">日志级别</param>
            <param name="contents">待记录的日志内容</param>
        </member>
        <member name="P:System.Logger.SimpleLogger.LogFileMaxSize">
            <summary>
            日志文件的最大长度（单位：字节）（不得小于1024字节，即1K）
            </summary>
        </member>
        <member name="P:System.Logger.SimpleLogger.LOG_THREAD_WAIT">
            <summary>
            异步写入时，当日志队列为空的等待毫秒数
            （必须大于等于0，为0则没有等待时间(较耗资源)；可不配置，默认100毫秒）（_LOG_ASYN_必须配置TRUE，该项才起作用）
            </summary>
        </member>
        <member name="P:System.Logger.SimpleLogger.THREAD_IS_BACKGROUD">
            <summary>
            异步写入线程是前台线程还是后台线程（对应Thread.IsBackground属性）
            TRUE后台线程，FALSE前台线程（默认FALSE）（_LOG_ASYN_必须配置TRUE，该项才起作用）
            </summary>
        </member>
        <member name="T:System.Database.Firebird.FbCommandWrapper">
            <summary>
            连接Firebird数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.#ctor(FirebirdSql.Data.FirebirdClient.FbConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Firebird.FbCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Firebird数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.#ctor(FirebirdSql.Data.FirebirdClient.FbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Firebird.FbCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Firebird数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数 (Do Nothing ! Firebird没有游标类型)
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="strName"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddInParameter(System.String,FirebirdSql.Data.FirebirdClient.FbDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objFbDbType">参数FbDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddInParameter(System.String,FirebirdSql.Data.FirebirdClient.FbDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objFbDbType">参数FbDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddInParameter(System.String,System.Data.DbType,FirebirdSql.Data.FirebirdClient.FbDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objFbDbType">参数FbDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddInParameter(System.String,System.Data.DbType,FirebirdSql.Data.FirebirdClient.FbDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objFbDbType">参数FbDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddOutParameter(System.String,FirebirdSql.Data.FirebirdClient.FbDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objFbDbType">参数FbDbType类型</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddOutParameter(System.String,FirebirdSql.Data.FirebirdClient.FbDbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objFbDbType">参数FbDbType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddOutParameter(System.String,System.Data.DbType,FirebirdSql.Data.FirebirdClient.FbDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objFbDbType">参数FbDbType类型</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddOutParameter(System.String,System.Data.DbType,FirebirdSql.Data.FirebirdClient.FbDbType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objFbDbType">参数FbDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddOutParameter(System.String,System.Data.DbType,FirebirdSql.Data.FirebirdClient.FbDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objFbDbType">参数FbDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(System.String,FirebirdSql.Data.FirebirdClient.FbDbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="FbDbType">参数类型 <see cref="T:FirebirdSql.Data.FirebirdClient.FbDbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(System.String,FirebirdSql.Data.FirebirdClient.FbDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="FbDbType">参数类型(FbDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(System.String,System.Data.DbType,FirebirdSql.Data.FirebirdClient.FbDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="FbDbType">参数类型(FbDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(FirebirdSql.Data.FirebirdClient.FbParameter)">
            <summary>
            为命令增加一个FbParameter参数，扩展方法
            </summary>
            <param name="FbParameter">表示 System.Data.FirebirdClient.FbCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddParameter(FirebirdSql.Data.FirebirdClient.FbParameter[])">
            <summary>
            为命令增加一组FbParameter参数，扩展方法
            </summary>
            <param name="FbParameters">表示 System.Data.FirebirdClient.FbCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.GetFbParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.GetFbParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddCommandParameters(FirebirdSql.Data.FirebirdClient.FbCommand,FirebirdSql.Data.FirebirdClient.FbParameter[])">
            <summary>
            循环添加FbCommand中命令文本参数
            </summary>
            <param name="cmd">FbCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.AddCommandParameters(FirebirdSql.Data.FirebirdClient.FbCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加FbCommand中命令文本参数
            </summary>
            <param name="cmd">FbCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.Firebird.FbCommandWrapper.CreateCommand(FirebirdSql.Data.FirebirdClient.FbConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个FbCommand命令
            </summary>
            <param name="connection">一个数据库连接FbConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个FbCommand命令</returns>
        </member>
        <member name="P:System.Database.Firebird.FbCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Database.Extend.OfficeHelp">
            <summary>
            OfficeHelp常用方法辅助扩展类
            </summary>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringToWord(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            将字符串文本内容写入到Word文件
            </summary>
            <param name="strText">待写入的Word文本内容</param>
            <param name="strFullPathAndWordFileName">要写入的Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <param name="encoding">字符编码格式</param>
            <param name="blnAppend">内容是追加还是覆盖：true:追加，false:覆盖</param>
            <returns>返回写入的Word全路径和文件名(.doc),如(C:\temp.doc)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringToWord(System.String,System.String)">
            <summary>
            将字符串文本内容写入到Word文件
            </summary>
            <param name="strText">待写入的Word文本内容</param>
            <param name="strFullPathAndWordFileName">要写入的Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <returns>返回写入的Word全路径和文件名(.doc),如(C:\temp.doc)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringToWord(System.String,System.String,System.Text.Encoding)">
            <summary>
            将字符串文本内容写入到Word文件
            </summary>
            <param name="strText">待写入的Word文本内容</param>
            <param name="strFullPathAndWordFileName">要写入的Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <param name="encoding">字符编码格式</param>
            <returns>返回写入的Word全路径和文件名(.doc),如(C:\temp.doc)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringToWord(System.String,System.String,System.Boolean)">
            <summary>
            将字符串文本内容写入到Word文件
            </summary>
            <param name="strText">待写入的Word文本内容</param>
            <param name="strFullPathAndWordFileName">要写入的Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <param name="blnAppend">内容是追加还是覆盖：true:追加，false:覆盖</param>
            <returns>返回写入的Word全路径和文件名(.doc),如(C:\temp.doc)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringBuilderToWord(System.Text.StringBuilder,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            将字符串文本内容写入到Word文件
            </summary>
            <param name="strText">待写入的Word文本内容</param>
            <param name="strFullPathAndWordFileName">要写入的Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <param name="encoding">字符编码格式</param>
            <param name="blnAppend">内容是追加还是覆盖：true:追加，false:覆盖</param>
            <returns>返回写入的Word全路径和文件名(.doc),如(C:\temp.doc)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringBuilderToWord(System.Text.StringBuilder,System.String)">
            <summary>
            将字符串文本内容写入到Word文件
            </summary>
            <param name="strText">待写入的Word文本内容</param>
            <param name="strFullPathAndWordFileName">要写入的Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <returns>返回写入的Word全路径和文件名(.doc),如(C:\temp.doc)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringBuilderToWord(System.Text.StringBuilder,System.String,System.Text.Encoding)">
            <summary>
            将字符串文本内容写入到Word文件
            </summary>
            <param name="strText">待写入的Word文本内容</param>
            <param name="strFullPathAndWordFileName">要写入的Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <param name="encoding">字符编码格式</param>
            <returns>返回写入的Word全路径和文件名(.doc),如(C:\temp.doc)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringBuilderToWord(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            将字符串文本内容写入到Word文件
            </summary>
            <param name="strText">待写入的Word文本内容</param>
            <param name="strFullPathAndWordFileName">要写入的Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <param name="blnAppend">内容是追加还是覆盖：true:追加，false:覆盖</param>
            <returns>返回写入的Word全路径和文件名(.doc),如(C:\temp.doc)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.ByteToWord(System.Byte[],System.String)">
            <summary>
            将二进制数据内容写入到Word文件
            </summary>
            <param name="bytWordText">二进制数据内容</param>
            <param name="strFullPathAndWordFileName">要写入的Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <returns>返回写入的Word全路径和文件名(.doc),如(C:\temp.doc)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.WordToByte(System.String)">
            <summary>
            读取Word文件的全部内容
            </summary>
            <param name="strFullPathAndWordFileName">Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <returns>Word文件的全部内容</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.WordToByteString(System.String)">
            <summary>
            读取Word文件的全部内容
            </summary>
            <param name="strFullPathAndWordFileName">Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <returns>Word文件的全部内容</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.WordToString(System.String,System.Text.Encoding)">
            <summary>
            读取Word文件的全部内容
            </summary>
            <param name="strFullPathAndWordFileName">Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <param name="encoding">字符编码格式</param>
            <returns>Word文件的全部内容</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.WordToString(System.String)">
            <summary>
            读取Word文件的全部内容
            </summary>
            <param name="strFullPathAndWordFileName">Word全路径和文件名(.doc),如(C:\temp.doc)</param>
            <returns>Word文件的全部内容</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringToFile(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            将字符串文本内容写入到文件
            </summary>
            <param name="strText">待写入的文本内容</param>
            <param name="strFullPathAndFileName">要写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <param name="encoding">字符编码格式</param>
            <param name="blnAppend">内容是追加还是覆盖：true:追加，false:覆盖</param>
            <returns>返回写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringToFile(System.String,System.String)">
            <summary>
            将字符串文本内容写入到文件
            </summary>
            <param name="strText">待写入的文本内容</param>
            <param name="strFullPathAndFileName">要写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <returns>返回写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringToFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            将字符串文本内容写入到文件
            </summary>
            <param name="strText">待写入的文本内容</param>
            <param name="strFullPathAndFileName">要写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <param name="encoding">字符编码格式</param>
            <returns>返回写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringToFile(System.String,System.String,System.Boolean)">
            <summary>
            将字符串文本内容写入到文件
            </summary>
            <param name="strText">待写入的文本内容</param>
            <param name="strFullPathAndFileName">要写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <param name="blnAppend">内容是追加还是覆盖：true:追加，false:覆盖</param>
            <returns>返回写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringBuilderToFile(System.Text.StringBuilder,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            将字符串文本内容写入到文件
            </summary>
            <param name="strText">待写入的文本内容</param>
            <param name="strFullPathAndFileName">要写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <param name="encoding">字符编码格式</param>
            <param name="blnAppend">内容是追加还是覆盖：true:追加，false:覆盖</param>
            <returns>返回写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringBuilderToFile(System.Text.StringBuilder,System.String)">
            <summary>
            将字符串文本内容写入到文件
            </summary>
            <param name="strText">待写入的文本内容</param>
            <param name="strFullPathAndFileName">要写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <returns>返回写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringBuilderToFile(System.Text.StringBuilder,System.String,System.Text.Encoding)">
            <summary>
            将字符串文本内容写入到文件
            </summary>
            <param name="strText">待写入的文本内容</param>
            <param name="strFullPathAndFileName">要写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <param name="encoding">字符编码格式</param>
            <returns>返回写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.StringBuilderToFile(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            将字符串文本内容写入到文件
            </summary>
            <param name="strText">待写入的文本内容</param>
            <param name="strFullPathAndFileName">要写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <param name="blnAppend">内容是追加还是覆盖：true:追加，false:覆盖</param>
            <returns>返回写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.ByteToFile(System.Byte[],System.String)">
            <summary>
            将二进制数据内容写入到文件
            </summary>
            <param name="bytWordText">二进制数据内容</param>
            <param name="strFullPathAndWordFileName">要写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <returns>返回写入文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.FileToByte(System.String)">
            <summary>
            读取文件的全部内容
            </summary>
            <param name="strFullPathAndWordFileName">文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <returns>文件的全部内容</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.FileToByteString(System.String)">
            <summary>
            读取文件的全部内容
            </summary>
            <param name="strFullPathAndWordFileName">文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <returns>文件的全部内容</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.FileToString(System.String,System.Text.Encoding)">
            <summary>
            读取文件的全部内容
            </summary>
            <param name="strFullPathAndFileName">文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <param name="encoding">字符编码格式</param>
            <returns>文件的全部内容</returns>
        </member>
        <member name="M:System.Database.Extend.OfficeHelp.FileToString(System.String)">
            <summary>
            读取文件的全部内容
            </summary>
            <param name="strFullPathAndFileName">文件的全路径和文件名,如(C:\temp.doc;C:\temp.txt)</param>
            <returns>文件的全部内容</returns>
        </member>
        <member name="T:System.Database.Extend.SortDirection">
            <summary>
            排序升序降序的方向:升序Asc 降序Desc
            </summary>
        </member>
        <member name="F:System.Database.Extend.SortDirection.Asc">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:System.Database.Extend.SortDirection.Desc">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:System.Database.Extend.OrderDirection">
            <summary>
            排序升序降序的方向:升序Asc 降序Desc
            </summary>
        </member>
        <member name="F:System.Database.Extend.OrderDirection.Asc">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:System.Database.Extend.OrderDirection.Desc">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:System.Database.Extend.Operation">
            <summary>
            比较操作符枚举类型
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.Great">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.GreatEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.LessEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.Like">
            <summary>
            Like
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.NotLike">
            <summary>
            Not Like
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.IsNull">
            <summary>
            Is Null
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.IsNotNull">
            <summary>
            Is Not Null
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:System.Database.Extend.Operation.NotIn">
            <summary>
            Not In
            </summary>
        </member>
        <member name="T:System.Database.Extend.EnumHelper">
            <summary>
            公共 Enum 辅助类
            </summary>
        </member>
        <member name="M:System.Database.Extend.EnumHelper.SortDirectionToOrder(System.Database.Extend.SortDirection)">
            <summary>
            SortDirection 等量转换为 OrderDirection
            </summary>
            <param name="sort">SortDirection</param>
            <returns>等量转换的 OrderDirection</returns>
        </member>
        <member name="M:System.Database.Extend.EnumHelper.OrderDirectionToSort(System.Database.Extend.OrderDirection)">
            <summary>
            OrderDirection 等量转换为 SortDirection
            </summary>
            <param name="order">OrderDirection</param>
            <returns>等量转换的 OrderDirection</returns>
        </member>
        <member name="M:System.Database.Extend.EnumHelper.SortDirectionToOrder(System.Database.Extend.SortDirection[])">
            <summary>
            OrderDirection[] 和 SortDirection[] 的相互转换
            </summary>
            <param name="sortArray">SortDirection数组</param>
            <returns>等量转换的 OrderDirection数组</returns>
        </member>
        <member name="M:System.Database.Extend.EnumHelper.OrderDirectionToSort(System.Database.Extend.OrderDirection[])">
            <summary>
            SortDirection[] 和 OrderDirection[] 的相互转换
            </summary>
            <param name="orderArray">OrderDirection数组</param>
            <returns>等量转换的 SortDirection数组</returns>
        </member>
        <member name="T:System.Database.Extend.PublicConsts">
            <summary>
            System.Database.Extend 公共常数
            </summary>
        </member>
        <member name="F:System.Database.Extend.PublicConsts.chrSplit">
            <summary>
            表实体原描述信息(EntityColumn)属性意义的分隔符
            </summary>
        </member>
        <member name="F:System.Database.Extend.PublicConsts.MyE_MailAddress">
            <summary>
            向外公开的E-Mail地址 lxchutao@163.com
            </summary>
        </member>
        <member name="F:System.Database.Extend.PublicConsts._ECG_SN_">
            <summary>
            ORM 框架机器版注册SN
            </summary>
        </member>
        <member name="F:System.Database.Extend.PublicConsts._ECG_NAME_">
            <summary>
            ORM 框架机企业版注册名
            </summary>
        </member>
        <member name="F:System.Database.Extend.PublicConsts._ECG_NAME_SN_">
            <summary>
            ORM 框架机企业版注册名对应SN
            </summary>
        </member>
        <member name="F:System.Database.Extend.PublicConsts._ECG_NAME_DATE_">
            <summary>
            ORM 框架注册命名空间及有效性 的注册名
            </summary>
        </member>
        <member name="F:System.Database.Extend.PublicConsts._ECG_NAME_DATE_SN_">
            <summary>
            ORM 框架注册命名空间及有效性 的注册名对应SN
            </summary>
        </member>
        <member name="T:System.Database.DB2.DB2Database">
            <summary>
            DB2Database 类
            </summary>
        </member>
        <member name="M:System.Database.DB2.DB2Database.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">DB2数据库连接字符串</param>
        </member>
        <member name="M:System.Database.DB2.DB2Database.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:IBM.Data.DB2.DB2Connection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.DB2Client.DB2Connection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.DB2.DB2Database.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.DB2.DB2Database.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.DB2.DB2Database.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.DB2.DB2Database.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.DB2.DB2Database.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.DB2.DB2Database.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.DB2.DB2Database.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.DB2.DB2Database.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.DB2.DB2Database.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DB2.DB2Database.ExecuteXmlReader(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其XmlReader对象
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行的XmlReader对象，一个 <see cref="T:System.Xml.XmlReader"/>。</returns>
        </member>
        <member name="P:System.Database.DB2.DB2Database.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.CreateStoredProcedure">
            <summary>
            快捷执行存储过程命令类
            </summary>
        </member>
        <member name="F:System.Database.CreateStoredProcedure.p_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.CreateStoredProcedure.p_strStoredProcedure">
            <summary>
            待执行的存储过程命令语句
            </summary>
        </member>
        <member name="F:System.Database.CreateStoredProcedure.p_listPara">
            <summary>
            待执行的存储过程命令的参数集合
            </summary>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.#ctor(System.Database.DbCore,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="storedProcedure">待执行的存储过程命令名称</param>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.AddParameter(System.Data.IDataParameter)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="para">命令参数</param>
            <returns>CreateProcedure</returns>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.AddParameter(System.Data.IDataParameter[])">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="paras">命令参数数组</param>
            <returns>CreateProcedure</returns>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="value">参数的值</param>
            <returns>CreateProcedure</returns>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="value">参数的值</param>
            <param name="size">列的长度</param>
            <returns>CreateProcedure</returns>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="name">参数名称</param>
            <returns>CreateProcedure</returns>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数类型</param>
            <returns>CreateProcedure</returns>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.AddOutParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="value">参数的值</param>
            <returns>CreateProcedure</returns>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.AddOutParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="value">参数的值</param>
            <param name="size">列的长度</param>
            <returns>CreateProcedure</returns>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.ExecuteDataSet">
            <summary>
            执行一个执行存储过程，并返回一个结果集。
            </summary>
            <returns>返回一个结果记录集</returns>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.ExecuteReader">
            <summary>
            执行查询返回只读向前的数据结果集流，性能比较快
            </summary>
            <returns>返回只读向前的数据流</returns>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.ExecuteScalar">
            <summary>
            执行一个查询并返回第一行第一列的值，性能比较快
            </summary>
            <returns>返回第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.CreateStoredProcedure.ExecuteNonQuery">
            <summary>
            执行一个执行存储过程，并返回受影响的行数值
            </summary>
            <returns>返回命令执行受影响的行数</returns>
        </member>
        <member name="T:System.Database.Npgsql.NpgsqlDatabase">
            <summary>
            NpgsqlDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">Npgsql数据库连接字符串</param>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:Npgsql.NpgsqlConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 NpgsqlConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.Npgsql.NpgsqlDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:System.Database.Npgsql.NpgsqlDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.Take">
            <summary>
            从序列的开头返回指定数量的连续元素
            </summary>
        </member>
        <member name="F:System.Database.Take.p_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.Take.p_SelectColumns">
            <summary>
            选择字段名变量
            </summary>
        </member>
        <member name="F:System.Database.Take.p_Tables">
            <summary>
            选择查询的表
            </summary>
        </member>
        <member name="F:System.Database.Take.p_ldTables">
            <summary>
            选择查询的表名和对应的别名
            </summary>
        </member>
        <member name="F:System.Database.Take.p_WhereConditions">
            <summary>
            选择条件组合
            </summary>
        </member>
        <member name="F:System.Database.Take.p_GroupBy">
            <summary>
            分组列字段列表
            </summary>
        </member>
        <member name="F:System.Database.Take.p_HavingCondition">
            <summary>
            GroupBy的Having条件列表
            </summary>
        </member>
        <member name="F:System.Database.Take.p_OrderBy">
            <summary>
            OrderBy 排序字段
            </summary>
        </member>
        <member name="F:System.Database.Take.p_listPara">
            <summary>
            待执行的SQL命令的参数集合
            </summary>
        </member>
        <member name="F:System.Database.Take.p_CountSkip">
            <summary>
            跳过序列中元素的数量
            </summary>
        </member>
        <member name="F:System.Database.Take.p_CountTake">
            <summary>
            指定连续元素的数量
            </summary>
        </member>
        <member name="F:System.Database.Take.p_ParmToken">
            <summary>
            参数前导符
            </summary>
        </member>
        <member name="M:System.Database.Take.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Data.IDataParameter},System.Int32,System.Int32)">
            <summary>
            从序列的开头返回指定数量的连续元素
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
            <param name="strWhereConditions">选择条件组合</param>
            <param name="strGroupBy">分组条件字段</param>
            <param name="strHavingCondition">GroupBy的Having条件列表</param>
            <param name="strOrderBy">OrderBy 排序字段</param>
            <param name="listPara">待执行的SQL命令的参数集合</param>
            <param name="intSkip">要跳过的元素数量</param>
            <param name="intTake">要取出的连续元素数量</param>
        </member>
        <member name="M:System.Database.Take.ExecuteDataSet">
            <summary>
            执行一个Sql查询语句，并返回一个结果集。
            </summary>
            <returns>返回一个结果记录集</returns>
        </member>
        <member name="M:System.Database.Take.ExecuteReader">
            <summary>
            执行查询返回只读向前的数据结果集流，性能比较快
            </summary>
            <returns>返回只读向前的数据流</returns>
        </member>
        <member name="M:System.Database.Take.ToSQL">
            <summary>
            获取待执行的SQL语句
            </summary>
            <returns>待执行的SQL语句</returns>
        </member>
        <member name="M:System.Database.Take.GetExecuteSQL">
            <summary>
            获取待执行的SQL语句，供ExecuteDataSet/ExecuteReader使用
            </summary>
            <returns>待执行的SQL语句</returns>
        </member>
        <member name="T:System.Database.ODPNet.ODPNetDatabase">
            <summary>
            ODPNetDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">Oracle数据库连接字符串</param>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:Oracle.DataAccess.Client.OracleConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.OracleClient.OracleConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ODPNet.ODPNetDatabase.ExecuteXmlReader(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其XmlReader对象
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行的XmlReader对象，一个 <see cref="T:System.Xml.XmlReader"/>。</returns>
        </member>
        <member name="P:System.Database.ODPNet.ODPNetDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.MySql.MySqlDatabase">
            <summary>
            MySqlDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.MySql.MySqlDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">MySql数据库连接字符串</param>
        </member>
        <member name="M:System.Database.MySql.MySqlDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:MySql.Data.MySqlClient.MySqlConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.MySqlClient.MySqlConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.MySql.MySqlDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.MySql.MySqlDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:System.Database.MySql.MySqlDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.SqlServer.SqlCommandWrapper">
            <summary>
            连接SqlServer数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.#ctor(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.SqlServer.SqlCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Sql数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.#ctor(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.SqlServer.SqlCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Sql数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数。(Do Nothing ! SqlServer没有游标类型)
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddInParameter(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objSqlDbType">参数SqlDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddInParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objSqlDbType">参数SqlDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Data.SqlDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objSqlDbType">参数SqlDbType类型</param>
            <param name="objValue">参数的值</param>
            [Description("为命令增加一个输入类型的参数"), Category("方法")]
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objSqlDbType">参数SqlDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddOutParameter(System.String,System.Data.SqlDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objSqlDbType">参数SqlDbType类型</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddOutParameter(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objSqlDbType">参数SqlDbType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.SqlDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objSqlDbType">参数SqlDbType类型</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.SqlDbType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objSqlDbType">参数SqlDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objSqlDbType">参数SqlDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.String,System.Data.SqlDbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="sqlType">参数类型 <see cref="T:System.Data.SqlDbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.String,System.Data.SqlDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="sqlType">参数类型(SqlDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.SqlDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="sqlType">参数类型(SqlDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.Data.SqlClient.SqlParameter)">
            <summary>
            为命令增加一个SqlParameter参数，扩展方法
            </summary>
            <param name="sqlParameter">表示 System.Data.SqlClient.SqlCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddParameter(System.Data.SqlClient.SqlParameter[])">
            <summary>
            为命令增加一组SqlParameter参数，扩展方法
            </summary>
            <param name="sqlParameters">表示 System.Data.SqlClient.SqlCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.GetSqlParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.GetSqlParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddCommandParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            循环添加SqlCommand中命令文本参数
            </summary>
            <param name="cmd">SqlCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.AddCommandParameters(System.Data.SqlClient.SqlCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加SqlCommand中命令文本参数
            </summary>
            <param name="cmd">SqlCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlCommandWrapper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个SqlCommand命令
            </summary>
            <param name="connection">一个数据库连接SqlConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个SqlCommand命令</returns>
        </member>
        <member name="P:System.Database.SqlServer.SqlCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Database.SQLite.SQLiteCommandWrapper">
            <summary>
            连接SQLite数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.#ctor(System.Data.SQLite.SQLiteConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.SQLite.SQLiteCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">SQLite数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.#ctor(System.Data.SQLite.SQLiteConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.SQLite.SQLiteCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">SQLite数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数。(Do Nothing ! SQLite没有游标类型)
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="strName"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddParameter(System.Data.SQLite.SQLiteParameter)">
            <summary>
            为命令增加一个SQLiteParameter参数，扩展方法
            </summary>
            <param name="SQLiteParameter">表示 System.Data.SQLiteClient.SQLiteCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddParameter(System.Data.SQLite.SQLiteParameter[])">
            <summary>
            为命令增加一组SQLiteParameter参数，扩展方法
            </summary>
            <param name="SQLiteParameters">表示 System.Data.SQLiteClient.SQLiteCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.GetSQLiteParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.GetSQLiteParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddCommandParameters(System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            循环添加SQLiteCommand中命令文本参数
            </summary>
            <param name="cmd">SQLiteCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.AddCommandParameters(System.Data.SQLite.SQLiteCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加SQLiteCommand中命令文本参数
            </summary>
            <param name="cmd">SQLiteCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteCommandWrapper.CreateCommand(System.Data.SQLite.SQLiteConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个SQLiteCommand命令
            </summary>
            <param name="connection">一个数据库连接SQLiteConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个SQLiteCommand命令</returns>
        </member>
        <member name="P:System.Database.SQLite.SQLiteCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Database.Informix.IfxDatabase">
            <summary>
            IfxDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.Informix.IfxDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">Informix数据库连接字符串</param>
        </member>
        <member name="M:System.Database.Informix.IfxDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:IBM.Data.Informix.IfxConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 IBM.Data.Informix.IfxConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.Informix.IfxDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.Informix.IfxDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Informix.IfxDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Informix.IfxDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.Informix.IfxDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.Informix.IfxDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Informix.IfxDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Informix.IfxDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.Informix.IfxDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:System.Database.Informix.IfxDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.ECGHelper">
            <summary>
            EntitysCodeGenerate 自定义数据库代码生成帮助类
            </summary>
        </member>
        <member name="M:System.Database.ECGHelper.GetAllTableAndComment">
            <summary>
            获取自定义数据库的所有表和表注释等信息(表名称，表类型，表注释，表模式名称)
            数据表格式:table_name, table_type, comments, table_schema
            </summary>
            <returns>返回自定义数据库的所有表和表注释等信息的数据集</returns>
        </member>
        <member name="M:System.Database.ECGHelper.GetAllColumnAndCommentFromTable(System.String,System.String)">
            <summary>
            获取自定义数据库用户指定表的列和列的注释、类型等信息
            (表名称，列名称，列注释，列数据类型，是否为空(Y:可空 N:非空)，数据类型的长度，数值型的刻度(即小数点前后的总位数)、精读(即小数数位)，列物理ID，列的约束类型(P:主键)
            数据表格式:table_name, column_name, comments, data_type, nullable, data_length, data_precision, data_scale, column_id, constraint_type
            </summary>
            <param name="tableSchema">表模式名称</param>
            <param name="tableName">表名称</param>
            <returns>返回自定义数据库用户指定表的列和列的注释、类型等信息的数据集</returns>
        </member>
        <member name="T:System.Database.Extend.CommonHelp">
            <summary>
            CommonHelp常用方法扩展类
            </summary>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.NumberToRMB(System.Decimal)">
            <summary> 
            将阿拉伯数字金额转换人民币大写金额字符串
            </summary> 
            <param name="decNumber">金额：最多四舍五入到小数点后两位;小数点前不超过15位的数据,否则"溢出"</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:System.Database.Extend.CommonHelp.NumberToRMB(System.String)">
            <summary> 
            将阿拉伯数字金额字符串转换人民币大写金额字符串  (重载，将字符串先转换成数字再调用)
            </summary> 
            <param name="strDecNumber">用户输入的金额，decimal数值型格式的字符串</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:System.Database.Extend.CommonHelp.IsNumber(System.String)">
            <summary>
            是否数字字符串
            </summary>
            <param name="strData">输入字符串</param>
            <returns>true是数字字符串,false不是数字字符串</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.IsNumberSign(System.String)">
            <summary>
            是否数字字符串 可带正负号
            </summary>
            <param name="strData">输入字符串</param>
            <returns>true是数字字符串,false不是数字字符串</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.IsFloat(System.String)">
            <summary>
            是否是浮点数
            </summary>
            <param name="strData">输入字符串</param>
            <returns>true是浮点数,false不是浮点数</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.IsFloatSign(System.String)">
            <summary>
            是否是浮点数 可带正负号
            </summary>
            <param name="strData">输入字符串</param>
            <returns>true是浮点数,false不是浮点数</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.IsHasChineseWord(System.String)">
            <summary>
            检测是否有中文字符
            </summary>
            <param name="strInput">检测的字符串信息</param>
            <returns>true有中文字符,false没有中文字符</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.IsEmail(System.String)">
            <summary>
            是否是邮件地址格式
            </summary>
            <param name="strEmail">邮件地址格式的字符串</param>
            <returns>true是,false不是</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.IsDateTime(System.String)">
            <summary>
            判断一个字符串是否是日期时间格式字符串
            </summary>
            <param name="strDateTime">日期时间格式字符串</param>
            <returns>true是,false不是</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.StringToHTML_Code(System.String)">
            <summary>
            将原格式的字符串文本转换成 HTML code（即显示成HTML格式的文本）
            </summary>
            <param name="strSource">原格式的字符串文本</param>
            <returns>可以显示成HTML格式的文本</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.HTML_CodeToString(System.String)">
             <summary>
            解析显示成HTML格式的文本 成 原格式的字符串普通文本
             </summary>
             <param name="strHTML_Code">可以显示成HTML格式的文本</param>
             <returns>原格式的字符串文本</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.CheckMaxString(System.String,System.Int32)">
            <summary>
            检查字符串最大长度，返回指定长度的串
            </summary>
            <param name="strInput">输入字符串</param>
            <param name="intMaxLength">最大长度</param>
            <returns>返回符合格式的字符串</returns>			
        </member>
        <member name="M:System.Database.Extend.CommonHelp.StringConvertToByteArray(System.String)">
            <summary>
            将输入字符串转换为字节数组,相对方法System.BitConverter.ToString(byte[]),char[] arrChar = strInput.ToCharArray();
            </summary>
            <param name="strInput">输入字符串</param>
            <returns>输入字符串转换后的字节数组</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.StringConvertToByteArray(System.String,System.Text.Encoding)">
            <summary>
            将输入字符串转换为字节数组,相对方法System.BitConverter.ToString(byte[]),char[] arrChar = strInput.ToCharArray();
            </summary>
            <param name="strInput">输入字符串</param>
            <param name="encoding">字符编码格式</param>
            <returns>输入字符串转换后的字节数组</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetOnlyLongId">
            <summary>
            获取一个唯一固定长度为30的数字字符串,格式为(年月日时分秒百万分之秒+9位循环顺序号)(4+2+2+2+2+2+7+9=30)
            在百万分之一秒并发一亿个以内的线程数,其值不会重复
            </summary>
            <returns>返回一个唯一固定长度为30的数字字符串</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetID30">
            <summary>
            获取一个唯一固定长度为30的数字字符串,格式为(年月日时分秒百万分之秒+9位循环顺序号)(4+2+2+2+2+2+7+9=30)
            在百万分之一秒并发一亿个以内的线程数,其值不会重复
            </summary>
            <returns>返回一个唯一固定长度为30的数字字符串</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetOnlyId">
            <summary>
            获取一个唯一固定长度为25的数字字符串,格式为(年月日时分秒毫秒+8位循环顺序号)(4+2+2+2+2+2+3+8=25)
            在千分之一秒并发一千万个以内的线程数,其值不会重复
            </summary>
            <returns>返回一个唯一固定长度为25的数字字符串</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetID25">
            <summary>
            获取一个唯一固定长度为25的数字字符串,格式为(年月日时分秒毫秒+8位循环顺序号)(4+2+2+2+2+2+3+8=25)
            在千分之一秒并发一千万个以内的线程数,其值不会重复
            </summary>
            <returns>返回一个唯一固定长度为25的数字字符串</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetOnlyID">
            <summary>
            获取一个唯一固定长度为20的数字字符串,格式为(年月日时分秒毫秒+3位循环顺序号)(4+2+2+2+2+2+3+3=20)
            在千分之一秒并发一百个以内的线程数,其值不会重复
            </summary>
            <returns>返回一个唯一固定长度为20的数字字符串</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetOnlyRandomID">
            <summary>
            获取一个唯一固定长度为20的数字字符串,格式为(年月日时分秒毫秒+3位循环顺序号)(4+2+2+2+2+2+3+3=20)
            </summary>
            <returns>返回一个唯一固定长度为20的数字字符串</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetID20">
            <summary>
            获取一个唯一固定长度为20的数字字符串,格式为(年月日时分秒毫秒+3位循环顺序号)(4+2+2+2+2+2+3+3=20)
            在千分之一秒并发一百个以内的线程数,其值不会重复
            </summary>
            <returns>返回一个唯一固定长度为20的数字字符串</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.CharArrayToString(System.Char[])">
            <summary>
            将字符char数组char[]转换为字符串
            </summary>
            <param name="chrArray">字符数组</param>
            <returns>返回字符数组char[]转换后的字符串</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.MergeByteArray(System.Byte[],System.Byte[])">
            <summary>
            合并两个字节数组到一个信息字节数组
            </summary>
            <param name="bytArray1">字节数组1</param>
            <param name="bytArray2">字节数组2</param>
            <returns>返回合并两个字节数组的新字节数组</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetSubXmlString(System.String,System.String,System.Int32,System.String@)">
            <summary>
            从指定索引位置开始读取XML内容字符串指定标记段的一内容片段(开始到结束)
            </summary>
            <param name="xmlString">XML内容字符串</param>
            <param name="name">指定标记</param>
            <param name="index">起始索引位置</param>
            <param name="subXmlString">指定标记段的一内容片段</param>
            <returns>匹配的最终结束索引,-1表示没有匹配或XML字符串格式不正确</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetHardDiskSN(System.String)">
            <summary>
            C#获取硬盘序列号 
            </summary>
            <param name="driveName">硬盘符</param>
            <returns>指定的硬盘序列号</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetCurrentHardDiskSN">
            <summary>
            获取当前工作目录所在硬盘的序列号
            </summary>
            <returns>当前工作目录所在硬盘的序列号</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetCycleNumberID">
            <summary>
            获取一个[0,1000)的3位顺序连续数
            </summary>
            <returns>[0,1000)的3位顺序连续数</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetCycleNumberId_">
            <summary>
            获取一个[0,1,0000,0000)的8位顺序连续数
            </summary>
            <returns>[0,1,0000,0000)的8位顺序连续数</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetLongCycleNumberId">
            <summary>
            获取一个[0,10,0000,0000)的9位顺序连续数
            </summary>
            <returns>[0,10,0000,0000)的9位顺序连续数</returns>
        </member>
        <member name="M:System.Database.Extend.CommonHelp.GetConfig(System.String)">
            <summary>
            获取配置信息的值
            </summary>
            <param name="key">配置关键字key</param>
            <returns>配置信息对应值</returns>
        </member>
        <member name="T:System.Database.DatabaseType">
            <summary>
            数据库连接类型0,1,2,3,4,5,6,7,8,9,10,11,12,13,14...
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.Oracle">
            <summary>
            表示连接到 Oracle 数据库的专有连接(System.Data.OracleClient)。
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.SqlServer">
            <summary>
            表示连接到 Sql Server 数据库的专有连接(System.Data.SqlClient)。
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.OleDb">
            <summary>
            表示连接到支持 OleDb 连接类型数据库的连接(System.Data.OleDb)。
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.Odbc">
            <summary>
            表示连接到支持 Odbc 连接类型数据库的连接(System.Data.Odbc)。
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.MySql">
            <summary>
            表示连接到 MySql 数据库的专有连接(MySql.Data.MySqlClient),使用时项目须添加引用MySql.Data.dll(MYSQL为ADO.NET访问MYSQL数据库设计的.NET访问组件MySQL Connector Net,可从MySql网上下载并安装MySql.Data.MySqlClient到使用机器)。
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.Sybase">
            <summary>
            表示连接到 Sybase 数据库的专有连接(Sybase.Data.AseClient),使用时项目须添加引用Sybase.Data.AseClient.dll;
            同时将Sybase.Data.AseClient.dll的依赖项sybdrvado11.dll、sybdrvssl.dll放入到对应的bin\...目录下
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.DB2">
            <summary>
            表示连接到 IBM DB2 数据库的专有连接(IBM DB2),使用时项目须添加引用IBM.Data.DB2.dll
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.SQLite">
            <summary>
            表示连接到 SQLite 数据库的专有连接(SQLite),使用时项目须添加引用System.Data.SQLite.dll
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.PostgreSQL">
            <summary>
            表示使用开源组件连接(Npgsql.dll)连接到 PostgreSQL 数据库的,使用时项目须添加引用组件Npgsql.dll
            PostgreSQL 数据库的数据表及字段名最好都采用小写形式表示,否则表或字段名在SQL语句中需加双引号才能识别
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.Informix">
            <summary>
            表示连接到 Informix 数据库的专有连接(IBM.Data.Informix),使用时项目须添加引用IBM.Data.Informix.dll
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.Firebird">
            <summary>
            表示连接到 Firebird 数据库的专有连接(FirebirdSql.Data.FirebirdClient),使用时项目须添加引用FirebirdSql.Data.FirebirdClient.dll
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.MaxDB">
            <summary>
            表示连接到 MaxDB 数据库的专有连接(MaxDB.Data),使用时项目须添加引用MaxDB.Data.dll
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.Access">
            <summary>
            表示连接到 Access 数据库的连接(System.Data.OleDb)。
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.Dm">
            <summary>
            表示连接到 达梦(Dm) 数据库的专有连接(Dm),使用时项目须添加引用DmProvider.dll
            </summary>
        </member>
        <member name="F:System.Database.DatabaseType.ODPNet">
            <summary>
            表示 ODP.NET 方式连接到 Oracle 数据库的专有连接(使用时项目须添加引用Oracle.DataAccess.dll)
            下载页http://www.oracle.com/technetwork/topics/dotnet/utilsoft-086879.html
            </summary>
        </member>
        <member name="T:System.Database.EventHandler">
            <summary>
            声明委托EventHandler(无参数)
            </summary>
        </member>
        <member name="T:System.Database.From">
            <summary>
            ORM结构化查询语句选择目标表类
            </summary>
        </member>
        <member name="F:System.Database.From.m_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.From.m_SelectColumns">
            <summary>
            选择字段名变量
            </summary>
        </member>
        <member name="F:System.Database.From.m_sbTables">
            <summary>
            选择查询的表
            </summary>
        </member>
        <member name="F:System.Database.From.m_ldTables">
            <summary>
            选择查询的表名和对应的别名
            </summary>
        </member>
        <member name="F:System.Database.From.chrEntityColumnSplit">
            <summary>
            表实体原描述信息(EntityColumn)属性意义的分隔符
            </summary>
        </member>
        <member name="M:System.Database.From.#ctor(System.Database.DbCore,System.String)">
            <summary>
            查询选择目标表的构造,只实例化类不初始化查询表
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
        </member>
        <member name="M:System.Database.From.#ctor(System.Database.DbCore,System.String,System.String)">
            <summary>
            单个表的查询选择目标表的构造
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="tableName">选择表名</param>
        </member>
        <member name="M:System.Database.From.#ctor(System.Database.DbCore,System.String,System.String[])">
            <summary>
            查询选择多个目标表的构造
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strArrayTables">选择表名数组,如：new string[]{table1,table2...}</param>
        </member>
        <member name="M:System.Database.From.FromTable(System.String)">
            <summary>
            添加查询选择表
            </summary>
            <param name="strTable">选择表名</param>
            <returns>当前From类实例</returns>
        </member>
        <member name="M:System.Database.From.FromTable(System.String,System.String)">
            <summary>
            添加查询选择表
            </summary>
            <param name="strTable">选择表名</param>
            <param name="strTableAliasName">目标表别名</param>
            <returns>当前From类实例</returns>
        </member>
        <member name="M:System.Database.From.FromTable(System.Object)">
            <summary>
            通过表所映射的实体添加查询选择实体映射的表
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <returns>当前From类实例</returns>
        </member>
        <member name="M:System.Database.From.FromCustom(System.String)">
            <summary>
            添加自定义查询From语句内容
            </summary>
            <param name="strSqlFrom">自定义查询From语句内容</param>
            <returns>当前From实例</returns>
        </member>
        <member name="M:System.Database.From.JoinInner(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的内连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前From类的实例</returns>
        </member>
        <member name="M:System.Database.From.JoinInner(System.String,System.String)">
            <summary>
            添加表字段的内连接
            </summary>
            <param name="EntityColumn1">关系连接左边表字段,表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">关系连接左边表字段,表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前From类的实例</returns>
        </member>
        <member name="M:System.Database.From.JoinLeft(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的左外连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前From类的实例</returns>
        </member>
        <member name="M:System.Database.From.JoinLeft(System.String,System.String)">
            <summary>
            添加表字段的左外连接
            </summary>
            <param name="EntityColumn1">关系连接左边表字段,表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">关系连接左边表字段,表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前From类的实例</returns>
        </member>
        <member name="M:System.Database.From.JoinRight(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的右外连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前From类的实例</returns>
        </member>
        <member name="M:System.Database.From.JoinRight(System.String,System.String)">
            <summary>
            添加表字段的右外连接
            </summary>
            <param name="EntityColumn1">关系连接左边表字段,表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">关系连接左边表字段,表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前From类的实例</returns>
        </member>
        <member name="M:System.Database.From.JoinFull(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的完全连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前From类的实例</returns>
        </member>
        <member name="M:System.Database.From.JoinFull(System.String,System.String)">
            <summary>
            添加表字段的完全连接
            </summary>
            <param name="EntityColumn1">关系连接左边表字段,表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">关系连接左边表字段,表1实体字段列信息描述,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前From类的实例</returns>
        </member>
        <member name="M:System.Database.From.ExecuteDataSet">
            <summary>
            执行一个Sql查询语句，并返回一个结果集。
            </summary>
            <returns>返回一个结果记录集</returns>
        </member>
        <member name="M:System.Database.From.ExecuteReader">
            <summary>
            执行查询返回只读向前的数据结果集流，性能比较快
            </summary>
            <returns>返回数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.From.ExecuteScalar">
            <summary>
            执行查询并返回第一行第一列的值。
            </summary>
            <returns>返回第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.From.ToSQL">
            <summary>
            获取待执行的SQL，以供调试分析用
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Database.From.Where">
            <summary>
            构建Where类实例的方法
            </summary>
            <returns>返回Where类实例</returns>
        </member>
        <member name="M:System.Database.From.GroupBy(System.String)">
            <summary>
            构建GroupBy类实例的方法
            </summary>
            <param name="strColumn">分组列字段</param>
            <returns>返回GroupBy类实例</returns>
        </member>
        <member name="M:System.Database.From.OrderBy">
            <summary>
            构建OrderBy类实例的方法
            </summary>
            <returns>返回OrderBy类实例</returns>
        </member>
        <member name="M:System.Database.From.OrderBy(System.String)">
            <summary>
            构建OrderBy类实例的方法
            </summary>
            <param name="strColumn">默认排序方向的排序字段</param>
            <returns>返回OrderBy类实例</returns>
        </member>
        <member name="M:System.Database.From.OrderBy(System.String,System.Database.Extend.SortDirection)">
            <summary>
            构建OrderBy类实例的方法
            </summary>
            <param name="strColumn">默认排序字段</param>
            <param name="sort">排序方向</param>
            <returns>返回OrderBy类实例</returns>
        </member>
        <member name="M:System.Database.From.OrderBy(System.String,System.Database.Extend.OrderDirection)">
            <summary>
            构建OrderBy类实例的方法
            </summary>
            <param name="strColumn">默认排序字段</param>
            <param name="order">排序方向</param>
            <returns>返回OrderBy类实例</returns>
        </member>
        <member name="M:System.Database.From.OrderBy(System.String[])">
            <summary>
            构建OrderBy类实例的方法
            </summary>
            <param name="strArraryColumns">默认排序方向的排序字段数组</param>
            <returns>返回OrderBy类实例</returns>
        </member>
        <member name="M:System.Database.From.OrderBy(System.String[],System.Database.Extend.SortDirection)">
            <summary>
            构建OrderBy类实例的方法
            </summary>
            <param name="strArraryColumns">排序字段数组</param>
            <param name="sort">排序方向</param>
            <returns>返回OrderBy类实例</returns>
        </member>
        <member name="M:System.Database.From.OrderBy(System.String[],System.Database.Extend.OrderDirection)">
            <summary>
            构建OrderBy类实例的方法
            </summary>
            <param name="strArraryColumns">排序字段数组</param>
            <param name="order">排序方向</param>
            <returns>返回OrderBy类实例</returns>
        </member>
        <member name="M:System.Database.From.GetTableNameByEntity(System.Object)">
            <summary>
            获取实体映射的表的名称，映射为表名
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <returns>泛型实体的名称，映射为表名</returns>
        </member>
        <member name="M:System.Database.From.GetColumnTypeFullName(System.Object,System.String)">
            <summary>
            根据关系表所映射实体及实体所含实体字段获取实体字段类型的完全限定名
            </summary>
            <param name="objTableEntity">关系表所映射实体</param>
            <param name="strColumn">实体所含实体字段名</param>
            <returns>返回指定实体字段类型的完全限定名</returns>
        </member>
        <member name="M:System.Database.From.GetTableAlias(System.String)">
            <summary>
            根据表名及模式的全名，取得可用的别名
            </summary>
            <param name="strSchemaTable">可带有表模式名的表名(如：[test].[dbo].[Table_1]、scott.dept)</param>
            <returns>内部用表别名</returns>
        </member>
        <member name="M:System.Database.From.GetExecuteSQL">
            <summary>
            获取待执行的SQL语句，供ExecuteDataSet/ExecuteReader/ExecuteScalar使用
            </summary>
            <returns>待执行的SQL语句</returns>
        </member>
        <member name="T:System.Database.Delete">
            <summary>
            ORM结构化查询删除类
            </summary>
        </member>
        <member name="F:System.Database.Delete.m_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.Delete.m_Tables">
            <summary>
            选择查询要删除的表
            </summary>
        </member>
        <member name="M:System.Database.Delete.#ctor(System.Database.DbCore,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strTable">Delete目标表</param>
        </member>
        <member name="M:System.Database.Delete.ExecuteNonQuery">
            <summary>
            执行一个Sql命令Delete语句，并返回受影响的行数值
            </summary>
            <returns>返回Delete执行受影响的行数</returns>
        </member>
        <member name="M:System.Database.Delete.Where">
            <summary>
            构建Where类实例的方法
            </summary>
            <returns>返回Where类实例</returns>
        </member>
        <member name="T:System.Database.CreateSQL">
            <summary>
            快捷执行SQL命令类
            </summary>
        </member>
        <member name="F:System.Database.CreateSQL.p_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.CreateSQL.p_strSQL">
            <summary>
            待执行的SQL命令语句
            </summary>
        </member>
        <member name="F:System.Database.CreateSQL.p_listPara">
            <summary>
            待执行的SQL命令的参数集合
            </summary>
        </member>
        <member name="M:System.Database.CreateSQL.#ctor(System.Database.DbCore,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="sql">待执行的SQL命令语句</param>
        </member>
        <member name="M:System.Database.CreateSQL.AddParameter(System.Data.IDataParameter)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="para">命令参数</param>
            <returns>CreateSQL</returns>
        </member>
        <member name="M:System.Database.CreateSQL.AddParameter(System.Data.IDataParameter[])">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="paras">命令参数数组</param>
            <returns>CreateSQL</returns>
        </member>
        <member name="M:System.Database.CreateSQL.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="value">参数的值</param>
            <returns>CreateSQL</returns>
        </member>
        <member name="M:System.Database.CreateSQL.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="value">参数的值</param>
            <param name="size">列的长度</param>
            <returns>CreateSQL</returns>
        </member>
        <member name="M:System.Database.CreateSQL.ExecuteDataSet">
            <summary>
            执行一个Sql查询语句，并返回一个结果集。
            </summary>
            <returns>返回一个结果记录集</returns>
        </member>
        <member name="M:System.Database.CreateSQL.ExecuteReader">
            <summary>
            执行查询返回只读向前的数据结果集流，性能比较快
            </summary>
            <returns>返回只读向前的数据流</returns>
        </member>
        <member name="M:System.Database.CreateSQL.ExecuteScalar">
            <summary>
            执行一个查询并返回第一行第一列的值，性能比较快
            </summary>
            <returns>返回第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.CreateSQL.ExecuteNonQuery">
            <summary>
            执行一个SQL命令语句，并返回受影响的行数值
            </summary>
            <returns>返回命令执行受影响的行数</returns>
        </member>
        <member name="T:System.Database.SQLite.SQLiteDatabase">
            <summary>
            SQLiteDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.SQLite.SQLiteDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">SQLite数据库连接字符串</param>
        </member>
        <member name="M:System.Database.SQLite.SQLiteDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:System.Data.SQLite.SQLiteConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.SQLiteClient.SQLiteConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.SQLite.SQLiteDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.SQLite.SQLiteDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:System.Database.SQLite.SQLiteDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.Oracle.OracleCommandWrapper">
            <summary>
            连接Oracle数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.#ctor(System.Data.OracleClient.OracleConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Oracle.OracleCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Oracle数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.#ctor(System.Data.OracleClient.OracleConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Oracle.OracleCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Oracle数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="strName"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Data.OracleClient.OracleType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOracleType">参数OracleType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Data.OracleClient.OracleType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOracleType">参数OracleType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Data.OracleClient.OracleType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOracleType">参数OracleType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Data.OracleClient.OracleType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOracleType">参数OracleType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddOutParameter(System.String,System.Data.OracleClient.OracleType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOracleType">参数OracleType类型</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddOutParameter(System.String,System.Data.OracleClient.OracleType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOracleType">参数OracleType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.OracleClient.OracleType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOracleType">参数OracleType类型</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.OracleClient.OracleType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOracleType">参数OracleType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.OracleClient.OracleType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOracleType">参数OracleType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.String,System.Data.OracleClient.OracleType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="oracleType">参数类型 <see cref="T:System.Data.OracleClient.OracleType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.String,System.Data.OracleClient.OracleType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="oracleType">参数类型(OracleType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.OracleClient.OracleType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="oracleType">参数类型(OracleType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.Data.OracleClient.OracleParameter)">
            <summary>
            为命令增加一个OracleParameter参数，扩展方法
            </summary>
            <param name="oracleParameter">表示 System.Data.OracleClient.OracleCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddParameter(System.Data.OracleClient.OracleParameter[])">
            <summary>
            为命令增加一组OracleParameter参数，扩展方法
            </summary>
            <param name="oracleParameters">表示 System.Data.OracleClient.OracleCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.GetOracleParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.GetOracleParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddCommandParameters(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleParameter[])">
            <summary>
            循环添加OracleCommand中命令文本参数
            </summary>
            <param name="cmd">OracleCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.AddCommandParameters(System.Data.OracleClient.OracleCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加OracleCommand中命令文本参数
            </summary>
            <param name="cmd">OracleCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.Oracle.OracleCommandWrapper.CreateCommand(System.Data.OracleClient.OracleConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个OracleCommand命令
            </summary>
            <param name="connection">一个数据库连接OracleConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个OracleCommand命令</returns>
        </member>
        <member name="P:System.Database.Oracle.OracleCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Database.OleDb.OleDbDatabase">
            <summary>
            OleDbDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.OleDb.OleDbDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">OleDb数据库连接字符串</param>
        </member>
        <member name="M:System.Database.OleDb.OleDbDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:System.Data.OleDb.OleDbConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.OleDbClient.OleDbConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.OleDb.OleDbDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.OleDb.OleDbDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:System.Database.OleDb.OleDbDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.MySql.MySqlCommandWrapper">
            <summary>
            连接MySql数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.#ctor(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.MySql.MySqlCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">MySql数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.#ctor(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.MySql.MySqlCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">MySql数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数(Do Nothing ! MySql没有游标类型) <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="strName"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddInParameter(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objMySqlDbType">参数MySqlDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddInParameter(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objMySqlDbType">参数MySqlDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,MySql.Data.MySqlClient.MySqlDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objMySqlDbType">参数MySqlDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objMySqlDbType">参数MySqlDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddOutParameter(System.String,MySql.Data.MySqlClient.MySqlDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objMySqlDbType">参数MySqlDbType类型</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddOutParameter(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objMySqlDbType">参数MySqlDbType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,MySql.Data.MySqlClient.MySqlDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objMySqlDbType">参数MySqlDbType类型</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,MySql.Data.MySqlClient.MySqlDbType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objMySqlDbType">参数MySqlDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objMySqlDbType">参数MySqlDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="mysqlType">参数类型 <see cref="T:MySql.Data.MySqlClient.MySqlDbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="mysqlType">参数类型(MySqlDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(System.String,System.Data.DbType,MySql.Data.MySqlClient.MySqlDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="mysqlType">参数类型(MySqlDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(MySql.Data.MySqlClient.MySqlParameter)">
            <summary>
            为命令增加一个MySqlParameter参数，扩展方法
            </summary>
            <param name="mysqlParameter">表示 System.Data.MySqlClient.MySqlCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddParameter(MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            为命令增加一组MySqlParameter参数，扩展方法
            </summary>
            <param name="mysqlParameters">表示 System.Data.MySqlClient.MySqlCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.GetMySqlParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.GetMySqlParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddCommandParameters(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            循环添加MySqlCommand中命令文本参数
            </summary>
            <param name="cmd">MySqlCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.AddCommandParameters(MySql.Data.MySqlClient.MySqlCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加MySqlCommand中命令文本参数
            </summary>
            <param name="cmd">MySqlCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.MySql.MySqlCommandWrapper.CreateCommand(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个MySqlCommand命令
            </summary>
            <param name="connection">一个数据库连接MySqlConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个MySqlCommand命令</returns>
        </member>
        <member name="P:System.Database.MySql.MySqlCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="F:System.Logger.Asynchronous.LogWrite.isRun">
            <summary>
            标识线程是否运行，这里 true 代表运行，false代表停止
            </summary>
        </member>
        <member name="F:System.Logger.Asynchronous.LogWrite.threadWait">
            <summary>
            当日志队列为空时等待的毫秒数
            </summary>
        </member>
        <member name="F:System.Logger.Asynchronous.LogWrite.lstLogFileThread">
            <summary>
            文件写入 线程列表 一个文件一个线程写入
            </summary>
        </member>
        <member name="M:System.Logger.Asynchronous.LogWrite.LogAppend">
            <summary>
            循环追加日志
            </summary>
        </member>
        <member name="T:System.Database.Firebird.FirebirdDatabase">
            <summary>
            FirebirdDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.Firebird.FirebirdDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">Firebird数据库连接字符串</param>
        </member>
        <member name="M:System.Database.Firebird.FirebirdDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:FirebirdSql.Data.FirebirdClient.FbConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.FirebirdClient.FbConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.Firebird.FirebirdDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.Firebird.FirebirdDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Firebird.FirebirdDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.Firebird.FirebirdDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.Firebird.FirebirdDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.Firebird.FirebirdDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Firebird.FirebirdDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Firebird.FirebirdDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.Firebird.FirebirdDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:System.Database.Firebird.FirebirdDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.DbCoreConnectLimit">
            <summary>
            设置数据库资源底层访问封装类(System.Database.DbCore)各类型数据库的连接最大数的限制，默认没有限制
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intOracleMaxConnectionCount">
            <summary>
            Oracle数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intSqlServerMaxConnectionCount">
            <summary>
            SqlServer数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intOleDbMaxConnectionCount">
            <summary>
            OleDb类型的数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intOdbcMaxConnectionCount">
            <summary>
            Odbc类型的数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intMySqlMaxConnectionCount">
            <summary>
            MySql数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intSybaseMaxConnectionCount">
            <summary>
            Sybase数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intDB2MaxConnectionCount">
            <summary>
            DB2数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intSQLiteMaxConnectionCount">
            <summary>
            SQLite数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intPostgreSQLMaxConnectionCount">
            <summary>
            PostgreSQL数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intIfxMaxConnectionCount">
            <summary>
            Informix数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intFirebirdMaxConnectionCount">
            <summary>
            Firebird数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intMaxDBMaxConnectionCount">
            <summary>
            MaxDB数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intAccessMaxConnectionCount">
            <summary>
            Access数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intDmMaxConnectionCount">
            <summary>
            Dm数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit.intODPNetOracleMaxConnectionCount">
            <summary>
            ODPNet方式连接Oracle数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="F:System.Database.DbCoreConnectLimit._intAllDBMaxConnectionCount">
            <summary>
            所有数据库可打开的最大连接数目统一设置，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.OracleMaxConnectionCount">
            <summary>
            Oracle数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.SqlServerMaxConnectionCount">
            <summary>
            SqlServer数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.OleDbMaxConnectionCount">
            <summary>
            OleDb类型的数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.OdbcMaxConnectionCount">
            <summary>
            Odbc类型的数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.MySqlMaxConnectionCount">
            <summary>
            MySql数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.SybaseMaxConnectionCount">
            <summary>
            Sybase数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.DB2MaxConnectionCount">
            <summary>
            DB2数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.SQLiteMaxConnectionCount">
            <summary>
            SQLite数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.PostgreSQLMaxConnectionCount">
            <summary>
            PostgreSQL数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.InformixMaxConnectionCount">
            <summary>
            Informix数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.FirebirdMaxConnectionCount">
            <summary>
            Firebird数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.MaxDBMaxConnectionCount">
            <summary>
            MaxDB数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.AccessMaxConnectionCount">
            <summary>
            Access数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.DmMaxConnectionCount">
            <summary>
            Dm数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.ODPNetOracleMaxConnectionCount">
            <summary>
            ODPNet方式连接Oracle数据库可打开的最大连接数目，小于等于0表示不限连接
            </summary>
        </member>
        <member name="P:System.Database.DbCoreConnectLimit.AllDBMaxConnectionCount">
            <summary>
            所有数据库可打开的最大连接数目的统一设置，小于等于0表示不限连接
            </summary>
        </member>
        <member name="T:System.Database.Select">
            <summary>
            ORM结构化查询开始语句类
            </summary>
        </member>
        <member name="F:System.Database.Select.m_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.Select.m_sbSelectColumn">
            <summary>
            选择字段名变量
            </summary>
        </member>
        <member name="F:System.Database.Select.chrEntityColumnSplit">
            <summary>
            表实体原描述信息(EntityColumn)属性意义的分隔符
            </summary>
        </member>
        <member name="M:System.Database.Select.#ctor(System.Database.DbCore)">
            <summary>
            默认不选择出任何字段，仅初始化实例
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
        </member>
        <member name="M:System.Database.Select.#ctor(System.Database.DbCore,System.String)">
            <summary>
            构造单个查询字段名，空则默认选择出所有字段，即使用通配符*
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strColumn">可以是查询表单个字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"，空则默认选择出所有字段，即使用通配符*</param>
        </member>
        <member name="M:System.Database.Select.#ctor(System.String,System.Database.DbCore)">
            <summary>
            选择自定义Select查询字段内容
            </summary>
            <param name="strCustomSql">自定义查询字段Select语句内容，空则默认选择出所有字段，即使用通配符*</param>
            <param name="dbCore">数据库访问类DbCore实例</param>
        </member>
        <member name="M:System.Database.Select.#ctor(System.Database.DbCore,System.String[])">
            <summary>
            选择字段的数组
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strArrayColumns">查询选择表字段的数组,可以是单独的表字段组 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"，空则默认选择出所有字段，即使用通配符*</param>
        </member>
        <member name="M:System.Database.Select.SelectColumn(System.String)">
            <summary>
            添加查询字段
            </summary>
            <param name="strColumn">查询字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.SelectColumns(System.String[])">
            <summary>
            添加查询字段
            </summary>
            <param name="strArrayColumns">查询字段名组列表:可直接由字段名构成 或者 表实体字段列信息描述的字段构成,表实体字段列格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.Add(System.String)">
            <summary>
            添加查询字段 等同于SelectColumn,作用就是方法名长度短些,方便使用
            </summary>
            <param name="strColumn">查询字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.Add(System.String[])">
            <summary>
            添加查询字段 等同于SelectColumn,作用就是方法名长度短些,方便使用
            </summary>
            <param name="strArrayColumn">查询字段名组列表:可直接由字段名构成 或者 表实体字段列信息描述的字段构成,表实体字段列格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.SelectColumnMaxValue(System.String)">
            <summary>
            添加查询Max值字段
            </summary>
            <param name="strColumn">查询字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.SelectColumnMinValue(System.String)">
            <summary>
            添加查询Min值字段
            </summary>
            <param name="strColumn">查询字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.SelectColumnAvgValue(System.String)">
            <summary>
            添加查询Avg值字段
            </summary>
            <param name="strColumn">查询字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.SelectColumnSumValue(System.String)">
            <summary>
            添加查询Sum值字段
            </summary>
            <param name="strColumn">查询字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.AddMax(System.String)">
            <summary>
            添加查询Max值字段 等同于SelectColumnMaxValue,作用就是方法名长度短些,方便使用
            </summary>
            <param name="strColumn">查询字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.AddMin(System.String)">
            <summary>
            添加查询Min值字段 等同于SelectColumnMinValue,作用就是方法名长度短些,方便使用
            </summary>
            <param name="strColumn">查询字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.AddAvg(System.String)">
            <summary>
            添加查询Avg值字段 等同于SelectColumnAvgValue,作用就是方法名长度短些,方便使用
            </summary>
            <param name="strColumn">查询字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.AddSum(System.String)">
            <summary>
            添加查询Sum值字段
            </summary>
            <param name="strColumn">查询字段名 或者 表实体字段列信息描述的字段,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>返回当前Select类实例</returns>
        </member>
        <member name="M:System.Database.Select.SelectCustom(System.String)">
            <summary>
            添加自定义查询字段Select语句内容，同SelectCustomSql
            </summary>
            <param name="strSqlCustom">自定义查询字段Select语句内容(ALL(检索所有符合条件的元组)|DISTINCT(检索去掉重复组所有元组))</param>
            <returns>当前Select实例</returns>
        </member>
        <member name="M:System.Database.Select.SelectCustomSql(System.String)">
            <summary>
            添加自定义查询字段Select语句内容，同SelectCustom,作用方便理解方法名
            </summary>
            <param name="strSqlCustom">自定义查询字段Select语句内容(ALL(检索所有符合条件的元组)|DISTINCT(检索去掉重复组所有元组))</param>
            <returns>当前Select实例</returns>
        </member>
        <member name="M:System.Database.Select.AddSql(System.String)">
            <summary>
            添加自定义查询字段Select语句内容，等同于SelectCustom,SelectCustomSql,作用就是方法名长度短些,方便使用
            </summary>
            <param name="strSqlCustom">自定义查询字段Select语句内容(ALL(检索所有符合条件的元组)|DISTINCT(检索去掉重复组所有元组))</param>
            <returns>当前Select实例</returns>
        </member>
        <member name="M:System.Database.Select.From">
            <summary>
            ORM结构化查询语句选择目标表类,默认只实例化类不初始化查询表
            </summary>
            <returns>返回From类实例</returns>
        </member>
        <member name="M:System.Database.Select.From(System.String)">
            <summary>
            ORM结构化查询语句选择目标表,并初始化查询表
            </summary>
            <param name="strTable">目标表名</param>
            <returns>返回From类实例</returns>
        </member>
        <member name="M:System.Database.Select.From(System.String,System.String)">
            <summary>
            ORM结构化查询语句选择目标表,并初始化查询表
            </summary>
            <param name="strTable">目标表名</param>
            <param name="strTableAliasName">目标表别名</param>
            <returns>返回From类实例</returns>
        </member>
        <member name="M:System.Database.Select.From(System.String[])">
            <summary>
            ORM结构化查询语句选择目标表,并初始化查询表
            </summary>
            <param name="strArrayTables">选择表名数组,如：new string[]{table1,table2...}</param>
            <returns>返回From类实例</returns>
        </member>
        <member name="M:System.Database.Select.From(System.Object)">
            <summary>
            ORM结构化查询语句选择目标表所映射的实体,并初始化查询表
            </summary>
            <param name="objTableEntity">关系表所映射的实体</param>
            <returns>返回From类实例</returns>
        </member>
        <member name="M:System.Database.Select.From(System.Object[])">
            <summary>
            ORM结构化查询语句选择目标表所映射的实体,并初始化查询表
            </summary>
            <param name="objArrayTableEntitys">关系表所映射的实体对象数组</param>
            <returns>返回From类实例</returns>
        </member>
        <member name="M:System.Database.Select.GetTableNameByEntity(System.Object)">
            <summary>
            获取实体映射的表的名称，映射为表名
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <returns>泛型实体的名称，映射为表名</returns>
        </member>
        <member name="M:System.Database.Select.GetArrayTableNameByEntitys(System.Object[])">
            <summary>
            根据实体对象数组获取映射的表名数组
            </summary>
            <param name="objArrayTableEntitys">关系表所映射的实体对象数组</param>
            <returns>实体对象映射的表名数组,如：new string[]{table1,table2...}</returns>
        </member>
        <member name="T:System.Database.MaxDB.MaxDBDatabase">
            <summary>
            MaxDBDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">MaxDB数据库连接字符串</param>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:MaxDB.Data.MaxDBConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.MaxDBClient.MaxDBConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.MaxDB.MaxDBDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.MaxDB.MaxDBDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:System.Database.MaxDB.MaxDBDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="P:System.Logger.Asynchronous.LogEntity.LOG_CONTENTS">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:System.Logger.Asynchronous.LogEntity.FILE_DIR_NAME">
            <summary>
            日志文件路径+文件名（不含文件扩展名）
            </summary>
        </member>
        <member name="P:System.Logger.Asynchronous.LogEntity.LOG_FILE_SUFFIX">
            <summary>
            日志文件后缀（用以分开记录日志之用，空为不分开记录日志）
            </summary>
        </member>
        <member name="P:System.Logger.Asynchronous.LogEntity.LOG_EXTENSION">
            <summary>
            日志文件扩展名
            </summary>
        </member>
        <member name="M:System.Database.Extend.Class.Class1.ClassMethod(System.String)">
            <summary>
            ClassMethod
            </summary>
        </member>
        <member name="M:System.Database.Extend.Class.Class1.ClassMethod">
            <summary>
            ClassMethod
            </summary>
        </member>
        <member name="M:System.Database.Extend.Class.Class1.ClassMethod1(System.String)">
            <summary>
            ClassMethod1
            </summary>
        </member>
        <member name="M:System.Database.Extend.Class.Class1.ClassMethod1">
            <summary>
            ClassMethod1
            </summary>
        </member>
        <member name="T:System.Database.DatabaseFactory">
            <summary>
            根据配置文件中的配置创建数据库连接的工厂
            </summary>
        </member>
        <member name="M:System.Database.DatabaseFactory.CreateDatabase(System.Database.DatabaseType,System.String)">
            <summary>
            以指定的连接字符串和连接类型，创建一个连接并返回。
            </summary>
            <param name="databaseType">数据库类型 <see cref="T:System.Database.DatabaseType"/> 值之一。</param>
            <param name="connectionString">数据库连接字符串。</param>
            <returns>一个数据库连接的 <see cref="T:System.Database.Database"/>。</returns>
        </member>
        <member name="T:System.Database.SqlServer.SqlDatabase">
            <summary>
            SqlDatabase 类
            </summary>
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">Sql数据库连接字符串</param>
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.GetConnection">
            <summary>
            获取这个Database连接使用的连接
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:System.Data.SqlClient.SqlConnection"/>
            </summary>
            <returns>
            返回这个 Database 指定的连接字符串初始化 System.Data.SqlClient.SqlConnection 类的新实例。
            </returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.GetNewParapeter">
            <summary>
            获取这个Database连接使用的命令参数实例
            </summary>
            <returns>命令参数实例</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个查询语句获得一个命令封装。
            </summary>
            <param name="query">SQL语句。</param>
            <returns>为查询语句封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameterValues">存储过程的参数</param>
            <returns>为存储过程封装的 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，要求提供的值与参数数目相同。
            </remarks> 
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.SqlServer.SqlDatabase.ExecuteXmlReader(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其XmlReader对象
            </summary>
            <param name="command">DBCommandWrapper基类</param>
            <returns>命令执行的XmlReader对象，一个 <see cref="T:System.Xml.XmlReader"/>。</returns>
        </member>
        <member name="P:System.Database.SqlServer.SqlDatabase.ConnectionString">
            <summary>
            获取连接使用的连接字符串。
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <param>用于打开连接的字符串。</param>
        </member>
        <member name="T:System.Database.Where">
            <summary>
            ORM结构化查询语句Where条件类
            </summary>
        </member>
        <member name="F:System.Database.Where.m_dbCore">
            <summary>
            数据库访问类变量
            </summary>
        </member>
        <member name="F:System.Database.Where.m_SelectColumns">
            <summary>
            选择字段名变量
            </summary>
        </member>
        <member name="F:System.Database.Where.m_Tables">
            <summary>
            选择查询的表
            </summary>
        </member>
        <member name="F:System.Database.Where.m_ldTables">
            <summary>
            选择查询的表名和对应的别名
            </summary>
        </member>
        <member name="F:System.Database.Where.m_sbWhereConditions">
            <summary>
            Where条件组合
            </summary>
        </member>
        <member name="F:System.Database.Where.m_ArrayListParameters">
            <summary>
            条件组合参数列表
            </summary>
        </member>
        <member name="F:System.Database.Where.m_ArrayListParameterTypeFullNames">
            <summary>
            条件组合参数类型名称的全称
            </summary>
        </member>
        <member name="F:System.Database.Where.m_ArrayListParameterValues">
            <summary>
            条件组合参数对应值列表
            </summary>
        </member>
        <member name="F:System.Database.Where.m_UpdateSetColumns">
            <summary>
            更新指定列组合
            </summary>
        </member>
        <member name="F:System.Database.Where.m_ArrayListUpdateParameters">
            <summary>
            更新列值组合参数列表
            </summary>
        </member>
        <member name="F:System.Database.Where.m_ArrayListUpdateParameterTypeFullNames">
            <summary>
            更新列值组合参数类型名称的全称
            </summary>
        </member>
        <member name="F:System.Database.Where.m_ArrayListUpdateParameterValues">
            <summary>
            更新列值组合参数对应值列表
            </summary>
        </member>
        <member name="F:System.Database.Where.m_ParmToken">
            <summary>
            参数前导符
            </summary>
        </member>
        <member name="F:System.Database.Where.chrEntityColumnSplit">
            <summary>
            表实体原描述信息(EntityColumn)属性意义的分隔符
            </summary>
        </member>
        <member name="F:System.Database.Where.bytLabelWhere">
            <summary>
            标示当前Where条件是附加在Select还有Delete等之后
            默认为0 附加在Select之后,为Select服务,
            1 Delete之后,为Delete服务
            2 Update之后,为Update服务；...
            </summary>
        </member>
        <member name="M:System.Database.Where.#ctor(System.Database.DbCore,System.String)">
            <summary>
            为Delete命令准备的Where条件类构造函数
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strDeleteTables">Delete目标表名</param>
        </member>
        <member name="M:System.Database.Where.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.Specialized.ListDictionary)">
            <summary>
            Where条件类构造函数
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strSelectColumns">选择字段名</param>
            <param name="strTables">选择表名</param>
            <param name="ldTables">表名对应的别名</param>
        </member>
        <member name="M:System.Database.Where.#ctor(System.Database.DbCore,System.String,System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            为Update命令准备的Where条件类构造函数
            </summary>
            <param name="dbCore">数据库访问类DbCore实例</param>
            <param name="strUpdateTable">Update目标表名</param>
            <param name="strUpdateSetColumns">更新指定列组合</param>
            <param name="arrListUpdateParameters">更新列值组合参数列表</param>
            <param name="arrListUpdateParameterTypeFullNames">更新列值组合参数类型名称的全称</param>
            <param name="arrListUpdateParameterValues">更新列值组合参数对应值列表</param>
        </member>
        <member name="M:System.Database.Where.ConditionCustom(System.String)">
            <summary>
            添加自定义不带参数的Where条件
            </summary>
            <param name="strSqlWhereCondition">自定义不带参数的Where条件</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustom(System.String)">
            <summary>
            添加And关系的自定义不带参数的Where条件
            </summary>
            <param name="strSqlAndCondition">自定义不带参数的Where关系And条件</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustom(System.String)">
            <summary>
            添加Or关系的自定义不带参数的Where条件
            </summary>
            <param name="strSqlOrCondition">自定义不带参数的Where关系Or条件</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.BracketAndStart">
            <summary>
            添加关系AND括弧标记开始(左括弧)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Database.Where.BracketOrStart">
            <summary>
            添加关系OR括弧标记开始(左括弧)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Database.Where.BracketEnd">
            <summary>
            添加括弧标记结束(右括弧)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的相等连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的相等连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndEqual(System.String,System.String)">
            <summary>
            添加表字段的关系And的相等连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndNotEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的不等连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndNotEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的不等连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndNotEqual(System.String,System.String)">
            <summary>
            添加表字段的关系And的不等连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndGreat(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的大于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndGreat(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的大于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndGreat(System.String,System.String)">
            <summary>
            添加表字段的关系And的大于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndLess(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的小于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndLess(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的小于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndLess(System.String,System.String)">
            <summary>
            添加表字段的关系And的小于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndGreatEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的大于等于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndGreatEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的大于等于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndGreatEqual(System.String,System.String)">
            <summary>
            添加表字段的关系And的大于等于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndLessEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndLessEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnAndLessEqual(System.String,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系Or的相等连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系Or的相等连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrEqual(System.String,System.String)">
            <summary>
            添加表字段的关系Or的相等连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrNotEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系Or的不等连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrNotEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系Or的不等连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrNotEqual(System.String,System.String)">
            <summary>
            添加表字段的关系Or的不等连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrGreat(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系Or的大于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrGreat(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的大于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrGreat(System.String,System.String)">
            <summary>
            添加表字段的关系Or的大于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrLess(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系Or的小于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrLess(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的小于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrLess(System.String,System.String)">
            <summary>
            添加表字段的关系Or的小于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrGreatEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系Or的大于等于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrGreatEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的大于等于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrGreatEqual(System.String,System.String)">
            <summary>
            添加表字段的关系Or的大于等于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrLessEqual(System.String,System.String,System.String,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="strTable1">关系连接左边的表1</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="strTable2">关系连接右边的表2</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrLessEqual(System.Object,System.String,System.Object,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="objTableEntity1">关系条件左边的表1所映射的实体</param>
            <param name="strTableColumn1">关系连接左边的表1的字段1</param>
            <param name="objTableEntity2">关系条件左边的表2所映射的实体</param>
            <param name="strTableColumn2">关系连接右边的表2的字段2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionColumnOrLessEqual(System.String,System.String)">
            <summary>
            添加表字段的关系And的小于等于连接
            </summary>
            <param name="EntityColumn1">表1实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <param name="EntityColumn2">表2实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.Int32)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustom(System.String,System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Where运算操作符条件
            </summary>
            <param name="strParameter">自定义带参数的Where关系And条件</param>
            <param name="strOperate">运算操作符</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Where相等条件
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomNotEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Where不相等条件
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomGreat(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Where大于条件
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomLess(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Where小于条件
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomGreatEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Where大于等于条件
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomLessEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Where小于等于条件
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomBetweenAnd(System.String,System.Object,System.Object)">
            <summary>
            添加And关系的自定义带参数的Between objValue1 And objValue2条件
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomLike(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomNotLike(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomIsNull(System.String)">
            <summary>
            添加And关系的自定义带参数的 IS NULL 匹配条件
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomIsNotNull(System.String)">
            <summary>
            添加And关系的自定义带参数的 IS NOT NULL 匹配条件
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomIn(System.String,System.Object[])">
            <summary>
            添加And关系的自定义带参数的 IN 匹配条件
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndCustomNotIn(System.String,System.Object[])">
            <summary>
            添加And关系的自定义带参数的 NOT IN 匹配条件
            </summary>
            <param name="strParameter">自定义的Where关系And条件参数</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustom(System.String,System.String,System.Object)">
            <summary>
            添加 OR 关系的自定义带参数的Where运算操作符条件
            </summary>
            <param name="strParameter">自定义带参数的Where关系And条件</param>
            <param name="strOperate">运算操作符</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomEqual(System.String,System.Object)">
            <summary>
            添加Or关系的自定义不带参数的Where相等条件
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomNotEqual(System.String,System.Object)">
            <summary>
            添加Or关系的自定义带参数的Where不相等条件
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomGreat(System.String,System.Object)">
            <summary>
            添加Or关系的自定义带参数的Where大于条件
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomLess(System.String,System.Object)">
            <summary>
            添加Or关系的自定义带参数的Where小于条件
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomGreatEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Where大于等于条件
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomLessEqual(System.String,System.Object)">
            <summary>
            添加And关系的自定义带参数的Where小于等于条件
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <param name="objValue">参数值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomBetweenAnd(System.String,System.Object,System.Object)">
            <summary>
            添加Or关系的自定义带参数的Between objValue1 And objValue2条件
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomLike(System.String,System.Object)">
            <summary>
            添加Or关系的自定义带参数的like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomNotLike(System.String,System.Object)">
            <summary>
            添加Or关系的自定义带参数的like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomIsNull(System.String)">
            <summary>
            添加Or关系的自定义带参数的 IS NULL 匹配条件
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomIsNotNull(System.String)">
            <summary>
            添加Or关系的自定义带参数的 IS NOT NULL 匹配条件
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomIn(System.String,System.Object[])">
            <summary>
            添加Or关系的自定义带参数的 IN 匹配条件
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrCustomNotIn(System.String,System.Object[])">
            <summary>
            添加Or关系的自定义带参数的 NOT IN 匹配条件
            </summary>
            <param name="strParameter">自定义的Where关系Or条件参数</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndEqual(System.String,System.String,System.Object)">
            <summary>
            添加And关系相等条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndEqual(System.Object,System.String,System.Object)">
            <summary>
            添加And关系相等条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndEqual(System.String,System.Object)">
            <summary>
            添加And关系相等条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotEqual(System.String,System.String,System.Object)">
            <summary>
            添加And关系不相等条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotEqual(System.Object,System.String,System.Object)">
            <summary>
            添加And关系不相等条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotEqual(System.String,System.Object)">
            <summary>
            添加And关系不相等条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndGreat(System.String,System.String,System.Object)">
            <summary>
            添加And关系大于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndGreat(System.Object,System.String,System.Object)">
            <summary>
            添加And关系大于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndGreat(System.String,System.Object)">
            <summary>
            添加And关系大于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndLess(System.String,System.String,System.Object)">
            <summary>
            添加And关系小于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndLess(System.Object,System.String,System.Object)">
            <summary>
            添加And关系小于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndLess(System.String,System.Object)">
            <summary>
            添加And关系小于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndGreatEqual(System.String,System.String,System.Object)">
            <summary>
            添加And大于等于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndGreatEqual(System.Object,System.String,System.Object)">
            <summary>
            添加And大于等于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndGreatEqual(System.String,System.Object)">
            <summary>
            添加And大于等于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndLessEqual(System.String,System.String,System.Object)">
            <summary>
            添加And关系小于等于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndLessEqual(System.Object,System.String,System.Object)">
            <summary>
            添加And关系小于等于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndLessEqual(System.String,System.Object)">
            <summary>
            添加And关系小于等于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndBetweenAnd(System.String,System.String,System.Object,System.Object)">
            <summary>
            添加And关系Between objValue1 And objValue2条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndBetweenAnd(System.Object,System.String,System.Object,System.Object)">
            <summary>
            添加And关系Between objValue1 And objValue2条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndBetweenAnd(System.String,System.Object,System.Object)">
            <summary>
            添加And关系Between objValue1 And objValue2条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndLike(System.String,System.String,System.Object)">
            <summary>
            添加And关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndLike(System.Object,System.String,System.Object)">
            <summary>
            添加And关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndLike(System.String,System.Object)">
            <summary>
            添加And关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotLike(System.String,System.String,System.Object)">
            <summary>
            添加And关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotLike(System.Object,System.String,System.Object)">
            <summary>
            添加And关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotLike(System.String,System.Object)">
            <summary>
            添加And关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*...
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIsNull(System.String,System.String)">
            <summary>
            添加And关系 IS NULL 匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIsNull(System.Object,System.String)">
            <summary>
            添加And关系 IS NULL 匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIsNull(System.String)">
            <summary>
            添加And关系 IS NULL 匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIsNotNull(System.String,System.String)">
            <summary>
            添加And关系 IS NOT NULL 匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIsNotNull(System.Object,System.String)">
            <summary>
            添加And关系 IS NOT NULL 匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIsNotNull(System.String)">
            <summary>
            添加And关系 IS NOT NULL 匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIn(System.String,System.String,System.Object[])">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIn(System.String,System.String,System.String)">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIn(System.Object,System.String,System.Object[])">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIn(System.Object,System.String,System.String)">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIn(System.String,System.Object[])">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndIn(System.String,System.String)">
            <summary>
            添加And关系In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotIn(System.String,System.String,System.Object[])">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotIn(System.String,System.String,System.String)">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotIn(System.Object,System.String,System.Object[])">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotIn(System.Object,System.String,System.String)">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotIn(System.String,System.Object[])">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionAndNotIn(System.String,System.String)">
            <summary>
            添加And关系Not In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrEqual(System.String,System.String,System.Object)">
            <summary>
            添加OR关系相等条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrEqual(System.Object,System.String,System.Object)">
            <summary>
            添加OR关系相等条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrEqual(System.String,System.Object)">
            <summary>
            添加OR关系相等条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotEqual(System.String,System.String,System.Object)">
            <summary>
            添加OR关系不相等条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotEqual(System.Object,System.String,System.Object)">
            <summary>
            添加OR关系不相等条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotEqual(System.String,System.Object)">
            <summary>
            添加OR关系不相等条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrGreat(System.String,System.String,System.Object)">
            <summary>
            添加OR关系大于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrGreat(System.Object,System.String,System.Object)">
            <summary>
            添加OR关系大于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrGreat(System.String,System.Object)">
            <summary>
            添加OR关系大于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrLess(System.String,System.String,System.Object)">
            <summary>
            添加OR关系小于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrLess(System.Object,System.String,System.Object)">
            <summary>
            添加OR关系小于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrLess(System.String,System.Object)">
            <summary>
            添加OR关系小于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrGreatEqual(System.String,System.String,System.Object)">
            <summary>
            添加OR大于等于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrGreatEqual(System.Object,System.String,System.Object)">
            <summary>
            添加OR大于等于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrGreatEqual(System.String,System.Object)">
            <summary>
            添加OR大于等于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrLessEqual(System.String,System.String,System.Object)">
            <summary>
            添加OR关系小于等于条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrLessEqual(System.Object,System.String,System.Object)">
            <summary>
            添加OR关系小于等于条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrLessEqual(System.String,System.Object)">
            <summary>
            添加OR关系小于等于条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrBetweenAnd(System.String,System.String,System.Object,System.Object)">
            <summary>
            添加Or关系Between objValue1 And objValue2条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrBetweenAnd(System.Object,System.String,System.Object,System.Object)">
            <summary>
            添加Or关系Between objValue1 And objValue2条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrBetweenAnd(System.String,System.Object,System.Object)">
            <summary>
            添加Or关系Between objValue1 And objValue2条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue1">关系条件的字段名对应的值1</param>
            <param name="objValue2">关系条件的字段名对应的值2</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrLike(System.String,System.String,System.Object)">
            <summary>
            添加Or关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrLike(System.Object,System.String,System.Object)">
            <summary>
            添加Or关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrLike(System.String,System.Object)">
            <summary>
            添加Or关系like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotLike(System.String,System.String,System.Object)">
            <summary>
            添加Or关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotLike(System.Object,System.String,System.Object)">
            <summary>
            添加Or关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotLike(System.String,System.Object)">
            <summary>
            添加Or关系Not Like匹配条件,通配符：SqlServer:%/Oracle:%/Access:*
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objValue">关系条件的字段名对应的值</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIsNull(System.String,System.String)">
            <summary>
            添加Or关系 IS NULL 匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIsNull(System.Object,System.String)">
            <summary>
            添加Or关系 IS NULL 匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIsNull(System.String)">
            <summary>
            添加Or关系 IS NULL 匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIsNotNull(System.String,System.String)">
            <summary>
            添加Or关系 IS NOT NULL 匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIsNotNull(System.Object,System.String)">
            <summary>
            添加Or关系 IS NOT NULL 匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIsNotNull(System.String)">
            <summary>
            添加Or关系 IS NOT NULL 匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIn(System.String,System.String,System.Object[])">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIn(System.String,System.String,System.String)">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIn(System.Object,System.String,System.Object[])">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIn(System.Object,System.String,System.String)">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIn(System.String,System.Object[])">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrIn(System.String,System.String)">
            <summary>
            添加Or关系In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotIn(System.String,System.String,System.Object[])">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotIn(System.String,System.String,System.String)">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="strTable">关系条件的表名</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotIn(System.Object,System.String,System.Object[])">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotIn(System.Object,System.String,System.String)">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <param name="strColumn">关系条件的字段名</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotIn(System.String,System.Object[])">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="objArrayValue">关系条件的字段名对应值数组</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ConditionOrNotIn(System.String,System.String)">
            <summary>
            添加Or关系Not In匹配条件
            </summary>
            <param name="EntityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <param name="strSqlSelect">IN子查询的SQL语句</param>
            <returns>当前Where类的实例</returns>
        </member>
        <member name="M:System.Database.Where.ExecuteNonQuery">
            <summary>
            执行一个Sql命令语句，并返回受影响的行数值
            </summary>
            <returns>返回命令执行受影响的行数</returns>
        </member>
        <member name="M:System.Database.Where.ExecuteDataSet">
            <summary>
            执行一个Sql查询语句，并返回一个结果集。
            </summary>
            <returns>返回一个结果记录集</returns>
        </member>
        <member name="M:System.Database.Where.ExecuteReader">
            <summary>
            执行查询，并返回数据源读取数据行的只进结果集流IDataReader
            </summary>
            <returns>返回数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.Where.ExecuteScalar">
            <summary>
            执行查询，并返回返回第一行第一列的值
            </summary>
            <returns>返回第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.Where.ToSQL">
            <summary>
            获取待执行的SQL，以供调试分析用
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Database.Where.GroupBy(System.String)">
            <summary>
            构建GroupBy类实例的方法
            </summary>
            <param name="strColumn">分组列字段</param>
            <returns>返回GroupBy类实例</returns>
        </member>
        <member name="M:System.Database.Where.OrderBy">
            <summary>
            构建OrderBy排序类实例的方法
            </summary>
            <returns>返回OrderBy排序类实例</returns>
        </member>
        <member name="M:System.Database.Where.OrderBy(System.String)">
            <summary>
            构建OrderBy排序类实例的方法
            </summary>
            <param name="strColumn">默认排序方向的排序字段</param>
            <returns>返回OrderBy排序类实例</returns>
        </member>
        <member name="M:System.Database.Where.OrderBy(System.String[])">
            <summary>
            构建OrderBy排序类实例的方法
            </summary>
            <param name="strArraryColumns">默认排序方向的排序字段数组</param>
            <returns>返回OrderBy排序类实例</returns>
        </member>
        <member name="M:System.Database.Where.GetTableNameByEntity(System.Object)">
            <summary>
            获取实体映射的表的名称，映射为表名
            </summary>
            <param name="objTableEntity">关系条件的表所映射的实体</param>
            <returns>泛型实体的名称，映射为表名</returns>
        </member>
        <member name="M:System.Database.Where.GetColumnTypeFullName(System.Object,System.String)">
            <summary>
            根据关系表所映射实体及实体所含实体字段获取实体字段类型的完全限定名
            </summary>
            <param name="objTableEntity">关系表所映射实体</param>
            <param name="strColumn">实体所含实体字段名</param>
            <returns>返回指定实体字段类型的完全限定名</returns>
        </member>
        <member name="M:System.Database.Where.WhereConditionAddParameter(System.String)">
            <summary>
            Where条件的添加参数,当参数列表包含有原列时,按顺序1,2...顺序添加,初始为0不添加任何后缀
            </summary>
            <param name="strColumn">要添加的参数原名称</param>
        </member>
        <member name="M:System.Database.Where.GetExecuteSQL">
            <summary>
            获取待执行的SQL语句，供ExecuteNonQuery/ExecuteDataSet/ExecuteReader/ExecuteScalar使用
            </summary>
            <returns>待执行的SQL语句</returns>
        </member>
        <member name="M:System.Logger.Asynchronous.LogThread.RunAsynchronous(System.Int32,System.Boolean)">
            <summary>
            启动日志异步写入线程
            </summary>
            <param name="wait">当日志队列为空时等待的毫秒数</param>
            <param name="threadIsBackgroud">true后台线程，false前台线程</param>
        </member>
        <member name="T:System.Database.Extend.CryptographyHelp">
            <summary>
            加密/解密常用方法扩展类
            </summary>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Encrypt(System.String)">
            <summary>
            使用缺省密钥字符串加密string
            </summary>
            <param name="strOriginal">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            使用缺省密钥字符串加密string
            </summary>
            <param name="strOriginal">明文</param>
            <param name="encoding">字符编码方案</param>
            <returns>密文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Decrypt(System.String)">
            <summary>
            使用缺省密钥字符串解密string
            </summary>
            <param name="strEncrypted">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Decrypt(System.String,System.Text.Encoding)">
            <summary>
            使用缺省密钥字符串解密string
            </summary>
            <param name="strEncrypted">密文</param>
            <param name="encoding">字符编码方案</param>
            <returns>明文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Encrypt(System.String,System.String)">
            <summary>
            使用给定密钥字符串加密string
            </summary>
            <param name="strOriginal">原始文字</param>
            <param name="strKey">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            使用给定密钥字符串加密string
            </summary>
            <param name="strOriginal">原始文字</param>
            <param name="strKey">密钥</param>
            <param name="encoding">字符编码方案</param>
            <returns>密文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Decrypt(System.String,System.String)">
            <summary>
            使用给定密钥字符串解密string
            </summary>
            <param name="strEncrypted">密文</param>
            <param name="strKey">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            使用给定密钥字符串解密string,返回指定编码方式明文
            </summary>
            <param name="strEncrypted">密文</param>
            <param name="strKey">密钥</param>
            <param name="encoding">字符编码方案</param>
            <returns>明文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Encrypt(System.Byte[])">
            <summary>
            使用缺省密钥字符串加密byte[]
            </summary>
            <param name="bytOriginal">原始数据</param>
            <returns>密文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Decrypt(System.Byte[])">
            <summary>
            使用缺省密钥字符串解密byte[]
            </summary>
            <param name="bytEncrypted">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            使用给定密钥加密
            </summary>
            <param name="bytOriginal">明文</param>
            <param name="bytKey">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            使用给定密钥解密数据
            </summary>
            <param name="bytEncrypted">密文</param>
            <param name="bytKey">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.EncryptDES(System.String)">
            <summary>
            DES加密
            </summary>
            <param name="strOriginal">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.EncryptDES(System.String,System.String)">
            <summary> 
            加密数据 
            </summary> 
            <param name="strOriginal">明文</param> 
            <param name="strKey">8位密钥，不够补0</param> 
            <returns>密文</returns> 
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.DecryptDES(System.String)">
            <summary>
            DES解密
            </summary>
            <param name="strEncrypted">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.DecryptDES(System.String,System.String)">
            <summary> 
            DES解密数据 
            </summary> 
            <param name="strEncrypted">密文</param> 
            <param name="strKey">8位密钥，不够补0</param> 
            <returns>明文</returns> 
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.EncryptMD5(System.String)">
            <summary>
            MD5不可逆加密,即生成MD5摘要byte[]
            </summary>
            <param name="strOriginal">明文</param>
            <returns>MD5密文摘要</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.EncryptMD5(System.Byte[])">
            <summary>
            MD5不可逆加密,即生成MD5摘要byte[]
            </summary>
            <param name="bytOriginal">明文</param>
            <returns>MD5密文摘要</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.EncryptMD5Str(System.Byte[])">
            <summary>
            MD5不可逆加密,即生成MD5摘要
            </summary>
            <param name="bytOriginal">明文</param>
            <returns>MD5密文摘要</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.RSAKey(System.String@,System.String@)">
            <summary>
            RSA 的密钥产生 产生私钥 和公钥 
            </summary>
            <param name="xmlKeys">包含 RSA 公钥和私钥</param>
            <param name="xmlPublicKey">仅包含 RSA 公钥</param>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.EncryptRSA(System.String,System.String)">
            <summary>
            RSA的加密函数  string
            </summary>
            <param name="xmlPublicKey">公钥</param>
            <param name="m_strEncryptString"></param>
            <returns>密文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.EncryptRSA(System.String,System.Byte[])">
            <summary>
            RSA的加密函数 byte[]
            </summary>
            <param name="xmlPublicKey">公钥</param>
            <param name="EncryptString"></param>
            <returns>密文</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.DecryptRSA(System.String,System.String)">
            <summary>
            RSA的解密函数  string
            </summary>
            <param name="xmlPrivateKey"></param>
            <param name="m_strDecryptString">密文</param>
            <returns></returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.DecryptRSA(System.String,System.Byte[])">
            <summary>
            RSA的解密函数  byte
            </summary>
            <param name="xmlPrivateKey"></param>
            <param name="DecryptString">密文</param>
            <returns></returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.GetHash(System.String,System.Byte[]@)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="m_strSource"></param>
            <param name="HashData"></param>
            <returns></returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.GetHash(System.String,System.String@)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="m_strSource"></param>
            <param name="strHashData"></param>
            <returns></returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.GetHash(System.IO.FileStream,System.Byte[]@)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="objFile"></param>
            <param name="HashData"></param>
            <returns></returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.GetHash(System.IO.FileStream,System.String@)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="objFile"></param>
            <param name="strHashData"></param>
            <returns></returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.RSASignatureFormatter(System.String,System.Byte[])">
            <summary>
            RSA数字签名
            </summary>
            <param name="strPrivateKey">密钥(公、私)XML字符串</param>
            <param name="hashByteSignatureData">要签名的数据</param>
            <returns>数字签名</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.RSASignatureFormatter(System.String,System.String)">
            <summary>
            RSA数字签名
            </summary>
            <param name="strPrivateKey">密钥(公、私)XML字符串</param>
            <param name="strHashData">要签名的数据(不可为null)</param>
            <returns>数字签名</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.RSASignatureDeformatter(System.String,System.Byte[],System.Byte[])">
            <summary>
            RSA数字签名验证
            </summary>
            <param name="strPublicKey">公钥</param>
            <param name="hashData">数据</param>
            <param name="bytSignatureData">待验证的签名</param>
            <returns>验证签名</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.RSASignatureDeformatter(System.String,System.String,System.String)">
            <summary>
            RSA数字签名验证
            </summary>
            <param name="strPublicKey">公钥</param>
            <param name="strHashData">数据</param>
            <param name="strSignatureData">待验证的签名</param>
            <returns>验证签名</returns>
        </member>
        <member name="M:System.Database.Extend.CryptographyHelp.Check(System.String)">
            <summary>
            验证序列号的合法化
            </summary>
            <param name="strLicense">序列号</param>
            <returns>true 合法，false 不合法</returns>
        </member>
        <member name="T:System.Database.DbCore">
            <summary>
            数据库访问核心类，执行命令先打开(Open)数据库连接
            </summary>
        </member>
        <member name="F:System.Database.DbCore.blnTransactionCreated">
            <summary>
            记录当前连接是否已发起事务处理，true已发起事务，false没有发起事务
            </summary>
        </member>
        <member name="F:System.Database.DbCore.blnRecordConnection">
            <summary>
            是否已经记录当前数据库连接数，true已记录，false没有记录
            </summary>
        </member>
        <member name="F:System.Database.DbCore.blnConnectionClosed">
            <summary>
            记录关闭连接是否已记录,true关闭并已记录、false未记录
            </summary>
        </member>
        <member name="F:System.Database.DbCore.chrEntityColumnSplit">
            <summary>
            表实体原描述信息(EntityColumn)属性意义的分隔符
            </summary>
        </member>
        <member name="F:System.Database.DbCore.p_objEntity">
            <summary>
            私有实体对象指针，用于取实体对象的基类BaseEntity
            </summary>
        </member>
        <member name="F:System.Database.DbCore._command">
            <summary>
            DBCommandWrapper
            </summary>
        </member>
        <member name="M:System.Database.DbCore.#ctor(System.Database.DatabaseType,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="databaseType">数据库连接类型</param>
            <param name="strConnectString">对应数据库类型的连接字符串</param>
        </member>
        <member name="M:System.Database.DbCore.#ctor(System.String)">
            <summary>
            构造函数，默认为Oracle数据库连接
            </summary>
            <param name="strConnectString">Oracle数据库连接字符串</param>
        </member>
        <member name="M:System.Database.DbCore.Open">
            <summary>
            打开数据库连接，数据库访问结束后记得关闭数据库连接(Close)释放资源
            </summary>
        </member>
        <member name="M:System.Database.DbCore.Close">
            <summary>
            关闭数据库连接 释放资源
            </summary>
        </member>
        <member name="M:System.Database.DbCore.BeginTransaction">
            <summary>
            开始事务，事务成功后一定提交事务(CommitTransaction)，失败时回滚事务(RollbackTransaction)
            </summary>
        </member>
        <member name="M:System.Database.DbCore.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开始事务，事务成功后一定提交事务(CommitTransaction)，失败时回滚事务(RollbackTransaction)
            </summary>
            <param name="il">事务隔离级别枚举</param>
        </member>
        <member name="M:System.Database.DbCore.CommitTransaction">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:System.Database.DbCore.RollbackTransaction">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:System.Database.DbCore.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            在指定事务中登记
            </summary>
            <param name="transaction">对用于登记的现有 System.Transactions.Transaction 的引用。</param>
        </member>
        <member name="M:System.Database.DbCore.GetSqlStringCommandWrapper(System.String)">
            <summary>
            为一个查询语句获得一个命令封装。
            </summary>
            <param name="strSql">SQL结构化查询语句</param>
            <returns>封装的命令查询语句 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.DbCore.GetSqlStringCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            为一个查询语句获得一个命令封装
            </summary>
            <param name="strSql">SQL结构化查询语句</param>
            <param name="parameters">查询语句的参数值</param>
            <returns>封装的命令查询语句</returns>
        </member>
        <member name="M:System.Database.DbCore.GetStoredProcCommandWrapper(System.String)">
            <summary>
            为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <returns>存储过程获得的一个命令 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
        </member>
        <member name="M:System.Database.DbCore.GetStoredProcCommandWrapper(System.String,System.Data.IDataParameter[])">
            <summary>
            为一个存储过程获得一个命令封装。
            </summary>
            <param name="storedProcedureName">存储过程名称。</param>
            <param name="parameters">存储过程的参数值</param>
            <returns>存储过程获得的一个命令 <see cref="T:System.Database.DBCommandWrapper"/>。</returns>
            <remarks>
            存储过程的参数将会从数据库反射得到，值会按提供的顺序对应到参数上，提供的值要与参数数目相同。
            </remarks>        
        </member>
        <member name="M:System.Database.DbCore.ExecuteScalar(System.Database.DBCommandWrapper)">
            <summary>
            执行指定的命令，并返回结果的第一行第一列的值。
            </summary>
            <param name="command">待执行的命令。</param>
            <returns>命令执行结果的第一行第一列的值。</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteScalar(System.Database.DBCommandWrapper,System.Data.IDataParameter[])">
            <summary>
            根据命令类型和带参数的命令文本，执行一个命令并返回第一行第一列的值。
            </summary>
            <param name="command">待执行的命令。</param>
            <param name="parameters">待执行的命令的参数集</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteScalar(System.String)">
            <summary>
            执行一个不带参数的Sql语句并返回第一行第一列的值。
            </summary>
            <param name="strSql">Sql语句</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteScalar(System.String,System.Data.IDataParameter[])">
            <summary>
            执行一个带参数的Sql语句并返回第一行第一列的值。
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="parameters">SQL执行语句对应的参数集</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            根据命令类型和不带参数的命令文本，执行一个命令并返回第一行第一列的值。
            </summary>
            <param name="commandType">命令类型。<see cref="T:System.Data.CommandType"/> (StoredProcedure、Text)值之一。</param>
            <param name="commandText">命令文本</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteScalar(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            根据命令类型和带参数的命令文本，执行一个命令并返回第一行第一列的值。
            </summary>
            <param name="commandType">命令类型。<see cref="T:System.Data.CommandType"/> (StoredProcedure、Text)值之一。</param>
            <param name="commandText">命令文本</param>
            <param name="parameters">SQL执行语句对应的参数集</param>
            <returns>命令执行结果的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteReader(System.Database.DBCommandWrapper)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">待执行的命令。</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteReader(System.Database.DBCommandWrapper,System.Data.CommandBehavior)">
            <summary>
            执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">待执行的命令。</param>
            <param name="behavior">对查询结果和查询对数据库的影响的说明</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteReader(System.Database.DBCommandWrapper,System.Data.IDataParameter[])">
            <summary>
             执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="command">DBCommandWrapper执行命令</param>
            <param name="parameters">命令参数集</param>
            <returns>从数据源读取数据行的只进结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteReader(System.String)">
            <summary>
             执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="strSql">Sql语句</param>
            <returns>执行返回只读向前的数据结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteReader(System.String,System.Data.IDataParameter[])">
            <summary>
             执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="parameters">Sql命令语句对应的参数集</param>
            <returns>执行返回只读向前的数据结果集流OracleDataReader</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
             执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="commandType">命令类型。<see cref="T:System.Data.CommandType"/>(StoredProcedure、Text) 值之一。</param>
            <param name="commandText">命令文本</param>
            <returns>执行返回只读向前的数据结果集流IDataReader</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteReader(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
             执行返回只读向前的数据结果集流，性能比较快
            </summary>
            <param name="commandType">命令类型。<see cref="T:System.Data.CommandType"/> (StoredProcedure、Text) 值之一。</param>
            <param name="commandText">命令文本</param>
            <param name="parameters">命令语句对应的参数集</param>
            <returns>执行返回只读向前的数据结果集流OracleDataReader</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteXmlReader(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其XmlReader对象。数据库不支持的返回null
            </summary>
            <param name="command">待执行的命令。</param>
            <returns>命令执行的XmlReader对象，一个 <see cref="T:System.Xml.XmlReader"/>。数据库不支持的返回null</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteDataSet(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">待执行的命令。</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteDataSet(System.Database.DBCommandWrapper,System.Data.IDataParameter[])">
            <summary>
            执行一个命令，并返回其结果集。
            </summary>
            <param name="command">待执行的命令</param>
            <param name="parameters">命令参数集</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteDataSet(System.String)">
            <summary>
            执行一个Sql查询语句，并返回一个结果集。
            </summary>
            <param name="strSql">Sql查询语句。</param>
            <returns>命令的执行结果集。一个<see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteDataSet(System.String,System.Data.IDataParameter[])">
            <summary>
            执行一个带参数Sql查询语句，并返回一个结果集。
            </summary>
            <param name="strSql">Sql查询语句。</param>
            <param name="parameters">Sql语句命令的参数</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            根据命令类型和命令文本执行一个查询，并返回一个结果集。
            </summary>
            <param name="commandType">命令类型。<see cref="T:System.Data.CommandType"/>(StoredProcedure、Text) 值之一。</param>
            <param name="commandText">命令文本。</param>
            <returns>命令的执行结果集。一个<see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            根据一个带参数命令类型和命令文本执行一个查询，并返回一个数据集。
            </summary>
            <param name="commandType">命令类型。<see cref="T:System.Data.CommandType"/>(StoredProcedure、Text) 值之一。</param>
            <param name="commandText">命令文本。</param>
            <param name="parameters">命令的参数</param>
            <returns>命令的执行结果集，一个 <see cref="T:System.Data.DataSet"/>。</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteList(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令，并返回List结果集。
            </summary>
            <param name="command">待执行的命令</param>
            <returns>命令的执行List结果集</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteList(System.Database.DBCommandWrapper,System.Data.IDataParameter[])">
            <summary>
            执行一个命令，并返回List结果集。
            </summary>
            <param name="command">待执行的命令</param>
            <param name="parameters">命令参数集</param>
            <returns>命令的执行List结果集</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteList(System.String)">
            <summary>
            执行一个Sql查询语句，并返回List结果集。
            </summary>
            <param name="strSql">Sql查询语句</param>
            <returns>执行List结果集</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteList(System.String,System.Data.IDataParameter[])">
            <summary>
            执行一个带参数Sql查询语句，并返回List结果集。
            </summary>
            <param name="strSql">Sql查询语句</param>
            <param name="parameters">Sql语句命令的参数</param>
            <returns>执行List结果集</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteList(System.Data.CommandType,System.String)">
            <summary>
            根据命令类型和命令文本执行一个查询，并返回List结果集。
            </summary>
            <param name="commandType">命令类型。<see cref="T:System.Data.CommandType"/>(StoredProcedure、Text) 值之一。</param>
            <param name="commandText">命令文本。</param>
            <returns>命令的执行List结果集</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteList(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            根据一个带参数命令类型和命令文本执行一个查询，并返回List结果集。
            </summary>
            <param name="commandType">命令类型。<see cref="T:System.Data.CommandType"/>(StoredProcedure、Text) 值之一。</param>
            <param name="commandText">命令文本。</param>
            <param name="parameters">命令的参数</param>
            <returns>命令的执行List结果集</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteNonQuery(System.Database.DBCommandWrapper)">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteNonQuery(System.Database.DBCommandWrapper,System.Data.IDataParameter[])">
            <summary>
            执行一个命令并返回受影响的行数的命令
            </summary>
            <param name="command">DBCommandWrapper</param>
            <param name="parameters">命令参数集</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteNonQuery(System.String)">
            <summary>
            根据Sql语句执行一个命令并返回受影响的行数的命令。
            </summary>
            <param name="strSql">Sql语句。</param>
            <returns>Sql语句执行后受影响的行数。</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteNonQuery(System.String,System.Data.IDataParameter[])">
            <summary>
            根据命令文本及命令参数执行一个命令并返回受影响的行数的命令。
            </summary>
            <param name="strSql">Sql语句。</param>
            <param name="parameters">Sql语句命令参数。</param>
            <returns>Sql语句执行后受影响的行数。</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            根据不带命令参数命令文本执行一个命令并返回受影响的行数的命令。
            </summary>
            <param name="commandType">命令类型。<see cref="T:System.Data.CommandType"/>(StoredProcedure、Text) 值之一。</param>
            <param name="strCommandText">命令文本。</param>
            <returns>命令文本执行的返回值。</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            根据命令文本及命令参数执行一个命令并返回受影响的行数的命令。
            </summary>
            <param name="commandType">命令类型。<see cref="T:System.Data.CommandType"/>(StoredProcedure、Text) 值之一。</param>
            <param name="strCommandText">命令文本。</param>
            <param name="parameters">命令参数。</param>
            <returns>命令文本执行的返回值。</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteStoredProcedure(System.String)">
            <summary>
            执行不带参数的存储过程,同dbCore.GetStoredProcCommandWrapper(storedProcedureName);...
            </summary>
            <param name="storedProcedureName">存储过程名</param>
            <returns>命令文本执行的返回值</returns>
        </member>
        <member name="M:System.Database.DbCore.ExecuteStoredProcedure(System.String,System.Data.IDataParameter[])">
            <summary>
            执行带参数的存储过程,同dbCore.GetStoredProcCommandWrapper(storedProcedureName);...
            </summary>
            <param name="storedProcedureName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>命令文本执行的返回值</returns>
        </member>
        <member name="M:System.Database.DbCore.GetNewParapeter">
            <summary>
            根据构造的数据库连接类型，获取数据库对应的参数类型
            </summary>
            <returns>数据库对应的参数类型</returns>
        </member>
        <member name="M:System.Database.DbCore.GetParapeter">
            <summary>
            根据构造的数据库连接类型，获取数据库对应的参数类型
            </summary>
            <returns>数据库对应的参数类型</returns>
        </member>
        <member name="M:System.Database.DbCore.GetCurrentDatabaseType">
            <summary>
            获取当前实例的数据库连接类型
            </summary>
        </member>
        <member name="M:System.Database.DbCore.StandardSqlWithParameters(System.String)">
            <summary>
            标准化带参数的Sql语句,替换SQL语句中的以@、:或Original_为前导符的参数替换为?，以供OleDb、Odbc类型的数据库使用
            </summary>
            <param name="strSql">原始带参数的全部SQL语句</param>
            <returns>返回标准化带参数的Sql语句,即OleDb、Odbc类型的数据库识别的带?参数的SQL语句</returns>
        </member>
        <member name="M:System.Database.DbCore.ReplaceSqlParameters(System.String,System.String)">
            <summary>
            替换SQL语句中的以@、:、?或Original_为前导符的参数替换为?，以供OleDb、Odbc类型的数据库使用
            </summary>
            <param name="strSql">原始带参数的全部SQL语句</param>
            <param name="strReplaceToken">要替换的参数标示符(?)</param>
            <returns>返回OleDb、Odbc类型的数据库识别的带?参数的SQL语句</returns>
        </member>
        <member name="M:System.Database.DbCore.ReplaceSqlParameters(System.String,System.String,System.String)">
            <summary>
            替换SQL语句中的以@、:、?或Original_等为前导符的参数替换为?，以供OleDb、Odbc类型的数据库使用
            </summary>
            <param name="strSql">原始带参数的全部SQL语句</param>
            <param name="strToken">原始参数的标示前导符(@或:)</param>
            <param name="strReplaceToken">要替换的参数标示符(?)</param>
            <returns>返回OleDb、Odbc类型的数据库识别的带?参数的SQL语句</returns>
        </member>
        <member name="M:System.Database.DbCore.GetInt32MaxId(System.String,System.String)">
            <summary>
            获取对应数据库表( ...FROM TableName)TableName列ColumnName最大值
            </summary>
            <param name="TableName">表名</param>
            <param name="ColumnName">数值型列名，一般为表的主键或数值型字段</param>
            <returns>列ColumnName最大值整型值</returns>
        </member>
        <member name="M:System.Database.DbCore.GetIntMaxId(System.String,System.String)">
            <summary>
            获取对应数据库表( ...FROM TableName)TableName列ColumnName最大值
            </summary>
            <param name="TableName">表名</param>
            <param name="ColumnName">数值型列名，一般为表的主键或数值型字段</param>
            <returns>列ColumnName最大值整型值</returns>
        </member>
        <member name="M:System.Database.DbCore.GetInt64MaxId(System.String,System.String)">
            <summary>
            获取对应数据库表( ...FROM TableName)TableName列ColumnName最大值
            </summary>
            <param name="TableName">表名</param>
            <param name="ColumnName">数值型列名，一般为表的主键或数值型字段</param>
            <returns>列ColumnName最大值整型值</returns>
        </member>
        <member name="M:System.Database.DbCore.GetLongMaxId(System.String,System.String)">
            <summary>
            获取对应数据库表( ...FROM TableName)TableName列ColumnName最大值
            </summary>
            <param name="TableName">表名</param>
            <param name="ColumnName">数值型列名，一般为表的主键或数值型字段</param>
            <returns>列ColumnName最大值整型值</returns>
        </member>
        <member name="M:System.Database.DbCore.GetInt32MaxIdAdd1(System.String,System.String)">
            <summary>
            获取对应数据库表( ...FROM TableName)TableName列ColumnName最大值+1
            </summary>
            <param name="TableName">表名</param>
            <param name="ColumnName">数值型列名，一般为表的主键或数值型字段</param>
            <returns>列ColumnName最大值+1整型值</returns>
        </member>
        <member name="M:System.Database.DbCore.GetIntMaxIdAdd1(System.String,System.String)">
            <summary>
            获取对应数据库表( ...FROM TableName)TableName列ColumnName最大值+1
            </summary>
            <param name="TableName">表名</param>
            <param name="ColumnName">数值型列名，一般为表的主键或数值型字段</param>
            <returns>列ColumnName最大值+1整型值</returns>
        </member>
        <member name="M:System.Database.DbCore.GetInt64MaxIdAdd1(System.String,System.String)">
            <summary>
            获取对应数据库表( ...FROM TableName)TableName列ColumnName最大值+1
            </summary>
            <param name="TableName">表名</param>
            <param name="ColumnName">数值型列名，一般为表的主键或数值型字段</param>
            <returns>列ColumnName最大值+1整型值</returns>
        </member>
        <member name="M:System.Database.DbCore.GetLongMaxIdAdd1(System.String,System.String)">
            <summary>
            获取对应数据库表( ...FROM TableName)TableName列ColumnName最大值+1
            </summary>
            <param name="TableName">表名</param>
            <param name="ColumnName">数值型列名，一般为表的主键或数值型字段</param>
            <returns>列ColumnName最大值+1整型值</returns>
        </member>
        <member name="M:System.Database.DbCore.Exists(System.String)">
            <summary>
            判断记录是否存在
            </summary>
            <param name="strSql">SQL语句</param>
            <returns>true存在，false不存在 </returns>
        </member>
        <member name="M:System.Database.DbCore.Exists(System.String,System.Data.IDataParameter[])">
            <summary>
            判断记录是否存在
            </summary>
            <param name="strSql">SQL语句</param>
            <param name="cmdParms">SQL语句中的参数(IDataParameter)集</param>
            <returns>true存在，false不存在 </returns>
        </member>
        <member name="M:System.Database.DbCore.AddCommandParameters(System.Database.DBCommandWrapper,System.Data.IDataParameter[])">
            <summary>
            循环添加DBCommandWrapper中命令文本参数
            </summary>
            <param name="cmd">DBCommandWrapper命令基类</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.DbCore.RecordDbConnectCount">
            <summary>
            记录各类型数据库的连接实例数
            </summary>
        </member>
        <member name="M:System.Database.DbCore.RecordCloseDbConnectCount">
            <summary>
            关闭数据库连接时，同时减少相应的数据库连接数目
            </summary>
        </member>
        <member name="M:System.Database.DbCore.VerifyCurrentConnectCount">
            <summary>
            若设置连接限制，验证当前数据库连接是否超过设置的最大连接限制
            </summary>
            <returns>true超过最大连接限制、false没有超过最大连接限制</returns>
        </member>
        <member name="M:System.Database.DbCore.IsExceedRestrictTip">
            <summary>
            验证是否超过最大连接的限制，若已设置并操作则提示并抛出异常
            </summary>
        </member>
        <member name="M:System.Database.DbCore.Notify">
            <summary>
            通知者,PreHandled初始值为null,须做判断
            </summary>
        </member>
        <member name="M:System.Database.DbCore.PostNotify">
            <summary>
            通知者,PostHandled初始值为null,须做判断
            </summary>
        </member>
        <member name="M:System.Database.DbCore.Insert(System.Object,System.Object)">
            <summary>
            插入 比较实体前后默认的初始值
            </summary>
            <param name="objDefaultEntity">实体默认的初始值</param>
            <param name="objEntity">带值的实体对象</param>
            <returns>执行插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Insert(System.Object)">
            <summary>
            插入 比较实体前后默认的初始值
            </summary>
            <param name="objValueEntity">带值的实体对象</param>
            <returns>执行插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.InsertAll(System.Object)">
            <summary>
            通过实体映射插入表中一条数据，插入全部字段
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <returns>执行插入数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.InsertEx(System.Object,System.Object)">
            <summary>
            插入 保存所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="objDefaultEntity">默认初始值的实体</param>
            <param name="objValueEntity">带值的实体对象,即待插入的实体</param>
            <returns>执行插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.InsertEx(System.Object)">
            <summary>
            插入 (插入所有字段其中若与实体字段初始值相同则置该字段为空)
            </summary>
            <param name="objValueEntity">带值的实体对象,即待插入的实体</param>
            <returns>执行插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Update(System.Object,System.Object)">
            <summary>
            通过实体映射及主键约束更新表中一条数据，并与比较实体初始值比较，若内容不同则更新之，否则不更新
            </summary>
            <param name="objDefaultEntity">实体默认的初始值</param>
            <param name="objValueEntity">带值的实体对象</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Update(System.Object)">
            <summary>
            通过实体映射及主键约束更新表中一条数据，并与比较实体初始值比较，若内容不同则更新之，否则不更新
            </summary>
            <param name="objValueEntity">带值的实体对象</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Update(System.Object,System.Object,System.String[])">
            <summary>
            通过实体映射及更新依据字段约束更新表中一条数据，并与比较实体初始值比较，若内容不同则更新之，否则不更新
            </summary>
            <param name="objDefaultEntity">实体默认的初始值</param>
            <param name="objValueEntity">带值的实体对象</param>
            <param name="arrPrimaryKey">指定作为更新依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Update(System.Object,System.Object,System.String)">
            <summary>
            通过实体映射及更新依据字段约束更新表中一条数据，并与比较实体初始值比较，若内容不同则更新之，否则不更新
            </summary>
            <param name="objDefaultEntity">实体默认的初始值</param>
            <param name="objValueEntity">带值的实体对象</param>
            <param name="strPrimaryKey">指定作为更新依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Update(System.Object,System.String)">
            <summary>
            通过实体映射及更新依据字段约束更新表中一条数据，并与比较实体初始值比较，若内容不同则更新之，否则不更新
            </summary>
            <param name="objValueEntity">带值的实体对象</param>
            <param name="strPrimaryKey">指定作为更新依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Update(System.Object,System.String[])">
            <summary>
            通过实体映射及更新依据字段约束更新表中一条数据，并与比较实体初始值比较，若内容不同则更新之，否则不更新
            </summary>
            <param name="objValueEntity">带值的实体对象</param>
            <param name="arrPrimaryKey">指定作为更新依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.UpdateAll(System.Object)">
            <summary>
            通过实体映射及主键条件更新表中一条数据，更新全部字段
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <returns>执行更新数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.UpdateAll(System.Object,System.String[])">
            <summary>
            通过实体映射及更新依据字段条件更新表中一条数据，更新全部字段
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <param name="arrPrimaryKey">指定作为更新依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>执行更新数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.UpdateAll(System.Object,System.String)">
            <summary>
            通过实体映射及更新依据字段条件更新表中一条数据，更新全部字段
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <param name="strPrimaryKey">指定作为更新依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>执行更新数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.UpdateEx(System.Object,System.Object)">
            <summary>
            通过实体映射及主键条件更新表中一条数据(更新所有字段,其中若与实体字段初始值相同则置该字段为空)
            </summary>
            <param name="objDefaultEntity">默认初始值的实体</param>
            <param name="objValueEntity">带值的实体对象</param>
            <returns>执行更新数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.UpdateEx(System.Object)">
            <summary>
            通过实体映射及主键条件更新表中一条数据(更新所有字段,其中若与实体字段初始值相同则置该字段为空)
            </summary>
            <param name="objValueEntity">带值的实体对象</param>
            <returns>执行更新数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Save(System.Object,System.Object)">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与主键记录相同的就更新，没有就插入，且不保存与实体初始值相同的字段值
            </summary>
            <param name="objDefaultEntity">实体默认的初始值(用于比较)，即刚刚(new)出来的实体</param>
            <param name="objValueEntity">当前要保存的实体值</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Save(System.Object)">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与主键记录相同的就更新，没有就插入，且不保存与实体初始值相同的字段值
            </summary>
            <param name="objValueEntity">当前要保存的实体值</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Save(System.Object,System.Object,System.String[])">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与保存依据字段记录相同的就更新，没有就插入，且不保存与实体初始值相同的字段值
            </summary>
            <param name="objDefaultEntity">实体默认的初始值，即刚刚(new)出来的实体</param>
            <param name="objValueEntity">当前要保存的实体值</param>
            <param name="arrPrimaryKey">指定作为保存依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Save(System.Object,System.Object,System.String)">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与保存依据字段记录相同的就更新，没有就插入，且不保存与实体初始值相同的字段值
            </summary>
            <param name="objDefaultEntity">实体默认的初始值，即刚刚(new)出来的实体</param>
            <param name="objValueEntity">当前要保存的实体值</param>
            <param name="strPrimaryKey">指定作为保存依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Save(System.Object,System.String[])">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与保存依据字段记录相同的就更新，没有就插入，且不保存与实体初始值相同的字段值
            </summary>
            <param name="objValueEntity">当前要保存的实体值</param>
            <param name="arrPrimaryKey">指定作为保存依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Save(System.Object,System.String)">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与保存依据字段记录相同的就更新，没有就插入，且不保存与实体初始值相同的字段值
            </summary>
            <param name="objValueEntity">当前要保存的实体值</param>
            <param name="strPrimaryKey">指定作为保存依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.SaveAll(System.Object)">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与主键记录相同的就更新，没有就插入，保存全部字段
            </summary>
            <param name="objValueEntity">当前要保存的实体值</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.SaveAll(System.Object,System.String[])">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与保存依据字段记录相同的就更新，没有就插入，保存全部字段
            </summary>
            <param name="objValueEntity">当前要保存的实体值</param>
            <param name="arrPrimaryKey">指定作为保存依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.SaveAll(System.Object,System.String)">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与保存依据字段记录相同的就更新，没有就插入，保存全部字段
            </summary>
            <param name="objValueEntity">当前要保存的实体值</param>
            <param name="strPrimaryKey">指定作为保存依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.SaveEx(System.Object,System.Object)">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与主键记录相同的就更新，没有就插入
            保存所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="objDefaultEntity">实体默认的初始值(用于比较)，即刚刚(new)出来的实体</param>
            <param name="objValueEntity">当前要保存的实体值</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.SaveEx(System.Object)">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与主键记录相同的就更新，没有就插入
            保存所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="objValueEntity">当前要保存的实体值</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.DelInsert(System.Object,System.Object)">
            <summary>
            先删除后插入 比较实体前后默认的初始值,且不插入与实体初始值相同的字段值
            </summary>
            <param name="objDefaultEntity">实体默认的初始值</param>
            <param name="objEntity">带值的实体对象</param>
            <returns>先删除后插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.DelInsert(System.Object)">
            <summary>
            先删除后插入 比较实体前后默认的初始值,且不插入与实体初始值相同的字段值
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <returns>先删除后插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.DelInsert(System.Object,System.String)">
            <summary>
            先删除后插入 比较实体前后默认的初始值,且不插入与实体初始值相同的字段值
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <param name="strConditionKey">指定作为删除依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>先删除后插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.DelInsert(System.Object,System.String[])">
            <summary>
            先删除后插入 比较实体前后默认的初始值,且不插入与实体初始值相同的字段值
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <param name="arrConditionKey">指定作为删除依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>先删除后插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.DelInsertEx(System.Object,System.Object)">
            <summary>
            先删除后插入 插入所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="objDefaultEntity">实体默认的初始值</param>
            <param name="objEntity">带值的实体对象</param>
            <returns>先删除后插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.DelInsertEx(System.Object)">
            <summary>
            先删除后插入 插入所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <returns>先删除后插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.DelInsertEx(System.Object,System.String)">
            <summary>
            先删除后插入 插入所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <param name="strConditionKey">指定作为删除依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>先删除后插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.DelInsertEx(System.Object,System.String[])">
            <summary>
            先删除后插入 插入所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <param name="arrConditionKey">指定作为删除依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>先删除后插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.DelInsertAll(System.Object)">
            <summary>
            先删除后插入 插入全部字段
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <returns>先删除后插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.DelInsertAll(System.Object,System.String)">
            <summary>
            先删除后插入 插入全部字段
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <param name="strConditionKey">指定作为删除依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>先删除后插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.DelInsertAll(System.Object,System.String[])">
            <summary>
            先删除后插入 插入全部字段
            </summary>
            <param name="objEntity">带值的实体对象</param>
            <param name="arrConditionKey">指定作为删除依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>先删除后插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Delete(System.Object)">
            <summary>
            通过实体(EntitysCodeGenerate生成带数据访问的实体)映射及主键约束删除表中一条数据,没有主键则直接返回0
            </summary>
            <param name="objEntity">当前要删除的实体值</param>
            <returns>执行删除并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Delete(System.Object,System.String[])">
            <summary>
            通过实体(EntitysCodeGenerate生成带数据访问的实体)映射及删除依据字段约束删除表中一条数据
            </summary>
            <param name="objEntity">当前要删除的实体值</param>
            <param name="arrConditionKey">指定作为删除依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>执行删除并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Delete(System.Object,System.String)">
            <summary>
            通过实体(EntitysCodeGenerate生成带数据访问的实体)映射及删除依据字段约束删除表中一条数据
            </summary>
            <param name="objEntity">当前要删除的实体值</param>
            <param name="strConditionKey">指定作为删除依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>执行删除并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.IsExitByEntityKey(System.Object)">
            <summary>
            根据实体主键判断是否存在当前实体主键值对应记录是否存在
            </summary>
            <param name="objEntity">当前要判断的实体值</param>
            <returns>true存在，false不存在</returns>
        </member>
        <member name="M:System.Database.DbCore.IsExitByEntityKey(System.Object,System.String[])">
            <summary>
            根据实体指定判断条件字段判断是否存在当前实体主键值对应记录是否存在
            </summary>
            <param name="objEntity">当前要判断的实体值</param>
            <param name="arrPrimaryKeys">指定判断条件字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>true存在，false不存在</returns>
        </member>
        <member name="M:System.Database.DbCore.IsExitByEntityKey(System.Object,System.String)">
            <summary>
            根据实体指定判断条件字段判断是否存在当前实体主键值对应记录是否存在
            </summary>
            <param name="objEntity">当前要判断的实体值</param>
            <param name="strPrimaryKey">指定作为判断依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>true存在，false不存在</returns>
        </member>
        <member name="M:System.Database.DbCore.GetDataTableByEntityKey(System.Object)">
            <summary>
            通过实体(EntitysCodeGenerate生成带数据访问的实体)映射及主键约束查询表中一条数据
            </summary>
            <param name="objEntity">当前要查询的实体条件值</param>
            <returns>执行删除并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Insert(System.String,System.String[],System.String[],System.Object[])">
            <summary>
            通过实体映射插入表中一条数据
            </summary>
            <param name="strTableName">映射表名</param>
            <param name="arrColumn">映射表字段</param>
            <param name="arrColumnCSharpType">映射表字段类型</param>
            <param name="objColumnValue">映射表字段所对应的值</param>
            <returns>执行插入数据并返回受影响的行数。</returns>
        </member>
        <member name="M:System.Database.DbCore.Update(System.String,System.String[],System.String[],System.Object[],System.String[],System.String[],System.Object[])">
            <summary>
            根据条件信息值更新指定符合条件的指定列的信息值,没有更新指定条件则直接返回0
            </summary>
            <param name="strTableName">表名</param>
            <param name="arrPrimaryKey">主键</param>
            <param name="arrKeyFullType">主键字段类型限定名</param>
            <param name="objKeyValue">主键字段值</param>
            <param name="arrColumn">更新列</param>
            <param name="arrColumnCSharpType">更新列类型限定名</param>
            <param name="objColumnValue">更新列值</param>
            <returns>执行更新后受影响的行数</returns>
        </member>
        <member name="M:System.Database.DbCore.Delete(System.String,System.String[],System.String[],System.Object[])">
            <summary>
            根据条件信息值删除指定符合条件的信息值,没有指定条件则直接返回0
            </summary>
            <param name="strTableName">映射表名</param>
            <param name="arrColumn">映射表字段</param>
            <param name="arrColumnCSharpType">映射表字段类型</param>
            <param name="objColumnValue">映射表字段所对应的值</param>
            <returns>执行插入数据并返回受影响的行数。</returns>
        </member>
        <member name="M:System.Database.DbCore.GetDataTableByEntityKey(System.String,System.String[],System.String[],System.Object[])">
            <summary>
            根据实体条件信息值查询指定符合实体主键值条件的数据信息
            </summary>
            <param name="strTableName">映射表名</param>
            <param name="arrColumn">映射表字段</param>
            <param name="arrColumnCSharpType">映射表字段类型</param>
            <param name="objColumnValue">映射表字段所对应的值</param>
            <returns>执行查询数据并返回查询后的结果数据集</returns>
        </member>
        <member name="M:System.Database.DbCore.GetColumnsName(System.Object)">
            <summary>
            获取对象实体公共属性的名称
            </summary>
            <param name="objEntity">对象实体，赋值要保存的实体</param>
            <returns>获取对象实体公共属性的名称</returns>
        </member>
        <member name="M:System.Database.DbCore.GetColumnsNameNotSpecify(System.String[],System.Object)">
            <summary>
            获取实体除指定列剩下的列的字段
            </summary>
            <param name="arrColumn">所要除去的实体指定列</param>
            <param name="objEntity">对象实体，赋值要保存的实体</param>
            <returns>获取对象实体公共属性的名称</returns>
        </member>
        <member name="M:System.Database.DbCore.GetDifferentColumnsExceptSpecify(System.String[],System.Object,System.Object)">
            <summary>
            比较实体除指定列初始值及现有实体(objValueEntity)新的值，并返回不同值的列
            </summary>
            <param name="arrColumn">实体要移除的指定列</param>
            <param name="objDefaultEntity">对象实体，默认初始值实体</param>
            <param name="objValueEntity"></param>
            <returns>返回不同值的列</returns>
        </member>
        <member name="M:System.Database.DbCore.GetDifferentColumns(System.Object,System.Object)">
            <summary>
            比较实体初始值及现有实体(_entity)新的值，并返回不同值的列
            </summary>
            <param name="objDefaultEntity">对象实体，默认初始值实体(亦即即刚刚(new)出来的实体)</param>
            <param name="objValueEntity">对象实体，赋值要保存的实体</param>
            <returns>返回不同值的列</returns>
        </member>
        <member name="M:System.Database.DbCore.GetTableName(System.Object)">
            <summary>
            泛型实体的名称，映射为表名
            </summary>
            <returns>泛型实体的名称，映射为表名</returns>
        </member>
        <member name="M:System.Database.DbCore.GetEntityPrimaryColumn(System.Object)">
            <summary>
            获取实体对象Entity的主键对应字段，可能是单个、也可能是联合主键、或没有主键
            </summary>
            <param name="objEntity">实体值</param>
            <returns>返回实体主键字段数组值，若无主键则返回一行一列空字符串的数组</returns>
        </member>
        <member name="M:System.Database.DbCore.GetEntityColumnValue(System.String[],System.Object)">
            <summary>
            获取实体列(objEntity)对应列的列值
            </summary>
            <param name="arrColumn">实体对应的列</param>
            <param name="objEntity">赋值的实体</param>
            <returns>实体列对应列的列值</returns>
        </member>
        <member name="M:System.Database.DbCore.GetEntityColumnValue(System.String[],System.Object,System.Object)">
            <summary>
            获取实体列(objEntity)对应列的列值,若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="arrColumn">实体对应的列</param>
            <param name="objDefaultEntity">默认初始值的实体</param>
            <param name="objEntity">赋值的实体</param>
            <returns>实体列对应列的列值,若与实体字段初始值相同则置该字段为空</returns>
        </member>
        <member name="M:System.Database.DbCore.GetFormatEntityPrivateColumn(System.String)">
            <summary>
            获取实体内部对应格式的私有字段，即实体私有字段格式的解析
            </summary>
            <param name="strColumn">实体公共属性</param>
            <returns>实体公共属性所对应格式的私有字段</returns>
        </member>
        <member name="M:System.Database.DbCore.CountByPrimaryKeysAndValue(System.String,System.String[],System.Object[],System.String[])">
            <summary>
            统计对应表的条件字段和值存在记录数
            </summary>
            <param name="strTableName">表名</param>
            <param name="strArrayKeys">主键数组</param>
            <param name="objArrayValues">主键数组对应的值</param>
            <param name="arrKeyFullType">主键数组对应类型完全限定名</param>
            <returns>存在记录的条数</returns>
        </member>
        <member name="M:System.Database.DbCore.ConstructWhereCondition(System.String[])">
            <summary>
            根据列构建SQL语句(WHERE AND)条件信息
            </summary>
            <param name="arrColumn">条件列</param>
            <returns>SQL语句(WHERE AND)条件信息</returns>
        </member>
        <member name="M:System.Database.DbCore.ConstructSetColumn(System.String[])">
            <summary>
            根据列构建SQL语句更新条件信息(SET)
            </summary>
            <param name="arrColumn"></param>
            <returns></returns>
        </member>
        <member name="M:System.Database.DbCore.ConstructSetColumn(System.String[],System.String[])">
            <summary>
            根据列构建SQL语句更新条件信息(SET)，并剔除约束条件列
            </summary>
            <param name="arrColumn">源更新条件列</param>
            <param name="arrConditionColumn">约束条件列</param>
            <returns></returns>
        </member>
        <member name="M:System.Database.DbCore.PrivateAddInParameter(System.Database.DBCommandWrapper,System.String,System.Object,System.String)">
            <summary>
            为命令增加一个输入类型的参数，统一调用的静态方法，方便若要修改，统一修改(主要是字段类型的映射)
            </summary>
            <param name="cmd">DBCommandWrapper</param>
            <param name="strColumnName">数据库字段</param>
            <param name="objValue">数据库字段所对应的值</param>
            <param name="strColumnCSharpType">C# System.Type 的完全限定名称</param>
        </member>
        <member name="M:System.Database.DbCore.GetDBTypeByFullName(System.String)">
            <summary>
            类型映射  由 System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集 获取对应的DbType类型
            </summary>
            <param name="strTypeFullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <returns>System.Data.DbType</returns>
        </member>
        <member name="M:System.Database.DbCore.GetDBTypeByFullName(System.Object,System.String)">
            <summary>
            类型映射  由 System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集 获取对应的DbType类型
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="strTypeFullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <returns>System.Data.DbType</returns>
        </member>
        <member name="M:System.Database.DbCore.GetCurrentSchema">
            <summary>
            获取当前Schema/模式名（如设置）
            </summary>
            <returns>当前Schema/模式名（如有此设置）</returns>
        </member>
        <member name="M:System.Database.DbCore.GetColumnsTypeFullName(System.String[],System.Object)">
            <summary>
            获取arrColumn对应的实体对象字段类型全称
            </summary>
            <param name="arrColumn">arrColumn对应泛型实体字段,且该值在泛型实体中存在</param>
            <param name="objEntity">实体对象</param>
            <returns>arrColumn对应的泛型实体字段类型全称</returns>
        </member>
        <member name="M:System.Database.DbCore.AddInParameter(System.Database.DBCommandWrapper,System.String,System.Object,System.String)">
            <summary>
            为命令增加一个输入类型的参数，统一调用的静态方法，方便若要修改，统一修改(主要是字段类型的映射)
            </summary>
            <param name="cmd">DBCommandWrapper</param>
            <param name="strColumnName">数据库字段</param>
            <param name="objValue">数据库字段所对应的值</param>
            <param name="strColumnCSharpType">C# System.Type 的完全限定名称</param>
        </member>
        <member name="M:System.Database.DbCore.GetEntityPrimaryColumnValue(System.Object)">
            <summary>
            获取对象实体对象Entity的主键对应字段所对应的值，可能是单个、也可能是联合主键、或没有主键
            </summary>
            <returns>返回实体主键字段数组值，若无主键则返回一行一列空字符串的数组</returns>
        </member>
        <member name="M:System.Database.DbCore.ConstructSqlColumn(System.String[])">
            <summary>
            根据实体公共属性构造SQL列字段
            </summary>
            <param name="arrColumn">实体公共属性，不可为null</param>
            <returns>SQL列字段</returns>
        </member>
        <member name="M:System.Database.DbCore.ConstructSqlParamValues(System.String[])">
            <summary>
            根据实体公共属性构造SQL语句 Values 列字段
            </summary>
            <param name="arrColumn">实体公共属性，不可为null</param>
            <returns>SQL语句 Values 列字段</returns>
        </member>
        <member name="M:System.Database.DbCore.Select">
            <summary>
            默认不选择出任何字段，仅初始化实例
            </summary>
            <returns>返回一个Select结构化查询类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.Select(System.String)">
            <summary>
            ORM结构化查询类
            </summary>
            <param name="strColumn">可以是查询表字段名 或 表名.* 或者 表实体字段列信息描述的字段,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.String)"</param>
            <returns>返回一个Select结构化查询类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.Select(System.String[])">
            <summary>
            ORM结构化查询类
            </summary>
            <param name="strArrayColumns">查询选择表字段的数组,可以是单独的表字段组 或者 表实体字段列信息描述的字段,格式为:"EntityTableName*FieldName*FieldTypeFullName(如:System.String)"</param>
            <returns>返回一个Select结构化查询类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.SelectAll">
            <summary>
            ORM结构化查询类,默认查询所有字段，即"*"
            </summary>
            <returns>返回一个Select结构化查询类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.SelectCustom(System.String)">
            <summary>
            ORM结构化查询类,选择自定义Select查询字段内容
            </summary>
            <param name="strCustomSql">自定义Select查询字段内容</param>
            <returns>返回一个Select结构化查询类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.SelectDISTINCT(System.String)">
            <summary>
            ORM结构化查询类,选择检索去掉重复组所有元组的Select查询字段内容
            </summary>
            <param name="strDistinctSql">检索去掉重复组所有元组及字段内容</param>
            <returns>返回一个Select结构化查询类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.SelectDISTINCT">
            <summary>
            ORM结构化查询类,选择检索去掉重复组所有元组
            </summary>
            <returns>返回一个Select结构化查询类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.DeleteFrom(System.String)">
            <summary>
            实例化一个单表Delete删除类
            </summary>
            <param name="strTable">Delete目标表</param>
            <returns>返回一个Delete类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.DeleteFrom(System.Object)">
            <summary>
            实例化一个单表Delete删除类
            </summary>
            <param name="objEntity">当前要删除的实体对象，亦即目标表映射的实体对象</param>
            <returns>返回一个Delete类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.Update(System.String)">
            <summary>
            实例化一个单表Update更新类
            </summary>
            <param name="strTable">Update目标表</param>
            <returns>返回一个Update类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.UpdateFrom(System.String)">
            <summary>
            实例化一个单表Update更新类
            </summary>
            <param name="strTable">Update目标表</param>
            <returns>返回一个Update类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.UpdateFrom(System.Object)">
            <summary>
            实例化一个单表Update更新类
            </summary>
            <param name="objEntity">当前要删除的实体对象，亦即目标表映射的实体对象</param>
            <returns>返回一个Update类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.InsertInto(System.String)">
            <summary>
            实例化一个单表Insert插入类
            </summary>
            <param name="strTable">Insert目标表</param>
            <returns>返回一个Insert类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.InsertInto(System.Object)">
            <summary>
            实例化一个单表Insert插入类
            </summary>
            <param name="objEntity">当前要插入的实体对象所对应的表</param>
            <returns>返回一个Insert类实例</returns>
        </member>
        <member name="M:System.Database.DbCore.CreateSQL(System.String)">
            <summary>
            快捷执行SQL命令
            </summary>
            <param name="sql">待执行的SQL命令语句</param>
            <returns>CreateSQL</returns>
        </member>
        <member name="M:System.Database.DbCore.CreateStoredProcedure(System.String)">
            <summary>
            快捷执行的存储过程命令
            </summary>
            <param name="storedProcedure">待执行的存储过程命令名称</param>
            <returns>CreateProcedure</returns>
        </member>
        <member name="M:System.Database.DbCore.Dispose">
            <summary>
            IDisposable 成员 资源释放
            </summary>
        </member>
        <member name="M:System.Database.DbCore.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="E:System.Database.DbCore.PreHandled">
            <summary>
            声明一事件PreHandled，类型为委托EventHandler，在实例化时触发,用于审计或扩展他用
            </summary>
        </member>
        <member name="E:System.Database.DbCore.PostHandled">
            <summary>
            声明一事件PreHandled，类型为委托EventHandler，在对象实例销毁(Dispose)时触发,用于审计或扩展他用
            </summary>
        </member>
        <member name="P:System.Database.DbCore.Connection">
            <summary>
            返回当前数据库连接对象
            </summary>
        </member>
        <member name="P:System.Database.DbCore.IsTransaction">
            <summary>
            是否建立事务,true已经建立事务 false未建立事务
            </summary>
        </member>
        <member name="P:System.Database.DbCore.CurrentDatabaseType">
            <summary>
            获取当前实例的数据库连接类型
            </summary>
        </member>
        <member name="P:System.Database.DbCore.GetCurrentParameterToken">
            <summary>
            获取对应数据库连接参数的前导符，如Oracle是“:”,SQL Server是“@”等，
            提供了Oracle、SQLServer、MySql、Sybase、DB2、SQLite、PostgreSQL等，
            OleDb、Odbc类型的SQL语句如：“select * from dept t where deptno 》= ? and deptno 《= ? and dname like ?”
            添加参数如：cmd.AddInParameter("Original_deptno", DbType.Int32, 10);或cmd.AddInParameter("Original_deptno0", DbType.Int32, 10);
            cmd.AddInParameter("Original_deptno1", DbType.Int32, 50);
            cmd.AddInParameter("dname", DbType.AnsiString, "%");
            参数前导符可为空字符串或 Original_ ，当一个字段用于多次时需再参数后添加数字(下标从0开始)以作区分,所以这里的参数前导符返回：Original_
            其他也可通过GetCurrentDatabaseType获取对应的当前实例的数据库连接类型自定义处理
            </summary>
            <returns>对应数据库连接参数的前导符(如Oracle是“:”,SQL Server是“@”)，其它返回null</returns>
        </member>
        <member name="P:System.Database.DbCore.CurrentParameterToken">
            <summary>
            获取对应数据库连接参数的前导符，如Oracle是“:”,SQL Server是“@”等，
            提供了Oracle、SQLServer、MySql、Sybase、DB2、SQLite、PostgreSQL等，
            OleDb、Odbc类型的SQL语句如：“select * from dept t where deptno 》= ? and deptno 《= ? and dname like ?”
            添加参数如：cmd.AddInParameter("Original_deptno", DbType.Int32, 10);或cmd.AddInParameter("Original_deptno0", DbType.Int32, 10);
            cmd.AddInParameter("Original_deptno1", DbType.Int32, 50);
            cmd.AddInParameter("dname", DbType.AnsiString, "%");
            参数前导符可为空字符串或 Original_ ，当一个字段用于多次时需再参数后添加数字(下标从0开始)以作区分,所以这里的参数前导符返回：Original_
            其他也可通过GetCurrentDatabaseType获取对应的当前实例的数据库连接类型自定义处理
            </summary>
            <returns>对应数据库连接参数的前导符(如Oracle是“:”,SQL Server是“@”)，其它返回null</returns>
        </member>
        <member name="P:System.Database.DbCore.GetSqlSignBegin">
            <summary>
            获取对应数据库Sql语句标志前缀,如Access是([),达梦是双引号("),不需要的为空字符串
            如:SELECT "C_ID" FROM "T_"的双引号(")
            </summary>
        </member>
        <member name="P:System.Database.DbCore.GetSqlSignEnd">
            <summary>
            获取对应数据库Sql语句标志后缀,如Access是(]),达梦是双引号("),不需要的为空字符串
            如:SELECT "C_ID" FROM "T_"的双引号(")
            </summary>
        </member>
        <member name="P:System.Database.DbCore.GetCurrentCommandText">
            <summary>
            获取当前执行的命令文本,如SQL语句
            </summary>
        </member>
        <member name="P:System.Database.DbCore.GetCurrentCommand">
            <summary>
            获取当前DBCommandWrapper
            </summary>
        </member>
        <member name="T:System.Database.Odbc.OdbcCommandWrapper">
            <summary>
            连接Odbc类型数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.#ctor(System.Data.Odbc.OdbcConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Odbc.OdbcCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Odbc数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.#ctor(System.Data.Odbc.OdbcConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Odbc.OdbcCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">Odbc数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数。(Odbc没有游标类型，Do Nothing !)
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddInParameter(System.String,System.Data.Odbc.OdbcType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOdbcType">参数OdbcType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddInParameter(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOdbcType">参数OdbcType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Data.Odbc.OdbcType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOdbcType">参数OdbcType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Data.Odbc.OdbcType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOdbcType">参数OdbcType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddOutParameter(System.String,System.Data.Odbc.OdbcType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOdbcType">参数OdbcType类型</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddOutParameter(System.String,System.Data.Odbc.OdbcType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOdbcType">参数OdbcType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.Odbc.OdbcType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOdbcType">参数OdbcType类型</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.Odbc.OdbcType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOdbcType">参数OdbcType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.Odbc.OdbcType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOdbcType">参数OdbcType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.String,System.Data.Odbc.OdbcType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="odbcType">参数类型 <see cref="T:System.Data.Odbc.OdbcType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.String,System.Data.Odbc.OdbcType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="odbcType">参数类型(OdbcType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.Odbc.OdbcType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="odbcType">参数类型(OdbcType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.Data.Odbc.OdbcParameter)">
            <summary>
            为命令增加一个OdbcParameter参数，扩展方法
            </summary>
            <param name="odbcParameter">表示 System.Data.OdbcClient.OdbcCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddParameter(System.Data.Odbc.OdbcParameter[])">
            <summary>
            为命令增加一组OdbcParameter参数，扩展方法
            </summary>
            <param name="odbcParameters">表示 System.Data.OdbcClient.OdbcCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.GetOdbcParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.GetOdbcParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddCommandParameters(System.Data.Odbc.OdbcCommand,System.Data.Odbc.OdbcParameter[])">
            <summary>
            循环添加OdbcCommand中命令文本参数
            </summary>
            <param name="cmd">OdbcCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.AddCommandParameters(System.Data.Odbc.OdbcCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加OdbcCommand中命令文本参数
            </summary>
            <param name="cmd">OdbcCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.Odbc.OdbcCommandWrapper.CreateCommand(System.Data.Odbc.OdbcConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个OdbcCommand命令
            </summary>
            <param name="connection">一个数据库连接OdbcConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个OdbcCommand命令</returns>
        </member>
        <member name="P:System.Database.Odbc.OdbcCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
        <member name="T:System.Database.Access.AccessCommandWrapper">
            <summary>
            连接Access数据库的命令封装。
            </summary>   
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.#ctor(System.Data.OleDb.OleDbConnection,System.String,System.Data.CommandType)">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Access.AccessCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">OleDb数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句。</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.#ctor(System.Data.OleDb.OleDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            使用查询字符串和命令类型初使化 <see cref="T:System.Database.Access.AccessCommandWrapper"/> 类的实例。
            </summary>
            <param name="connection">OleDb数据库连接</param>
            <param name="commandText">存储过程名称或者查询语句</param>
            <param name="commandType">命令类型，<see crer="CommandType"/> 值之一。</param>
            <param name="parameters">参数值。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddInParameter(System.String,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object,System.String,System.Data.DataRowVersion)">
            <summary>
            在继承类中实现时，为命令增加一个输入类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddOutParameter(System.String)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个输出类型的参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="intSize">列的长度。</param>
            <param name="objValue">参数的值。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion">描述 System.Data.DataRow 的版本。<see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="size">列的长度。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
            <param name="nullable">参数是否接受空值。</param>
            <param name="precision">用于表示 <paramref name="value"/> 的最大位数。</param>
            <param name="scale">将 <paramref name="value"/> 解析为的小数位数。</param>
            <param name="sourceColumn">对应 <paramref name="value"/> 的源列名称。</param>
            <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion"/> 值之一。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objValue">参数值</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="dbType">参数类型 <see cref="T:System.Data.DbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            在继承类中实现时，为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.Data.IDataParameter)">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameter">IDataParameter参数</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.Data.IDataParameter[])">
            <summary>
            在继承类中实现时，为命令增加一组参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="parameters">一组(IDataParameter)参数</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddCursorOutParameter(System.String)">
            <summary>
            为命令增加一个输出的游标类型的参数。(OleDb没有游标类型，Do Nothing !)
            </summary>
            <param name="CursorName">游标类型参数的名称。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.GetParameter(System.String)">
            <summary>
            在继承类中实现时，返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.GetParameter(System.Int32)">
            <summary>
            在继承类中实现时，返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.GetParameterValue(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <returns>参数的值。</returns>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            设置指定名称 <paramref name="name"/> 的参数的值。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="objValue">参数的新值。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.Dispose">
            <summary>
            清除所占用的资源。
            </summary>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddInParameter(System.String,System.Data.OleDb.OleDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddInParameter(System.String,System.Data.OleDb.OleDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输入类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddOutParameter(System.String,System.Data.OleDb.OleDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOleDbType">参数OleDbType类型</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddOutParameter(System.String,System.Data.OleDb.OleDbType,System.Int32)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="intSize">列的长度</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOleDbType">参数OleDbType类型</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType,System.Int32,System.Object)">
            <summary>
            为命令增加一个输出类型的参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="objDbType">参数System.Data.DbType类型</param>
            <param name="objOleDbType">参数OleDbType类型</param>
            <param name="intSize">列的长度</param>
            <param name="objValue">参数的值</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.String,System.Data.OleDb.OleDbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数 <see cref="T:System.Data.IDataParameter"/>。
            </summary>
            <param name="strName">参数名称。</param>
            <param name="oledbType">参数类型 <see cref="T:System.Data.OleDb.OleDbType"/> 值之一。</param>
            <param name="objValue">参数的值。</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.String,System.Data.OleDb.OleDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="oledbType">参数类型(OleDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.OleDb.OleDbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            为命令增加一个参数
            </summary>
            <param name="strName">参数名称</param>
            <param name="dbType">参数类型(DbType)</param>
            <param name="oledbType">参数类型(OleDbType)</param>
            <param name="objValue">参数的值</param>
            <param name="intSize">列的长度</param>
            <param name="direction">参数方向 <see cref="T:System.Data.ParameterDirection"/> 值之一。</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.Data.OleDb.OleDbParameter)">
            <summary>
            为命令增加一个OleDbParameter参数，扩展方法
            </summary>
            <param name="oledbParameter">表示 System.Data.OleDbClient.OleDbCommand 的参数，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddParameter(System.Data.OleDb.OleDbParameter[])">
            <summary>
            为命令增加一组OleDbParameter参数，扩展方法
            </summary>
            <param name="oledbParameters">表示 System.Data.OleDbClient.OleDbCommand 的参数数组，并可表示它到 System.Data.DataColumn的映射</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.GetOleDbParameter(System.String)">
            <summary>
            返回指定名称 <paramref name="name"/> 的参数
            </summary>
            <param name="strName">参数名称</param>
            <returns>参数名称对应的参数</returns>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.GetOleDbParameter(System.Int32)">
            <summary>
            返回指定索引位置的参数(从零开始)
            </summary>
            <param name="intIndex">索引的位置(从零开始)</param>
            <returns>参数索引位置对应的参数</returns>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddCommandParameters(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbParameter[])">
            <summary>
            循环添加OleDbCommand中命令文本参数
            </summary>
            <param name="cmd">OleDbCommand执行命令</param>
            <param name="cmdParms">命令参数集</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.AddCommandParameters(System.Data.OleDb.OleDbCommand,System.Data.IDataParameter[])">
            <summary>
            循环添加OleDbCommand中命令文本参数
            </summary>
            <param name="cmd">OleDbCommand执行命令</param>
            <param name="cmdParms">命令接口参数集</param>
        </member>
        <member name="M:System.Database.Access.AccessCommandWrapper.CreateCommand(System.Data.OleDb.OleDbConnection,System.String,System.Data.CommandType)">
            <summary>
            创建一个OleDbCommand命令
            </summary>
            <param name="connection">一个数据库连接OleDbConnection</param>
            <param name="commandText">命令文本</param>
            <param name="commandType">命令类型</param>
            <returns>返回一个一个OleDbCommand命令</returns>
        </member>
        <member name="P:System.Database.Access.AccessCommandWrapper.Command">
            <summary>
            在继承类中实现时，获取被封装的 <see cref="T:System.Data.IDbCommand"/>。
            </summary>
            被封装的  <see cref="T:System.Data.IDbCommand"/>。默认值是 <see langword="null"/>。
        </member>
    </members>
</doc>
