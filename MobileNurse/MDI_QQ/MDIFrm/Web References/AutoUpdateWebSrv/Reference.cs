//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34011
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.34011 版自动生成。
// 
#pragma warning disable 1591

namespace TJ.CHSIS.AutoUpdateWebSrv {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AutoUpdateWebSrvSoap", Namespace="http://tempuri.org/")]
    public partial class AutoUpdateWebSrv : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckUpdatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerFileListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AutoUpdateWebSrv() {
            this.Url = global::TJ.CHSIS.Properties.Settings.Default.MDIFrm_AutoUpdateWebSrv_AutoUpdateWebSrv;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckUpdatedCompletedEventHandler CheckUpdatedCompleted;
        
        /// <remarks/>
        public event GetServerFileListCompletedEventHandler GetServerFileListCompleted;
        
        /// <remarks/>
        public event GetServerFileCompletedEventHandler GetServerFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUpdated", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckUpdated(string appCode, System.Data.DataSet ds) {
            object[] results = this.Invoke("CheckUpdated", new object[] {
                        appCode,
                        ds});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUpdatedAsync(string appCode, System.Data.DataSet ds) {
            this.CheckUpdatedAsync(appCode, ds, null);
        }
        
        /// <remarks/>
        public void CheckUpdatedAsync(string appCode, System.Data.DataSet ds, object userState) {
            if ((this.CheckUpdatedOperationCompleted == null)) {
                this.CheckUpdatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUpdatedOperationCompleted);
            }
            this.InvokeAsync("CheckUpdated", new object[] {
                        appCode,
                        ds}, this.CheckUpdatedOperationCompleted, userState);
        }
        
        private void OnCheckUpdatedOperationCompleted(object arg) {
            if ((this.CheckUpdatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUpdatedCompleted(this, new CheckUpdatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerFileList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetServerFileList(string appCode) {
            object[] results = this.Invoke("GetServerFileList", new object[] {
                        appCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerFileListAsync(string appCode) {
            this.GetServerFileListAsync(appCode, null);
        }
        
        /// <remarks/>
        public void GetServerFileListAsync(string appCode, object userState) {
            if ((this.GetServerFileListOperationCompleted == null)) {
                this.GetServerFileListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerFileListOperationCompleted);
            }
            this.InvokeAsync("GetServerFileList", new object[] {
                        appCode}, this.GetServerFileListOperationCompleted, userState);
        }
        
        private void OnGetServerFileListOperationCompleted(object arg) {
            if ((this.GetServerFileListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerFileListCompleted(this, new GetServerFileListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetServerFile(string appCode, string fileName) {
            object[] results = this.Invoke("GetServerFile", new object[] {
                        appCode,
                        fileName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetServerFileAsync(string appCode, string fileName) {
            this.GetServerFileAsync(appCode, fileName, null);
        }
        
        /// <remarks/>
        public void GetServerFileAsync(string appCode, string fileName, object userState) {
            if ((this.GetServerFileOperationCompleted == null)) {
                this.GetServerFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerFileOperationCompleted);
            }
            this.InvokeAsync("GetServerFile", new object[] {
                        appCode,
                        fileName}, this.GetServerFileOperationCompleted, userState);
        }
        
        private void OnGetServerFileOperationCompleted(object arg) {
            if ((this.GetServerFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerFileCompleted(this, new GetServerFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckUpdatedCompletedEventHandler(object sender, CheckUpdatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUpdatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUpdatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetServerFileListCompletedEventHandler(object sender, GetServerFileListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetServerFileCompletedEventHandler(object sender, GetServerFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591