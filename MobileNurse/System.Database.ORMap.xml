<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Database.ORMap</name>
    </assembly>
    <members>
        <member name="M:System.Database.ORMap.Common.ConstructWhereCondition(System.String[]@,System.Database.DbCore)">
            <summary>
            根据列构建SQL语句(WHERE AND)条件信息
            </summary>
            <param name="arrColumn">条件列，不可为null</param>
            <param name="dbCore">数据库访问核心类实例</param>
            <returns>SQL语句(WHERE AND)条件信息</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ConstructWhereCondition(System.String[]@,System.Database.DbCore,System.Database.Extend.Operation[],System.Object[])">
            <summary>
            根据列构建SQL语句(WHERE AND)条件信息
            </summary>
            <param name="arrColumn">条件列，不可为null</param>
            <param name="dbCore">数据库访问核心类实例</param>
            <param name="arrOperate">对应比较操作符</param>
            <param name="colValues">条件列对应值</param>
            <returns>SQL语句(WHERE AND)条件信息</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ConstructOrderBySql(System.String[],System.Database.Extend.OrderDirection[])">
            <summary>
            根据列构建SQL语句(ORDER BY)排序条件信息
            </summary>
            <param name="arrSortColumn">排序条件列数组</param>
            <param name="arrSort">对应排序方向(OrderDirection)</param>
            <returns>ORDER BY排序条件语句</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ConstructOrderBySql(System.String[],System.Database.Extend.SortDirection[])">
            <summary>
            根据列构建SQL语句(ORDER BY)排序条件信息
            </summary>
            <param name="arrSortColumn">排序条件列数组</param>
            <param name="orderArray">对应排序方向(SortDirection)</param>
            <returns>ORDER BY排序条件语句</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ParserOperation(System.Database.Extend.Operation)">
            <summary>
            解析比较操作符对应的操作符号
            </summary>
            <param name="oper">比较操作符</param>
            <returns>比较操作符对应的操作符号</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ParserSortDirection(System.Database.Extend.SortDirection)">
            <summary>
            解析Order By 排序方向
            </summary>
            <param name="sort">排序方向</param>
            <returns>排序方向符号</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ParserSortDirection(System.Database.Extend.OrderDirection)">
            <summary>
            解析Order By 排序方向
            </summary>
            <param name="sort">排序方向</param>
            <returns>排序方向符号</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.GetFormatEntityPrivateField(System.String)">
            <summary>
            获取实体内部对应格式的私有字段，即实体私有字段格式的解析
            </summary>
            <param name="strField">实体公共属性</param>
            <returns>实体公共属性所对应格式的私有字段</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ConstructInsertSqlColumn(System.String[])">
            <summary>
            根据实体公共属性构造SQL列字段
            </summary>
            <param name="arrColumn">实体公共属性，不可为null</param>
            <returns>SQL列字段</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ConstructInsertSqlParamValues(System.String[],System.Database.DbCore)">
            <summary>
            根据实体公共属性构造SQL语句 Values 列字段
            </summary>
            <param name="arrColumn">实体公共属性，不可为null</param>
            <param name="dbCore">数据库访问核心类实例</param>
            <returns>SQL语句 Values 列字段</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ReplaceToJsonKey(System.String)">
            <summary>
            将原字符串转换为Json格式的键字符，不含,:'
            [-_x005B_ ┋ ]-_x005D_ ┋ {-_x007B_ ┋ }-_x007D_ ┋ ,-_x002C_ ┋ :-_x003A_ ┋ '-_x0027_
            </summary>
            <param name="source">原字符串</param>
            <returns>Json格式的键值字符</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ReplaceFromJsonKey(System.String)">
            <summary>
            将Json格式的键字符转换为原字符，目前仅,:'
            [-_x005B_ ┋ ]-_x005D_ ┋ {-_x007B_ ┋ }-_x007D_ ┋ ,-_x002C_ ┋ :-_x003A_ ┋ '-_x0027_
            </summary>
            <param name="json">Json格式的键值字符</param>
            <returns>还原原字符串</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ReplaceToJsonValue(System.String)">
            <summary>
            将原字符串转换为Json格式的值字符，不含,'
            [-_x005B_ ┋ ]-_x005D_ ┋ {-_x007B_ ┋ }-_x007D_ ┋ ,-_x002C_ ┋ :-_x003A_ ┋ '-_x0027_
            </summary>
            <param name="source">原字符串</param>
            <returns>Json格式的键值字符</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ReplaceFromJsonValue(System.String)">
            <summary>
            将Json格式的值字符转换为原字符，目前仅,'(注'其实也可以解析，但却别扭)
            [-_x005B_ ┋ ]-_x005D_ ┋ {-_x007B_ ┋ }-_x007D_ ┋ ,-_x002C_ ┋ :-_x003A_ ┋ '-_x0027_
            </summary>
            <param name="json">Json格式的键值字符</param>
            <returns>还原原字符串</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ParseEntityColumn(System.String)">
            <summary>
            解析表字段列，如果是EntityColumn列则取第二个值，即FieldName；否则返回原字符串
            </summary>
            <param name="entityColumn">表实体字段列信息描述,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>字段列</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ParseEntityColumn(System.String[])">
            <summary>
            解析表字段列数组，如果是EntityColumn列则取第二个值，即FieldName；否则返回原字符串
            </summary>
            <param name="arrEntityColumn">表实体字段列信息描述数组,格式为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>纯字段列数组</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ParseEntityColumn(System.Collections.Hashtable)">
            <summary>
            解析表字段列/值Hashtable，如果列是EntityColumn列则取第二个值，即FieldName；否则返回原字符串
            </summary>
            <param name="hashEntityColumn">表实体字段列/值信息描述Hashtable,key格式可为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>纯字段列/值Hashtable</returns>
        </member>
        <member name="M:System.Database.ORMap.Common.ParseEntityColumn(System.Collections.Specialized.ListDictionary)">
            <summary>
            解析表字段列/值ListDictionary，如果列是EntityColumn列则取第二个值，即FieldName；否则返回原字符串
            </summary>
            <param name="listEntityColumn">表实体字段列/值信息描述ListDictionary,key格式可为:"EntityTableName┋FieldName┋FieldTypeFullName(如:System.String)"</param>
            <returns>纯字段列/值ListDictionary</returns>
        </member>
        <member name="T:System.Database.ORMap.ORMaps`2">
            <summary>
            Entity, Entitys
            </summary>
            <typeparam name="Entity">BaseEntity</typeparam>
            <typeparam name="Entitys">Entitys</typeparam>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.#ctor(`0,`1)">
            <summary>
            构造函数，初始化_entity，用于GetEntitys方法，返回获取实体集的值
            实体为地址引用
            </summary>
            <param name="entity">传入的要取值实体实例信息</param>
            <param name="entitys">要返回获取实体集实例</param>
        </member>
        <member name="F:System.Database.ORMap.ORMaps`2.CurrentDatabaseType">
            <summary>
            当前数据库连接类型
            </summary>
        </member>
        <member name="F:System.Database.ORMap.ORMaps`2.CurrentConnectionString">
            <summary>
            当前数据库连接字符串
            </summary>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetCurrentDatabaseType">
            <summary>
            获取当前数据库连接类型
            </summary>
            <returns>当前数据库连接类型</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetCurrentConnectionString">
            <summary>
            获取当前数据库连接字符串
            </summary>
            <returns>数据库连接字符串</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetCurrentSchema">
            <summary>
            获取当前Schema/模式名（如设置）
            </summary>
            <returns>当前Schema/模式名（如有此设置）</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.InitDatabaseParams">
            <summary>
            初始化数据库连接相关等
            </summary>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetDBTypeByFullName(System.String)">
            <summary>
            获取 System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集
            </summary>
            <param name="strTypeFullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <returns>System.Data.DbType</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetEntitys(System.Collections.Specialized.ListDictionary)">
            <summary>
            根据ListDictitionary实体条件值获取实体信息,通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="list">获取实体信息的条件值</param>
            <returns>返回类型为 Entitys 实体集信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetEntitys(System.Collections.Specialized.ListDictionary,System.Database.Extend.Operation)">
            <summary>
            根据ListDictitionary实体条件值获取实体信息,通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="list">获取实体信息的条件值</param>
            <param name="operate">比较操作符</param>
            <returns>返回类型为 Entitys 实体集信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetEntitys(System.Collections.Specialized.ListDictionary,System.Database.Extend.Operation[])">
            <summary>
            根据ListDictitionary实体条件值获取实体信息,通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="list">获取实体信息的条件值</param>
            <param name="arrOperate">对应比较操作符</param>
            <returns>返回类型为 Entitys 实体集信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetEntitys(System.Collections.Specialized.ListDictionary,System.Database.Extend.Operation[],System.String[])">
            <summary>
            根据ListDictitionary实体条件值获取实体信息,通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="listColAndValue">获取实体信息的条件值</param>
            <param name="arrOperate">对应比较操作符</param>
            <param name="orderColumns">排序字段数组</param>
            <returns>返回类型为 Entitys 实体集信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetEntitys(System.Collections.Specialized.ListDictionary,System.Database.Extend.Operation[],System.String[],System.Database.Extend.OrderDirection[])">
            <summary>
            根据ListDictitionary实体条件值获取实体信息,通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="listColAndValue">获取实体信息的条件值</param>
            <param name="arrOperate">对应比较操作符</param>
            <param name="arrOrderColumn">排序字段数组</param>
            <param name="arrOrder">对应排序方向(OrderDirection)</param>
            <returns>返回类型为 Entitys 实体集信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetEntitys(System.Collections.Specialized.ListDictionary,System.Database.Extend.Operation[],System.String[],System.Database.Extend.SortDirection[])">
            <summary>
            根据ListDictitionary实体条件值获取实体信息,通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="listColAndValue">获取实体信息的条件值</param>
            <param name="arrOperate">对应比较操作符</param>
            <param name="arrSortColumn">排序字段数组</param>
            <param name="arrSort">对应排序方向(SortDirection)</param>
            <returns>返回类型为 Entitys 实体集信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetEntitys(System.Database.DbCore,System.Collections.Specialized.ListDictionary,System.Database.Extend.Operation[],System.String[],System.Database.Extend.OrderDirection[])">
            <summary>
            根据ListDictitionary实体条件值获取实体信息,通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(用于DbCore事务里)</param>
            <param name="listColAndValue">获取实体信息的条件值</param>
            <param name="arrOperate">对应比较操作符</param>
            <param name="arrOrderColumn">排序字段数组</param>
            <param name="arrOrder">对应排序方向(OrderDirection)</param>
            <returns>返回类型为 Entitys 实体集信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetEntitys(System.Database.DbCore,System.Collections.Specialized.ListDictionary,System.Database.Extend.Operation[],System.String[],System.Database.Extend.SortDirection[])">
            <summary>
            根据ListDictitionary实体条件值获取实体信息,通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(用于DbCore事务里)</param>
            <param name="listColAndValue">获取实体信息的条件值</param>
            <param name="arrOperate">对应比较操作符</param>
            <param name="arrSortColumn">排序字段数组</param>
            <param name="arrSort">对应排序方向(SortDirection)</param>
            <returns>返回类型为 Entitys 实体集信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.ToDataTable">
            <summary>
            将当前实体集实例(Entitys entitys)转化到内存中一个数据表
            </summary>
            <returns>与实体集数据对等的内存中一个数据表</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.Save">
            <summary>
            批量保存实体集中的对象信息 比较实体前后的值(并与实体默认初始值比较确定保存哪些字段)，若有与主键记录相同的就更新，没有就插入
            </summary>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.SaveAll">
            <summary>
            批量保存实体集中的对象信息 比较实体前后的值，若有与主键字段记录相同的就更新，没有就插入，保存全部字段
            </summary>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.SaveEx">
            <summary>
            批量保存实体集中的对象信息 比较实体前后的值，若有与主键字段记录相同的就更新，没有就插入，保存全部字段
            其中若与实体字段初始值相同则置该字段为空
            </summary>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.Delete">
            <summary>
            通过实体(EntitysCodeGenerate生成带数据访问的实体)映射及主键约束删除表中一条数据
            </summary>
            <returns>执行删除并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.DelInsert">
            <summary>
            批量保存实体集中的对象信息,先Delete后Insert 比较实体前后默认的初始值,且不插入与实体初始值相同的字段值
            </summary>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.DelInsert(System.String)">
            <summary>
            批量保存实体集中的对象信息,先Delete后Insert 比较实体前后默认的初始值,且不插入与实体初始值相同的字段值
            </summary>
            <param name="strConditionKey">指定作为Delete依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.DelInsert(System.String[])">
            <summary>
            批量保存实体集中的对象信息,先Delete后Insert 比较实体前后默认的初始值,且不插入与实体初始值相同的字段值
            </summary>
            <param name="arrConditionKey">指定作为Delete依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.DelInsertEx">
            <summary>
            批量保存实体集中的对象信息,先Delete后Insert 插入所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.DelInsertEx(System.String)">
            <summary>
            批量保存实体集中的对象信息,先Delete后Insert 插入所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="strConditionKey">指定作为Delete依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.DelInsertEx(System.String[])">
            <summary>
            批量保存实体集中的对象信息,先Delete后Insert 插入所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="arrConditionKey">指定作为Delete依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.DelInsertAll">
            <summary>
            批量保存实体集中的对象信息,先Delete后Insert 插入全部字段
            </summary>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.DelInsertAll(System.String)">
            <summary>
            批量保存实体集中的对象信息,先Delete后Insert 插入全部字段
            </summary>
            <param name="strConditionKey">指定作为Delete依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.DelInsertAll(System.String[])">
            <summary>
            批量保存实体集中的对象信息,先Delete后Insert 插入全部字段
            </summary>
            <param name="arrConditionKey">指定作为Delete依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.AddInParameter(System.Database.DbCore,System.Database.DBCommandWrapper,System.String,System.Object,System.String)">
            <summary>
            为命令增加一个输入类型的参数，统一调用的静态方法，方便若要修改，统一修改(主要是字段类型的映射)
            </summary>
            <param name="dbCore">DbCore</param>
            <param name="cmd">DBCommandWrapper</param>
            <param name="strColumnName">数据库字段</param>
            <param name="objValue">数据库字段所对应的值</param>
            <param name="strColumnCSharpType">C# System.Type 的完全限定名称</param>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetTableName">
            <summary>
            泛型实体的名称，映射为表名
            </summary>
            <returns>泛型实体的名称，映射为表名</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetColumnsNameReturnArrayList">
            <summary>
            获取对应泛型实体公共属性的名称,并以ArrayList数据的形式返回
            </summary>
            <returns>获取对应泛型实体公共属性的名称</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetColumnsName">
            <summary>
            获取对应泛型实体公共属性的名称
            </summary>
            <returns>获取对应泛型实体公共属性的名称</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetColumnsName(System.Collections.Hashtable)">
            <summary>
            获取Hashtable对应的键值Key,且该值在泛型实体中存在
            </summary>
            <param name="hash">Hashtable</param>
            <returns>Hashtable对应的键值Key</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetColumnsName(System.Collections.Specialized.ListDictionary)">
            <summary>
            获取ListDictionary对应的键值Key,且该值在泛型实体中存在
            </summary>
            <param name="list">ListDictionary</param>
            <returns>ListDictionary对应的键值Key</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetColumnsTypeFullName">
            <summary>
            获取泛型实体的所有公共属性类型全称
            </summary>
            <returns>数组对应泛型实体公共属性类型全称</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetColumnsTypeFullName(System.String[])">
            <summary>
            获取arrColumn对应的泛型实体字段类型全称
            </summary>
            <param name="arrColumn">(Hashtable、ListDictionary对应的键值Key)arrColumn对应泛型实体字段,且该值在泛型实体中存在</param>
            <returns>arrColumn对应的泛型实体字段类型全称</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetColumnsAllValue">
            <summary>
            获取泛型实体的各私有字段所对应的值
            </summary>
            <returns>泛型实体的各私有字段所对应的值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetColumnsAllValue(System.Collections.Hashtable,System.String[])">
            <summary>
            获取hash对应泛型实体的各私有字段所对应的值
            </summary>
            <param name="hash">Hashtable</param>
            <param name="arrColumn">Hashtable对应的键值Key,且该值在泛型实体中存在</param>
            <returns>hash对应泛型实体的各私有字段所对应的值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetColumnsAllValue(System.Collections.Specialized.ListDictionary,System.String[])">
            <summary>
            获取hash对应泛型实体的各私有字段所对应的值
            </summary>
            <param name="list">ListDictionary</param>
            <param name="arrColumn">ListDictionary对应的键值Key,且该值在泛型实体中存在</param>
            <returns>hash对应泛型实体的各私有字段所对应的值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetEntitys(System.String,System.String[],System.String[],System.Object[],System.String[],System.Database.Extend.Operation[],System.String[],System.Database.Extend.OrderDirection[])">
            <summary>
            通过实体条件字段及字段值获取该实体对应的实体信息
            </summary>
            <param name="strTableName">映射表名</param>
            <param name="arrColumn">映射表条件字段</param>
            <param name="arrColumnCSharpType">映射表条件字段类型</param>
            <param name="objColumnValue">映射表条件字段所对应的值</param>
            <param name="arrAllColumn">映射实体字段</param>
            <param name="arrOperate">比较操作符</param>
            <param name="arrSortColumn">排序字段数组</param>
            <param name="arrSort">对应排序方向</param>
            <returns>实体对应的实体集信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.GetEntitys(System.Database.DbCore,System.String,System.String[],System.String[],System.Object[],System.String[],System.Database.Extend.Operation[],System.String[],System.Database.Extend.OrderDirection[])">
            <summary>
            通过实体条件字段及字段值获取该实体对应的实体信息
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(用于DbCore事务里)</param>
            <param name="strTableName">映射表名</param>
            <param name="arrColumn">映射表条件字段</param>
            <param name="arrColumnCSharpType">映射表条件字段类型</param>
            <param name="objColumnValue">映射表条件字段所对应的值</param>
            <param name="arrAllColumn">映射实体字段</param>
            <param name="arrOperate">比较操作符</param>
            <param name="arrSortColumn">排序字段数组</param>
            <param name="arrSort">对应排序方向</param>
            <returns>实体对应的实体集信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.Save1">
            <summary>
            批量保存实体集中的对象信息 比较实体前后的值(并与实体默认初始值比较确定保存哪些字段)，若有与主键记录相同的就更新，没有就插入
            </summary>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.SaveAll1">
            <summary>
            批量保存实体集中的对象信息 比较实体前后的值，若有与主键字段记录相同的就更新，没有就插入，保存全部字段
            </summary>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMaps`2.SaveEx1">
            <summary>
            批量保存实体集中的对象信息 比较实体前后的值，若有与主键字段记录相同的就更新，没有就插入，保存全部字段
            其中若与实体字段初始值相同则置该字段为空
            </summary>
            <returns>受影响的行数</returns>
        </member>
        <member name="T:System.Database.ORMap.ORMap`1">
            <summary>
            单表的增、删、改、查
            </summary>
        </member>
        <member name="F:System.Database.ORMap.ORMap`1.CurrentDatabaseType">
            <summary>
            当前数据库连接类型
            </summary>
        </member>
        <member name="F:System.Database.ORMap.ORMap`1.CurrentConnectionString">
            <summary>
            当前数据库连接字符串
            </summary>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetCurrentDatabaseType">
            <summary>
            获取当前数据库连接类型
            </summary>
            <returns>当前数据库连接类型</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetCurrentConnectionString">
            <summary>
            获取当前数据库连接字符串
            </summary>
            <returns>数据库连接字符串</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetCurrentSchema">
            <summary>
            获取当前Schema/模式名（如设置）
            </summary>
            <returns>当前Schema/模式名（如有此设置）</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.InitDatabaseParams">
            <summary>
            初始化数据库连接相关等
            </summary>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDBTypeByFullName(System.String)">
            <summary>
            获取 System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集
            </summary>
            <param name="strTypeFullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <returns>System.Data.DbType</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.#ctor(`0)">
            <summary>
            构造函数，初始化_entity
            </summary>
            <param name="entity">传入的实体信息</param>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.#ctor(`0,`0)">
            <summary>
            构造函数，初始化_entity，用于GetEntity方法，返回获取实体的值
            实体为地址引用
            </summary>
            <param name="entity">传入的实体信息</param>
            <param name="entity1">要返回获取实体的值</param>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.Collections.Hashtable)">
            <summary>
            获取实体对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="hashCondition">获取数据表信息的条件值</param>
            <returns>返回符合并条件数据表的信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.Collections.Specialized.ListDictionary)">
            <summary>
            获取实体对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="listCondition">获取数据表信息的条件值</param>
            <returns>返回符合并条件数据表的信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String,System.Database.Extend.OrderDirection)">
            <summary>
            获取实体对应表指定排序的信息集，并以数据表的信息形式返回
            </summary>
            <param name="column">排序字段</param>
            <param name="orderDirection">排序方向(OrderDirection)</param>
            <returns>返回符合排序条件数据表的信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String,System.Database.Extend.SortDirection)">
            <summary>
            获取实体对应表指定排序的信息集，并以数据表的信息形式返回
            </summary>
            <param name="column">排序字段</param>
            <param name="sortDirection">排序方向(SortDirection)</param>
            <returns>返回符合排序条件数据表的信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String,System.Database.Extend.OrderDirection,System.String,System.Database.Extend.OrderDirection)">
            <summary>
            获取实体对应表指定排序的信息集，并以数据表的信息形式返回
            </summary>
            <param name="column1">排序字段1</param>
            <param name="order1">排序方向1(OrderDirection)</param>
            <param name="column2">排序字段2</param>
            <param name="order2">排序方向2(OrderDirection)</param>
            <returns>返回符合排序条件数据表的信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String,System.Database.Extend.SortDirection,System.String,System.Database.Extend.SortDirection)">
            <summary>
            获取实体对应表指定排序的信息集，并以数据表的信息形式返回
            </summary>
            <param name="column1">排序字段1</param>
            <param name="sort1">排序方向1</param>
            <param name="column2">排序字段2</param>
            <param name="sort2">排序方向2</param>
            <returns>返回符合排序条件数据表的信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String[],System.Database.Extend.OrderDirection)">
            <summary>
            获取实体对应表指定排序的信息集，并以数据表的信息形式返回
            </summary>
            <param name="arrColumn">排序字段数组</param>
            <param name="orderDirection">排序方向(OrderDirection)</param>
            <returns>返回符合排序条件数据表的信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String[],System.Database.Extend.SortDirection)">
            <summary>
            获取实体对应表指定排序的信息集，并以数据表的信息形式返回
            </summary>
            <param name="arrColumn">排序字段数组</param>
            <param name="sortDirection">排序方向(SortDirection)</param>
            <returns>返回符合排序条件数据表的信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.Collections.Specialized.ListDictionary,System.Database.Extend.Operation[],System.String[],System.Database.Extend.OrderDirection[])">
            <summary>
            获取实体对应表指定排序的信息集，并以数据表的信息形式返回
            </summary>
            <param name="listCondition">获取数据表信息的条件值</param>
            <param name="arrOperate">条件字段名对应比较操作符</param>
            <param name="arrOrderColumn">排序字段数组</param>
            <param name="arrOrder">排序字段对应排序方向(OrderDirection)</param>
            <returns>返回符合排序条件数据表的信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.Collections.Specialized.ListDictionary,System.Database.Extend.Operation[],System.String[],System.Database.Extend.SortDirection[])">
            <summary>
            获取实体对应表指定排序的信息集，并以数据表的信息形式返回
            </summary>
            <param name="listCondition">获取数据表信息的条件值</param>
            <param name="arrOperate">条件字段名对应比较操作符</param>
            <param name="arrSortColumn">排序字段数组</param>
            <param name="arrSort">排序字段对应排序方向</param>
            <returns>返回符合排序条件数据表的信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String,System.Object)">
            <summary>
            获取实体对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="colName">实体字段名</param>
            <param name="colValue">实体字段名对应的相等值</param>
            <returns>返回符合条件的数据表信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String[],System.Object[])">
            <summary>
            获取实体对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="colNames">实体字段名数组</param>
            <param name="colValues">实体字段名数组对应的相等值</param>
            <returns>返回符合条件的数据表信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String,System.Database.Extend.Operation,System.Object)">
            <summary>
            获取实体对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="colName">实体字段名</param>
            <param name="operate">比较操作符</param>
            <param name="colValue">实体字段名对应的值</param>
            <returns>返回符合条件的数据表信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String,System.Database.Extend.Operation,System.Object,System.String,System.Database.Extend.OrderDirection)">
            <summary>
            获取实体对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="colName">实体字段名</param>
            <param name="operate">比较操作符</param>
            <param name="colValue">实体字段名对应的值</param>
            <param name="orderColumn">排序字段</param>
            <param name="orderDirection">对应排序方向</param>
            <returns>返回符合条件的数据表信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String,System.Database.Extend.Operation,System.Object,System.String[],System.Database.Extend.OrderDirection[])">
            <summary>
            获取实体对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="colName">实体字段名</param>
            <param name="operate">比较操作符</param>
            <param name="colValue">实体字段名对应的值</param>
            <param name="orderColumns">排序字段数组</param>
            <param name="orderDirections">对应排序方向数组</param>
            <returns>返回符合条件的数据表信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String[],System.Database.Extend.Operation[],System.Object[],System.String[])">
            <summary>
            获取实体对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="colNames">实体字段名数组</param>
            <param name="operates">比较操作符数组</param>
            <param name="colValues">实体字段名对应的值数组</param>
            <param name="orderColumns">排序字段数组</param>
            <returns>返回符合条件的数据表信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String[],System.Database.Extend.Operation[],System.Object[],System.String[],System.Database.Extend.OrderDirection[])">
            <summary>
            获取实体对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="colNames">实体字段名数组</param>
            <param name="operates">比较操作符数组</param>
            <param name="colValues">实体字段名对应的值数组</param>
            <param name="orderColumns">排序字段数组</param>
            <param name="orderDirections">对应排序方向数组</param>
            <returns>返回符合条件的数据表信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.Database.DbCore,System.String,System.Database.Extend.Operation,System.Object,System.String,System.Database.Extend.OrderDirection)">
            <summary>
            获取实体对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(用于DbCore事务)</param>
            <param name="colName">实体字段名</param>
            <param name="operate">比较操作符</param>
            <param name="colValue">实体字段名对应的值</param>
            <param name="orderColumn">排序字段</param>
            <param name="orderDirection">对应排序方向</param>
            <returns>返回符合条件的数据表信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.Database.DbCore,System.String[],System.Database.Extend.Operation[],System.Object[],System.String[],System.Database.Extend.OrderDirection[])">
            <summary>
            获取实体对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(用于DbCore事务)</param>
            <param name="colNames">实体字段名数组</param>
            <param name="operates">比较操作符数组</param>
            <param name="colValues">实体字段名对应的值数组</param>
            <param name="orderColumns">排序字段数组</param>
            <param name="orderDirections">对应排序方向数组</param>
            <returns>返回符合条件的数据表信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntityByAny">
            <summary>
            通过实体信息并与实体初始值的比较，凡与初始值比较不同的值作为实体的获取条件，返回相应的一条实体信息
            </summary>
            <returns>返回类型为 Entity 单条实体信息(若符合条件的记录多条，则返回第一条),没有返回为null</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntity">
            <summary>
            通过实体映射及主键值获取表中一条数据信息
            </summary>
            <returns>返回类型为 Entity 单条实体信息(若符合条件的记录多条，则返回第一条),没有返回为null</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntity(System.Database.DbCore)">
            <summary>
            通过实体映射及主键值获取表中一条数据信息
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例</param>
            <returns>返回类型为 Entity 单条实体信息(若符合条件的记录多条，则返回第一条),没有返回为null</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntity(System.Collections.Hashtable)">
            <summary>
            根据HashTable实体条件值获取实体信息
            </summary>
            <param name="hash">获取实体信息的条件值</param>
            <returns>返回类型为 Entity 单条实体信息(若符合条件的记录多条，则返回第一条),没有返回为null</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntity(System.Collections.Specialized.ListDictionary)">
            <summary>
            根据ListDictitionary实体条件值获取实体信息,通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="list">获取实体信息的条件值</param>
            <returns>返回类型为 Entity 单条实体信息(若符合条件的记录多条，则返回第一条),没有返回为null</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntity(System.Database.DbCore,System.Collections.Specialized.ListDictionary)">
            <summary>
            根据ListDictitionary实体条件值获取实体信息,通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(用于DbCore事务里)</param>
            <param name="list">获取实体信息的条件值</param>
            <returns>返回类型为 Entity 单条实体信息(若符合条件的记录多条，则返回第一条),没有返回为null</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Insert(System.Database.DbCore)">
            <summary>
            通过实体映射插入表中一条数据，比较实体前后默认的初始值，插入与初始值不同的字段
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(可用于DbCore事务,执行命令先(Open)打开数据库连接)</param>
            <returns>执行插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.InsertAll(System.Database.DbCore)">
            <summary>
            通过实体映射插入表中一条数据，插入全部字段
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(可用于DbCore事务,执行命令先(Open)打开数据库连接)</param>
            <returns>执行插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.InsertEx(System.Database.DbCore)">
            <summary>
            通过实体映射插入表中一条数据(插入所有字段其中若与实体字段初始值相同则置该字段为空)
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(可用于DbCore事务,执行命令先(Open)打开数据库连接)</param>
            <returns>执行插入并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.InsertEx">
            <summary>
            通过实体映射插入表中一条数据(插入所有字段其中若与实体字段初始值相同则置该字段为空)
            </summary>
            <returns>执行插入数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Insert">
            <summary>
            通过实体映射插入表中一条数据，插入全部字段
            </summary>
            <returns>执行插入数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Insert(System.Collections.Hashtable)">
            <summary>
            通过HashTable表的键值数据信息映射插入表中一条数据，插入数据为HashTable中的数据
            </summary>
            <param name="hash">Hashtable</param>
            <returns>执行插入数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Insert(System.Collections.Specialized.ListDictionary)">
            <summary>
            通过ListDictionary表的键值数据信息映射插入表中一条数据，插入数据为ListDictionary中的数据，通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="list">ListDictionary</param>
            <returns>执行插入数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Insert(`0)">
            <summary>
            通过实体映射插入表中一条数据，插入与初始值不同的字段
            </summary>
            <param name="entity">实体默认初始值</param>
            <returns>执行插入数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Update(System.Database.DbCore)">
            <summary>
            通过实体映射及主键约束更新表中一条数据，并与比较实体初始值比较，若内容不同则更新之，否则不更新
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(可用于DbCore事务,执行命令先(Open)打开数据库连接)</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.UpdateAll(System.Database.DbCore)">
            <summary>
            通过实体映射及主键条件更新表中一条数据，更新全部字段
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(可用于DbCore事务,执行命令先(Open)打开数据库连接)</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.UpdateEx(System.Database.DbCore)">
            <summary>
            通过实体映射及主键条件更新表中一条数据(更新所有字段,其中若与实体字段初始值相同则置该字段为空)
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(可用于DbCore事务,执行命令先(Open)打开数据库连接)</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.UpdateEx">
            <summary>
            通过实体映射及主键条件更新表中一条数据(更新所有字段,其中若与实体字段初始值相同则置该字段为空)
            </summary>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Update">
            <summary>
            通过实体映射及主键条件更新表中一条数据，更新全部字段
            </summary>
            <returns>执行更新数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Update(`0)">
            <summary>
            通过实体映射及主键约束更新表中一条数据，并与比较实体初始值比较，若内容不同则更新之，否则不更新
            </summary>
            <param name="entity">实体默认初始值</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Update(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            根据HashTable更新条件更新实体映射表对应的记录
            </summary>
            <param name="hashCondition">更新条件</param>
            <param name="hashFieldValue">更新字段</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Update(System.Collections.Specialized.ListDictionary,System.Collections.Specialized.ListDictionary)">
            <summary>
            根据ListDictionary更新条件更新实体映射表对应的记录
            </summary>
            <param name="listCondition">更新条件</param>
            <param name="listFieldValue">更新字段</param>
            <returns>执行更新并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Delete">
            <summary>
            通过实体映射及主键约束删除表中一条数据
            </summary>
            <returns>执行删除并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Delete(System.Collections.Hashtable)">
            <summary>
            根据条件信息值删除指定符合条件的信息值
            </summary>
            <param name="hash">删除条件Hashtable</param>
            <returns>执行删除数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Delete(System.Collections.Specialized.ListDictionary)">
            <summary>
            根据条件信息值删除指定符合条件的信息值,通常包含 10 个或 10 个以下项的集合,建议这时使用
            </summary>
            <param name="list">删除条件ListDictionary</param>
            <returns>执行删除数据并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.SaveByAny(`0,`0,`0)">
            <summary>
            保存 比较实体前后的值，若有与现在实体唯一记录相同的就更新，没有就插入，且不保存与实体初始值相同的字段值
            前提条件当前实体字段所赋值必须唯一，否则获取记录为多条返回多条更新将会产生不正确的结果，更新多条记录等问题
            </summary>
            <param name="entity">实体默认初始值</param>
            <param name="entityCondition">更新或插入的实体唯一条件实体</param>
            <param name="entityOld">根据实体任何唯一条件获取现有数据库的记录</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.SaveByAny(`0,`0)">
            <summary>
            保存 比较实体前后的值，若有与现在实体唯一记录相同的就更新，没有就插入，且不保存与实体初始值相同的字段值
            前提条件当前实体字段所赋值必须唯一，否则获取记录为多条返回多条更新将会产生不正确的结果，更新多条记录等问题
            </summary>
            <param name="entity">实体默认初始值</param>
            <param name="entityCondition">更新或插入的实体唯一条件实体</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Save(System.Database.DbCore)">
            <summary>
            保存 比较实体前后的值(并与实体默认初始值比较确定保存哪些字段)，若有与主键记录相同的就更新，没有就插入
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(可用于DbCore事务,执行命令先(Open)打开数据库连接)</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.SaveAll(System.Database.DbCore)">
            <summary>
            保存全部字段 比较实体前后的值，若有与主键记录相同的就更新，没有就插入
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(可用于DbCore事务,执行命令先(Open)打开数据库连接)</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.SaveEx(System.Database.DbCore)">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与主键记录相同的就更新，没有就插入
            保存所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(可用于DbCore事务,执行命令先(Open)打开数据库连接)</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.SaveEx">
            <summary>
            保存 比较实体(EntitysCodeGenerate生成带数据访问的实体)前后的值，若有与主键记录相同的就更新，没有就插入
            保存所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.SaveAll(`0)">
            <summary>
            保存全部字段 比较实体前后的值，若有与主键记录相同的就更新，没有就插入
            </summary>
            <param name="entityOld">根据主键获取现有数据库的记录,用于确定是更新或插入</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Save(`0)">
            <summary>
            [类似SaveAll的重载方法][老方法,以后可能删之]
            </summary>
            <param name="entityOld">主键获取现有数据库的记录</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.SaveAll">
            <summary>
            保存全部字段 比较实体前后的值，若有与主键记录相同的就更新，没有就插入
            </summary>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Save(`0,`0)">
            <summary>
            保存 比较实体前后的值(并与实体默认初始值比较确定保存哪些字段)，若有与主键记录相同的就更新，没有就插入
            </summary>
            <param name="entity">实体默认初始值，即刚刚(new)出来的实体</param>
            <param name="entityOld">根据主键获取现有数据库的记录,用于确定是更新或插入</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Save1(`0)">
            <summary>
            保存 比较实体前后的值(并与实体默认初始值比较确定保存哪些字段)，若有与主键记录相同的就更新，没有就插入
            </summary>
            <param name="entity">实体默认初始值，即刚刚(new)出来的实体</param>
            <returns>执行更新或插入数据操作并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Save(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            保存 比较保存条件对应的字段，若该实体对应的表有与保存条件相同记录的就更新，没有就插入
            </summary>
            <param name="hashCondition">保存条件</param>
            <param name="hashFieldValue">保存字段</param>
            <returns></returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Save(System.Collections.Specialized.ListDictionary,System.Collections.Specialized.ListDictionary)">
            <summary>
            保存 比较保存条件对应的字段，若该实体对应的表有与保存条件相同记录的就更新，没有就插入
            </summary>
            <param name="listCondition">保存条件</param>
            <param name="listFieldValue">保存字段</param>
            <returns></returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.DelInsert(`0)">
            <summary>
            先Delete后Insert 比较实体前后默认的初始值,且不插入与实体初始值相同的字段值
            </summary>
            <param name="entity">实体默认初始值</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.DelInsert">
            <summary>
            先Delete后Insert 比较实体前后默认的初始值,且不插入与实体初始值相同的字段值
            </summary>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.DelInsert(System.String)">
            <summary>
            先Delete后Insert 比较实体前后默认的初始值,且不插入与实体初始值相同的字段值
            </summary>
            <param name="strConditionKey">指定作为Delete依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.DelInsert(System.String[])">
            <summary>
            先Delete后Insert 比较实体前后默认的初始值,且不插入与实体初始值相同的字段值
            </summary>
            <param name="arrConditionKey">指定作为Delete依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.DelInsertEx(`0)">
            <summary>
            先Delete后Insert 插入所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="entity">实体默认的初始值</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.DelInsertEx">
            <summary>
            先Delete后Insert 插入所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.DelInsertEx(System.String)">
            <summary>
            先Delete后Insert 插入所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="strConditionKey">指定作为Delete依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.DelInsertEx(System.String[])">
            <summary>
            先Delete后Insert 插入所有字段,其中若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="arrConditionKey">指定作为Delete依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.DelInsertAll">
            <summary>
            先Delete后Insert 插入全部字段
            </summary>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.DelInsertAll(System.String)">
            <summary>
            先Delete后Insert 插入全部字段
            </summary>
            <param name="strConditionKey">指定作为Delete依据的一个字段,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.DelInsertAll(System.String[])">
            <summary>
            先Delete后Insert 插入全部字段
            </summary>
            <param name="arrConditionKey">指定作为Delete依据字段,一个或多个,可以使用对应的EntityColumn属性</param>
            <returns>先Delete后Insert并返回受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetInt32MaxID">
            <summary>
            获取实体对应表字段默认第一个主键的最大值ID+1
            </summary>
            <returns>获取实体对应表字段默认第一个主键的最大值ID+1，没有主键或类型不为数值型返回-1</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetInt64MaxID">
            <summary>
            获取实体对应表字段默认第一个主键的最大值ID+1
            </summary>
            <returns>获取实体对应表字段默认第一个主键的最大值ID，没有主键或类型不为数值型返回-1</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetInt32MaxID(System.String)">
            <summary>
            获取实体对应表指定字段的最大值ID+1
            </summary>
            <param name="strField">指定字段名</param>
            <returns>获取实体对应表指定字段最大值ID+1，没有对应字段或类型不为数值型返回-1</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetInt64MaxID(System.String)">
            <summary>
            获取实体对应表指定字段的最大值ID+1
            </summary>
            <param name="strField">指定字段名</param>
            <returns>获取实体对应表指定字段最大值ID+1，没有对应字段或类型不为数值型返回-1</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetMaxValue(System.String)">
            <summary>
            获取实体对应表指定字段的最大值
            </summary>
            <param name="strField">指定字段名</param>
            <returns>指定字段的最大值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetMinValue(System.String)">
            <summary>
            获取实体对应表指定字段的最小值
            </summary>
            <param name="strField">指定字段名</param>
            <returns>指定字段的最小值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetAvgValue(System.String)">
            <summary>
            获取实体对应表指定字段的平均值
            </summary>
            <param name="strField">指定字段名</param>
            <returns>指定字段的平均值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetCount(System.String)">
            <summary>
            获取实体对应表指定字段统计行值
            </summary>
            <param name="strField">指定字段名，默认(*)</param>
            <returns>指定字段统计行值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetSqlValue(System.String)">
            <summary>
            获取SQL语句执行的第一行第一列的值
            </summary>
            <param name="sql">SQL语句</param>
            <returns>SQL语句执行的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetSqlValue(System.Database.DbCore,System.String)">
            <summary>
            获取SQL语句执行的第一行第一列的值
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(用于DbCore事务)</param>
            <param name="sql">SQL语句</param>
            <returns>SQL语句执行的第一行第一列的值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetSqlDataSet(System.String)">
            <summary>
            获取SQL语句执行的数据集结果
            </summary>
            <param name="sql">SQL语句</param>
            <returns>SQL语句执行的数据集结果</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetSqlDataSet(System.Database.DbCore,System.String)">
            <summary>
            获取SQL语句执行的数据集结果
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(用于DbCore事务)</param>
            <param name="sql">SQL语句</param>
            <returns>SQL语句执行的数据集结果</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetSqlNonQuery(System.String)">
            <summary>
            根据SQL语句执行一个命令并返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <returns>SQL语句执行后受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetSqlNonQuery(System.Database.DbCore,System.String)">
            <summary>
            根据SQL语句执行一个命令并返回受影响的行数
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(用于DbCore事务)</param>
            <param name="sql">SQL语句</param>
            <returns>SQL语句执行后受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetTableName">
            <summary>
            泛型实体的名称，映射为表名
            </summary>
            <returns>泛型实体的名称，映射为表名</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsInfos">
            <summary> 
            获取泛型实体的所有公共属性
            </summary>
            <returns>数组的第一、二、三行分别对应泛型实体公共属性名称、公共属性类型、公共属性类型全称</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsNameReturnArrayList">
            <summary>
            获取对应泛型实体公共属性的名称,并以ArrayList数据的形式返回
            </summary>
            <returns>获取对应泛型实体公共属性的名称</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsName">
            <summary>
            获取对应泛型实体公共属性的名称
            </summary>
            <returns>获取对应泛型实体公共属性的名称</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsName(System.Collections.Hashtable)">
            <summary>
            获取Hashtable对应的键值Key,且该值在泛型实体中存在
            </summary>
            <param name="hash">Hashtable</param>
            <returns>Hashtable对应的键值Key</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsName(System.Collections.Specialized.ListDictionary)">
            <summary>
            获取ListDictionary对应的键值Key,且该值在泛型实体中存在
            </summary>
            <param name="list">ListDictionary</param>
            <returns>ListDictionary对应的键值Key</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsValues(System.String[],System.Collections.Hashtable)">
            <summary>
            根据 arrColumn 获取对应列所对应的值没有为空
            </summary>
            <param name="arrColumn">对应的列名</param>
            <param name="hash">列植对应的HashTable</param>
            <returns>HashTable对应列的列值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsValues(System.String[],System.Collections.Specialized.ListDictionary)">
             <summary>
             根据 arrColumn 获取对应列所对应的值没有为空
             </summary>
             <param name="arrColumn">对应的列名</param>
            <param name="list">列值对应的ListDictionary</param>
             <returns>ListDictionary 对应列的列值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetNotSpecifyColumnsName(System.String[])">
            <summary>
            获取实体除指定列剩下的列的字段
            </summary>
            <param name="arrColumn">所要除去的实体指定列</param>
            <returns></returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDifferentColumnsExceptSpecify(System.String[],`0)">
            <summary>
            比较实体除指定列初始值及现有实体(_entity)新的值，并返回不同值的列
            </summary>
            <param name="arrColumn">实体要移除的指定列</param>
            <param name="entity">泛型实体，默认初始值实体</param>
            <returns>返回不同值的列</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDifferentColumns(`0)">
            <summary>
            比较实体初始值及现有实体(_entity)新的值，并返回不同值的列
            </summary>
            <param name="entity">泛型实体，默认初始值实体</param>
            <returns>返回不同值的列</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsType">
            <summary>
            获取泛型实体的所有公共属性类型简称
            </summary>
            <returns>数组对应泛型实体公共属性类型简称</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsTypeFullName">
            <summary>
            获取泛型实体的所有公共属性类型全称
            </summary>
            <returns>数组对应泛型实体公共属性类型全称</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsTypeFullName(System.String[])">
            <summary>
            获取arrColumn对应的泛型实体字段类型全称
            </summary>
            <param name="arrColumn">(Hashtable、ListDictionary对应的键值Key)arrColumn对应泛型实体字段,且该值在泛型实体中存在</param>
            <returns>arrColumn对应的泛型实体字段类型全称</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsAllValue">
            <summary>
            获取泛型实体的各私有字段所对应的值
            </summary>
            <returns>泛型实体的各私有字段所对应的值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsAllValue(System.Collections.Hashtable,System.String[])">
            <summary>
            获取hash对应泛型实体的各私有字段所对应的值
            </summary>
            <param name="hash">Hashtable</param>
            <param name="arrColumn">Hashtable对应的键值Key,且该值在泛型实体中存在</param>
            <returns>hash对应泛型实体的各私有字段所对应的值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetColumnsAllValue(System.Collections.Specialized.ListDictionary,System.String[])">
            <summary>
            获取hash对应泛型实体的各私有字段所对应的值
            </summary>
            <param name="list">ListDictionary</param>
            <param name="arrColumn">ListDictionary对应的键值Key,且该值在泛型实体中存在</param>
            <returns>hash对应泛型实体的各私有字段所对应的值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntityFieldValue(System.String[])">
            <summary>
            获取实体列(_entity)对应列的列值
            </summary>
            <param name="arrColumn">实体对应的列</param>
            <returns>实体列对应列的列值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntityFieldValue(System.String[],System.Object)">
            <summary>
            获取实体列(_entity)对应列的列值,若与实体字段初始值相同则置该字段为空
            </summary>
            <param name="arrColumn">实体对应的列</param>
            <param name="objDefaultEntity">默认初始值的实体</param>
            <returns>实体列对应列的列值,若与实体字段初始值相同则置该字段为空</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntityFieldValue(`0,System.String[])">
            <summary>
            获取指定该泛型实体实例对象列对应列的列值
            </summary>
            <param name="entity">指定该泛型实体实例对象</param>
            <param name="arrColumn">实体对应的列</param>
            <returns>实体列对应列的列值</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntityPrimaryField">
            <summary>
            获取泛型实体对象Entity的主键对应字段，可能是单个、也可能是联合主键、或没有主键
            </summary>
            <returns>返回实体主键字段数组值，若无主键则返回一行一列空字符串的数组</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetGetEntityPrimaryFieldTypeFullName">
            <summary>
            获取泛型实体的所有实体主键字段属性类型的全称
            </summary>
            <returns>泛型实体的所有实体主键字段属性类型的全称</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntityPrimaryFieldValue">
            <summary>
            获取泛型实体对象Entity的主键对应字段所对应的值，可能是单个、也可能是联合主键、或没有主键
            </summary>
            <returns>返回实体主键字段数组值，若无主键则返回一行一列空字符串的数组</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.IsPrimayKey(System.String)">
            <summary>
            获取泛型实体指定属性字段的主键标示
            </summary>
            <param name="strEntityProperty">泛型实体对应的属性字段名称</param>
            <returns>ture 是主键标示 其余false不是</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntityFieldByAny(System.String[])">
            <summary>
            对当前实体_entity和默认实体_entity1的初始值的比较，返回与默认初始值不同的字段
            </summary>
            <returns>返回与默认初始值不同的字段</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntityFieldByAny(System.String[],`0)">
            <summary>
            对指定实体entity和默认实体_entity1的初始值的比较，返回与默认初始值不同的字段
            </summary>
            <returns>返回与默认初始值不同的字段</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.IsExitByEntityKey">
            <summary>
            根据实体主键判断是否存在当前实体主键值对应记录是否存在
            </summary>
            <returns>true存在，false不存在</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntity(System.String,System.String[],System.String[],System.Object[],System.String[])">
            <summary>
            通过实体条件字段及字段值获取该实体对应的实体信息
            </summary>
            <param name="strTableName">映射表名</param>
            <param name="arrColumn">映射表条件字段</param>
            <param name="arrColumnCSharpType">映射表条件字段类型</param>
            <param name="objColumnValue">映射表条件字段所对应的值</param>
            <param name="arrAllColumn">映射实体字段</param>
            <returns>该实体对应的单条实体信息，没有条件限制或符合条件较多的返回第一条，没有记录的返回null</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetEntity(System.Database.DbCore,System.String,System.String[],System.String[],System.Object[],System.String[])">
            <summary>
            通过实体条件字段及字段值获取该实体对应的实体信息
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例</param>
            <param name="strTableName">映射表名</param>
            <param name="arrColumn">映射表条件字段</param>
            <param name="arrColumnCSharpType">映射表条件字段类型</param>
            <param name="objColumnValue">映射表条件字段所对应的值</param>
            <param name="arrAllColumn">映射实体字段</param>
            <returns>该实体对应的单条实体信息，没有条件限制或符合条件较多的返回第一条，没有记录的返回null</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Insert(System.String,System.String[],System.String[],System.Object[])">
            <summary>
            通过实体映射插入表中一条数据
            </summary>
            <param name="strTableName">映射表名</param>
            <param name="arrColumn">映射表字段</param>
            <param name="arrColumnCSharpType">映射表字段类型</param>
            <param name="objColumnValue">映射表字段所对应的值</param>
            <returns>执行插入数据并返回受影响的行数。</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Update(System.String,System.String[],System.String[],System.Object[],System.String[],System.String[],System.Object[])">
            <summary>
            根据条件信息值更新指定符合条件的指定列的信息值
            </summary>
            <param name="strTableName">表名</param>
            <param name="arrPrimaryKey">主键列</param>
            <param name="arrKeyFullType">主键列类型完全限定名称</param>
            <param name="objKeyValue">主键列值</param>
            <param name="arrColumn">更新字段列</param>
            <param name="arrColumnCSharpType">更新字段列类型完全限定名称</param>
            <param name="objColumnValue">更新字段列值</param>
            <returns>执行更新后受影响的行数</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.Delete(System.String,System.String[],System.String[],System.Object[])">
            <summary>
            根据条件信息值删除指定符合条件的信息值
            </summary>
            <param name="strTableName">映射表名</param>
            <param name="arrColumn">映射表字段</param>
            <param name="arrColumnCSharpType">映射表字段类型</param>
            <param name="objColumnValue">映射表字段所对应的值</param>
            <returns>执行插入数据并返回受影响的行数。</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.ConstructSetColumn(System.String[],System.Database.DbCore)">
            <summary>
            根据列构建SQL语句更新条件信息(SET)
            </summary>
            <param name="arrColumn">条件列，不可为null</param>
            <param name="dbCore">数据库访问核心类实例</param>
            <returns>SQL语句更新条件信息(SET)</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.ConstructSetColumn(System.String[],System.String[],System.Database.DbCore)">
            <summary>
            根据列构建SQL语句更新条件信息(SET)，并剔除约束条件列
            </summary>
            <param name="arrColumn">源更新条件列，不可为null</param>
            <param name="arrConditionColumn">要剔除的约束条件列，不可为null</param>
            <param name="dbCore">数据库访问核心类实例</param>
            <returns>SQL语句更新条件信息(SET)(剔除约束条件列)</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.AddInParameter(System.Database.DbCore,System.Database.DBCommandWrapper,System.String,System.Object,System.String)">
            <summary>
            为命令增加一个输入类型的参数，统一调用的静态方法，方便若要修改，统一修改(主要是字段类型的映射)
            </summary>
            <param name="dbCore">DbCore</param>
            <param name="cmd">DBCommandWrapper</param>
            <param name="strColumnName">数据库字段</param>
            <param name="objValue">数据库字段所对应的值</param>
            <param name="strColumnCSharpType">C# System.Type 的完全限定名称</param>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetInt32MaxID(System.String,System.String)">
            <summary>
            获取表指定字段值的最大值ID+1
            </summary>
            <param name="strTableName">表名</param>
            <param name="strField">字段名</param>
            <returns>int型最大值ID+1</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetInt64MaxID(System.String,System.String)">
            <summary>
            获取表指定字段值的最大值ID+1
            </summary>
            <param name="strTableName">表名</param>
            <param name="strField">字段名</param>
            <returns>long型最大值ID+1</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.IsExist(System.String,System.String[],System.String[],System.Object[])">
             <summary>
             判断指定表是否有与指定条件信息字段相同的记录存在
             </summary>
             <param name="strTableName">表名</param>
             <param name="arrColumnsKey">条件字段名</param>
             <param name="arrKeyFullType">条件字段类型完全限定名</param>
            <param name="objKeyValue">条件字段对应的值</param>
             <returns>true存在、false不存在</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String,System.String[],System.String[],System.Object[])">
            <summary>
            根据条件获取对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="strTableName">表名</param>
            <param name="arrColumn">列名</param>
            <param name="arrColumnCSharpType">对应列的类型</param>
            <param name="objColumnValue">对应列的值</param>
            <returns>对应数据表的信息集</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.String,System.String[],System.String[],System.Object[],System.Database.Extend.Operation[],System.String[],System.Database.Extend.OrderDirection[])">
            <summary>
            根据条件获取对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="strTableName">表名</param>
            <param name="arrColumn">列名</param>
            <param name="arrColumnCSharpType">对应列的类型</param>
            <param name="objColumnValue">对应列的值</param>
            <param name="arrOperate">条件字段名对应比较操作符</param>
            <param name="arrOrderColumn">排序字段数组</param>
            <param name="arrOrder">排序字段对应排序方向(OrderDirection)</param>
            <returns>对应数据表的信息集</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.GetDataTable(System.Database.DbCore,System.String,System.String[],System.String[],System.Object[],System.Database.Extend.Operation[],System.String[],System.Database.Extend.OrderDirection[])">
            <summary>
            根据条件获取对应表的信息集，并以数据表的信息形式返回
            </summary>
            <param name="dbCore">数据库访问核心类DbCore实例(用于DbCore事务)</param>
            <param name="strTableName">表名</param>
            <param name="arrColumn">列名</param>
            <param name="arrColumnCSharpType">对应列的类型</param>
            <param name="objColumnValue">对应列的值</param>
            <param name="arrOperate">条件字段名对应比较操作符</param>
            <param name="arrOrderColumn">排序字段数组</param>
            <param name="arrOrder">排序字段对应排序方向(OrderDirection)</param>
            <returns>对应数据表的信息集</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.ToXml(System.Xml.Formatting)">
            <summary>
            将持久化实体信息输出成Xml格式文本信息(不含DataType属性)
            </summary>
            <param name="xmlFormatting">指定 System.Xml.XmlTextWriter 的格式设置选项</param>
            <returns>与持久化实体信息相对应Xml指定格式化后的文本信息(不含DataType属性)</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.ToXml_(System.Xml.Formatting)">
            <summary>
            将持久化实体信息输出成Xml格式文本信息(含DataType属性)
            </summary>
            <param name="xmlFormatting">指定 System.Xml.XmlTextWriter 的格式设置选项</param>
            <returns>与持久化实体信息相对应Xml指定格式化后的文本信息</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.ToXml(System.String,System.Text.Encoding,System.Xml.Formatting)">
            <summary>
            将持久化实体信息输出成Xml格式信息并写入到文件(不含DataType属性)
            </summary>
            <param name="filename">要写入的文件名。如果该文件存在，它将截断该文件并用新内容对其进行覆盖。</param>
            <param name="encoding">要生成的编码方式。如果编码方式为 null，它将以 UTF-8 的形式写出该文件，并忽略 ProcessingInstruction 中的编码属性。</param>
            <param name="xmlFormatting">指定 System.Xml.XmlTextWriter 的格式设置选项</param>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.ToXml_(System.String,System.Text.Encoding,System.Xml.Formatting)">
            <summary>
            将持久化实体信息输出成Xml格式信息并写入到文件(含DataType属性)
            </summary>
            <param name="filename">要写入的文件名。如果该文件存在，它将截断该文件并用新内容对其进行覆盖。</param>
            <param name="encoding">要生成的编码方式。如果编码方式为 null，它将以 UTF-8 的形式写出该文件，并忽略 ProcessingInstruction 中的编码属性。</param>
            <param name="xmlFormatting">指定 System.Xml.XmlTextWriter 的格式设置选项</param>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.FromXml(System.String)">
            <summary>
            通过与持久化实体信息相对应Xml格式的文本信息实例化到该实体
            </summary>
            <param name="xmlString">与持久化实体信息相对应Xml格式的文本信息</param>
            <returns>实例化该实体信息并与持久化实体信息相对应xmlString文本信息一致</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.FromXmlFile(System.String)">
            <summary>
            通过与持久化实体信息相对应Xml格式的文本信息实例化到该实体信息
            </summary>
            <param name="filename">文件的 URL，该文件包含要加载的 XML 文档。URL 既可以是本地文件，也可以是 HTTP URL（Web 地址）。</param>
            <returns>实例化该实体信息并与持久化实体信息相对应xmlString文本信息一致</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.FromXml(System.Xml.XmlDocument)">
            <summary>
            通过与持久化实体信息相对应Xml格式的文本信息实例化到该实体信息
            </summary>
            <param name="xdoc">XML 文档。</param>
            <returns>实例化该实体信息并与持久化实体信息相对应xmlString文本信息一致</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.ToEntityString">
            <summary>
            将实体对象值信息转换为字符串拼接
            </summary>
            <returns>实体对象值信息的拼接字符串</returns>
        </member>
        <member name="M:System.Database.ORMap.ORMap`1.FromEntityString(System.String)">
            <summary>
            通过与持久化实体信息相对应字符串文本信息实例化到该实体信息
            </summary>
            <param name="entityString">实体对象值信息的拼接字符串</param>
            <returns>返回该实例化后的实体信息并与entityString字符串文本信息一致</returns>
        </member>
        <!-- 对于成员“M:System.Database.ORMap.ORMap`1.ToJSON”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:System.Database.ORMap.ORMap`1.FromJSON(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:System.Database.ORMap.ORMap`1.FromDataRow(System.Data.DataRow)">
            <summary>
            通过与实体信息相对应的 DataRow 实例化到实体信息
            </summary>
            <param name="dr">与实体信息相对应的 DataRow</param>
            <returns>返回实例化后的实体信息并与 DataRow 信息一致</returns>
        </member>
        <member name="T:System.Database.Extend.CommonInternal">
            <summary>
            公共内部类常用方法
            </summary>
        </member>
        <member name="M:System.Database.Extend.CommonInternal.GetColFromEntityColumn(System.String)">
            <summary>
            获取源字段列名(全字段列名或EntityColumn或Entity.s_Column)
            </summary>
            <param name="strColumn">字段列名(可以是EntityColumn或Entity.s_Column)</param>
            <returns>源字段列名</returns>
        </member>
        <member name="M:LXChuTao.ORMapHelp.DbHelper.GetNewDbCore(System.Database.DatabaseType,System.String,System.String)">
            <summary>
            获取一个当前设置新实例的静态方法
            </summary>
            <returns>DbCore的一个新实例</returns>
        </member>
        <member name="M:LXChuTao.ORMapHelp.DbHelper.Notify">
            <summary>
            通知者,PreHandled初始值为null,须做判断
            </summary>
        </member>
        <member name="E:LXChuTao.ORMapHelp.DbHelper.PreHandled">
            <summary>
            委托ORMEventHandler(无参数)
            </summary>
        </member>
        <member name="T:LXChuTao.ORMapHelp.ORMEventHandler">
            <summary>
            声明委托EventHandler(无参数)
            </summary>
        </member>
    </members>
</doc>
