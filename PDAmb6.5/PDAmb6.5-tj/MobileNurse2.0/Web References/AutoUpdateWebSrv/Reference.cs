//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5456
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.CompactFramework.Design.Data 2.0.50727.5456 版自动生成。
// 
namespace HISPlus.AutoUpdateWebSrv {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AutoUpdateWebSrvSoap", Namespace="http://tempuri.org/")]
    public partial class AutoUpdateWebSrv : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public AutoUpdateWebSrv() {
            this.Url = "http://localhost/MobileWebSrv/AutoUpdateWebSrv.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUpdated", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckUpdated(string appCode, System.Data.DataSet ds) {
            object[] results = this.Invoke("CheckUpdated", new object[] {
                        appCode,
                        ds});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckUpdated(string appCode, System.Data.DataSet ds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckUpdated", new object[] {
                        appCode,
                        ds}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckUpdated(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerFileList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetServerFileList(string appCode) {
            object[] results = this.Invoke("GetServerFileList", new object[] {
                        appCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerFileList(string appCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerFileList", new object[] {
                        appCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetServerFileList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetServerFile(string appCode, string fileName) {
            object[] results = this.Invoke("GetServerFile", new object[] {
                        appCode,
                        fileName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerFile(string appCode, string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerFile", new object[] {
                        appCode,
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetServerFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
    }
}
